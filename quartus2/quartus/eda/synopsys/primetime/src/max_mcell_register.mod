/*
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

MODEL
MODEL_VERSION "1.0";
DESIGN "max_mcell_register";

INPUT datain;
INPUT clk;
INPUT aclr;
INPUT pclk[51:0];
INPUT pena[51:0];
INPUT paclr[51:0];
INPUT papre[51:0];
INPUT modesel[12:0];
OUTPUT regout;
OUTPUT fbkout;

/* mode port mapping table::: 
		operation_mode = { normal(0), invert(1), xor(2), xnor(3), vcc(4) };
		output_mode = { reg(5), comb(6) };
		register_mode = { dff(7), tff(8) };
		pexp_mode = { off(9), on(10) };
		power_up = { low(11), high(12) };

*/
td_clk_regout: DELAY (posedge) clk regout COND 
                /* output_mode = reg */
                ( (modesel[5] == 1) );

td_aclr_regout: DELAY (posedge) aclr regout COND 
                /* output_mode = reg */
                ( (modesel[5] == 1) );

td_clk_fbkout: DELAY (posedge) clk fbkout COND 
                /* output_mode = reg && reg_mode == tff */
                ( (modesel[5] == 1) && (modesel[8] == 1) );

td_aclr_fbkout: DELAY (posedge) aclr fbkout COND 
                /* output_mode = reg && reg_mode == tff */
                ( (modesel[5] == 1) && (modesel[8] == 1) );

td_pclk_regout: DELAY (posedge) pclk regout COND 
                /* output_mode = reg */
                ( (modesel[5] == 1) );

td_paclr_regout: DELAY (posedge) paclr regout COND 
                /* output_mode = reg */
                ( (modesel[5] == 1) );

td_papre_regout: DELAY (posedge) papre regout COND 
                /* output_mode = reg */
                ( (modesel[5] == 1) );

td_pclk_fbkout: DELAY (posedge) pclk fbkout COND 
                /* output_mode = reg && reg_mode == tff */
                ( (modesel[5] == 1) && (modesel[8] == 1) );

td_paclr_fbkout: DELAY (posedge) paclr fbkout COND 
                /* output_mode = reg && reg_mode == tff */
                ( (modesel[5] == 1) && (modesel[8] == 1) );

ts_pena_clk: SETUP (posedge) pena clk COND 
                /* output_mode = reg */
                ( (modesel[5] == 1) );

ts_datain_clk: SETUP (posedge) datain clk COND 
            /* output_mode = reg && reg_mode == dff && op_mode != vcc */
            ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
/* start autogenerated code */

ts_pena_pclk0: SETUP (posedge) pena pclk[0] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk1: SETUP (posedge) pena pclk[1] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk2: SETUP (posedge) pena pclk[2] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk3: SETUP (posedge) pena pclk[3] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk4: SETUP (posedge) pena pclk[4] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk5: SETUP (posedge) pena pclk[5] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk6: SETUP (posedge) pena pclk[6] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk7: SETUP (posedge) pena pclk[7] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk8: SETUP (posedge) pena pclk[8] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk9: SETUP (posedge) pena pclk[9] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk10: SETUP (posedge) pena pclk[10] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk11: SETUP (posedge) pena pclk[11] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk12: SETUP (posedge) pena pclk[12] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk13: SETUP (posedge) pena pclk[13] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk14: SETUP (posedge) pena pclk[14] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk15: SETUP (posedge) pena pclk[15] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk16: SETUP (posedge) pena pclk[16] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk17: SETUP (posedge) pena pclk[17] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk18: SETUP (posedge) pena pclk[18] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk19: SETUP (posedge) pena pclk[19] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk20: SETUP (posedge) pena pclk[20] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk21: SETUP (posedge) pena pclk[21] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk22: SETUP (posedge) pena pclk[22] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk23: SETUP (posedge) pena pclk[23] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk24: SETUP (posedge) pena pclk[24] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk25: SETUP (posedge) pena pclk[25] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk26: SETUP (posedge) pena pclk[26] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk27: SETUP (posedge) pena pclk[27] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk28: SETUP (posedge) pena pclk[28] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk29: SETUP (posedge) pena pclk[29] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk30: SETUP (posedge) pena pclk[30] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk31: SETUP (posedge) pena pclk[31] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk32: SETUP (posedge) pena pclk[32] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk33: SETUP (posedge) pena pclk[33] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk34: SETUP (posedge) pena pclk[34] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk35: SETUP (posedge) pena pclk[35] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk36: SETUP (posedge) pena pclk[36] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk37: SETUP (posedge) pena pclk[37] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk38: SETUP (posedge) pena pclk[38] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk39: SETUP (posedge) pena pclk[39] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk40: SETUP (posedge) pena pclk[40] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk41: SETUP (posedge) pena pclk[41] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk42: SETUP (posedge) pena pclk[42] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk43: SETUP (posedge) pena pclk[43] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk44: SETUP (posedge) pena pclk[44] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk45: SETUP (posedge) pena pclk[45] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk46: SETUP (posedge) pena pclk[46] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk47: SETUP (posedge) pena pclk[47] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk48: SETUP (posedge) pena pclk[48] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk49: SETUP (posedge) pena pclk[49] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk50: SETUP (posedge) pena pclk[50] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_pena_pclk51: SETUP (posedge) pena pclk[51] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
ts_datain_pclk0: SETUP (posedge) datain pclk[0] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk1: SETUP (posedge) datain pclk[1] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk2: SETUP (posedge) datain pclk[2] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk3: SETUP (posedge) datain pclk[3] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk4: SETUP (posedge) datain pclk[4] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk5: SETUP (posedge) datain pclk[5] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk6: SETUP (posedge) datain pclk[6] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk7: SETUP (posedge) datain pclk[7] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk8: SETUP (posedge) datain pclk[8] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk9: SETUP (posedge) datain pclk[9] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk10: SETUP (posedge) datain pclk[10] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk11: SETUP (posedge) datain pclk[11] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk12: SETUP (posedge) datain pclk[12] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk13: SETUP (posedge) datain pclk[13] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk14: SETUP (posedge) datain pclk[14] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk15: SETUP (posedge) datain pclk[15] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk16: SETUP (posedge) datain pclk[16] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk17: SETUP (posedge) datain pclk[17] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk18: SETUP (posedge) datain pclk[18] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk19: SETUP (posedge) datain pclk[19] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk20: SETUP (posedge) datain pclk[20] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk21: SETUP (posedge) datain pclk[21] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk22: SETUP (posedge) datain pclk[22] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk23: SETUP (posedge) datain pclk[23] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk24: SETUP (posedge) datain pclk[24] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk25: SETUP (posedge) datain pclk[25] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk26: SETUP (posedge) datain pclk[26] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk27: SETUP (posedge) datain pclk[27] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk28: SETUP (posedge) datain pclk[28] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk29: SETUP (posedge) datain pclk[29] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk30: SETUP (posedge) datain pclk[30] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk31: SETUP (posedge) datain pclk[31] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk32: SETUP (posedge) datain pclk[32] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk33: SETUP (posedge) datain pclk[33] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk34: SETUP (posedge) datain pclk[34] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk35: SETUP (posedge) datain pclk[35] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk36: SETUP (posedge) datain pclk[36] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk37: SETUP (posedge) datain pclk[37] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk38: SETUP (posedge) datain pclk[38] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk39: SETUP (posedge) datain pclk[39] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk40: SETUP (posedge) datain pclk[40] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk41: SETUP (posedge) datain pclk[41] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk42: SETUP (posedge) datain pclk[42] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk43: SETUP (posedge) datain pclk[43] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk44: SETUP (posedge) datain pclk[44] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk45: SETUP (posedge) datain pclk[45] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk46: SETUP (posedge) datain pclk[46] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk47: SETUP (posedge) datain pclk[47] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk48: SETUP (posedge) datain pclk[48] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk49: SETUP (posedge) datain pclk[49] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk50: SETUP (posedge) datain pclk[50] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
ts_datain_pclk51: SETUP (posedge) datain pclk[51] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );

/* end autogenerated code  */
th_pena_clk: HOLD (posedge) pena clk COND 
                /* output_mode = reg */
                ( (modesel[5] == 1) );

th_datain_clk: HOLD (posedge) datain clk COND 
            /* output_mode = reg && reg_mode == dff && op_mode != vcc */
            ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );

/* start autogenerated code  */

th_pena_pclk0: HOLD (posedge) pena pclk[0] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk1: HOLD (posedge) pena pclk[1] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk2: HOLD (posedge) pena pclk[2] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk3: HOLD (posedge) pena pclk[3] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk4: HOLD (posedge) pena pclk[4] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk5: HOLD (posedge) pena pclk[5] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk6: HOLD (posedge) pena pclk[6] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk7: HOLD (posedge) pena pclk[7] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk8: HOLD (posedge) pena pclk[8] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk9: HOLD (posedge) pena pclk[9] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk10: HOLD (posedge) pena pclk[10] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk11: HOLD (posedge) pena pclk[11] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk12: HOLD (posedge) pena pclk[12] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk13: HOLD (posedge) pena pclk[13] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk14: HOLD (posedge) pena pclk[14] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk15: HOLD (posedge) pena pclk[15] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk16: HOLD (posedge) pena pclk[16] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk17: HOLD (posedge) pena pclk[17] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk18: HOLD (posedge) pena pclk[18] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk19: HOLD (posedge) pena pclk[19] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk20: HOLD (posedge) pena pclk[20] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk21: HOLD (posedge) pena pclk[21] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk22: HOLD (posedge) pena pclk[22] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk23: HOLD (posedge) pena pclk[23] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk24: HOLD (posedge) pena pclk[24] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk25: HOLD (posedge) pena pclk[25] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk26: HOLD (posedge) pena pclk[26] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk27: HOLD (posedge) pena pclk[27] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk28: HOLD (posedge) pena pclk[28] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk29: HOLD (posedge) pena pclk[29] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk30: HOLD (posedge) pena pclk[30] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk31: HOLD (posedge) pena pclk[31] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk32: HOLD (posedge) pena pclk[32] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk33: HOLD (posedge) pena pclk[33] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk34: HOLD (posedge) pena pclk[34] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk35: HOLD (posedge) pena pclk[35] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk36: HOLD (posedge) pena pclk[36] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk37: HOLD (posedge) pena pclk[37] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk38: HOLD (posedge) pena pclk[38] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk39: HOLD (posedge) pena pclk[39] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk40: HOLD (posedge) pena pclk[40] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk41: HOLD (posedge) pena pclk[41] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk42: HOLD (posedge) pena pclk[42] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk43: HOLD (posedge) pena pclk[43] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk44: HOLD (posedge) pena pclk[44] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk45: HOLD (posedge) pena pclk[45] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk46: HOLD (posedge) pena pclk[46] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk47: HOLD (posedge) pena pclk[47] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk48: HOLD (posedge) pena pclk[48] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk49: HOLD (posedge) pena pclk[49] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk50: HOLD (posedge) pena pclk[50] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_pena_pclk51: HOLD (posedge) pena pclk[51] COND
             /* output_mode = reg */ 
             ( (modesel[5] == 1) ); 
th_datain_pclk0: HOLD (posedge) datain pclk[0] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk1: HOLD (posedge) datain pclk[1] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk2: HOLD (posedge) datain pclk[2] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk3: HOLD (posedge) datain pclk[3] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk4: HOLD (posedge) datain pclk[4] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk5: HOLD (posedge) datain pclk[5] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk6: HOLD (posedge) datain pclk[6] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk7: HOLD (posedge) datain pclk[7] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk8: HOLD (posedge) datain pclk[8] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk9: HOLD (posedge) datain pclk[9] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk10: HOLD (posedge) datain pclk[10] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk11: HOLD (posedge) datain pclk[11] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk12: HOLD (posedge) datain pclk[12] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk13: HOLD (posedge) datain pclk[13] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk14: HOLD (posedge) datain pclk[14] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk15: HOLD (posedge) datain pclk[15] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk16: HOLD (posedge) datain pclk[16] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk17: HOLD (posedge) datain pclk[17] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk18: HOLD (posedge) datain pclk[18] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk19: HOLD (posedge) datain pclk[19] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk20: HOLD (posedge) datain pclk[20] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk21: HOLD (posedge) datain pclk[21] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk22: HOLD (posedge) datain pclk[22] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk23: HOLD (posedge) datain pclk[23] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk24: HOLD (posedge) datain pclk[24] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk25: HOLD (posedge) datain pclk[25] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk26: HOLD (posedge) datain pclk[26] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk27: HOLD (posedge) datain pclk[27] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk28: HOLD (posedge) datain pclk[28] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk29: HOLD (posedge) datain pclk[29] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk30: HOLD (posedge) datain pclk[30] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk31: HOLD (posedge) datain pclk[31] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk32: HOLD (posedge) datain pclk[32] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk33: HOLD (posedge) datain pclk[33] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk34: HOLD (posedge) datain pclk[34] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk35: HOLD (posedge) datain pclk[35] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk36: HOLD (posedge) datain pclk[36] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk37: HOLD (posedge) datain pclk[37] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk38: HOLD (posedge) datain pclk[38] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk39: HOLD (posedge) datain pclk[39] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk40: HOLD (posedge) datain pclk[40] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk41: HOLD (posedge) datain pclk[41] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk42: HOLD (posedge) datain pclk[42] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk43: HOLD (posedge) datain pclk[43] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk44: HOLD (posedge) datain pclk[44] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk45: HOLD (posedge) datain pclk[45] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk46: HOLD (posedge) datain pclk[46] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk47: HOLD (posedge) datain pclk[47] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk48: HOLD (posedge) datain pclk[48] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk49: HOLD (posedge) datain pclk[49] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk50: HOLD (posedge) datain pclk[50] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
th_datain_pclk51: HOLD (posedge) datain pclk[51] COND
         /* output_mode = reg && reg_mode == dff && op_mode != vcc */
         ( (modesel[5] == 1) && (modesel[7] == 1) && (modesel[4] == 0) );
/* end autogenerated code  */

ENDMODEL
