<DEFAULT_READ_ASSIGNMENT>
--------
Overview
--------

Option to read the assignments from the Quartus II Settings 
File (.qsf) and override assignments obtained from the 
database. All options that pass from the command line 
still override any conflicting assignments found in the 
QSF.

By default, assignments are read from the QSF unless you 
specify "--read_settings_files=off".

---------------------------
Command-Line Option Details
---------------------------

Command-line options are provided for making many common
global project settings and performing common tasks. You
can use either of two methods to make assignments to an
individual entity. If the project exists, open the project
in the Quartus II GUI, change the assignment, and close the
project. The changed assignment is updated in the QSF. Any 
command-line executables you run after this update use the 
updated assignment. See "Option Precedence" below for more 
information. You can also make assignments using the 
Quartus II Tcl scripting API. To completely script the 
creation of a Quartus II project, choose this method.

-----------------
Option Precedence
-----------------

If you are using the command-line executables, you need to
be aware of the precedence of various project assignments
and how to control the precedence. Assignments for a
particular project exist in the QSF for the project.
Assignments for a project can also be made by using
command-line options, as described earlier. Project
assignments are reflected in compiler database files that
hold intermediate compilation results and reflect assignments
made in the previous project compilation.

All command-line options override any conflicting assignments
found in the QSF or the compiler database files. There are
two command-line options to specify whether QSF or compiler
database files take precedence for any assignments not
specified as command-line options.

Note: Any assignment not specified as a command-line option
or found in the QSF or compiler database files is set to its
Quartus II software default value.

The file precedence command-line options are
--read_settings_files and --write_settings_files. By default,
the --read_settings_files and --write_settings_files options
are turned on. Turning on the --read_settings_files option
causes a command-line executable to read assignments from
the QSF instead of from the compiler database files. Turning
on the --write_settings_files option causes a command-line
executable to update the QSF to reflect any specified options,
as happens when closing a project in the Quartus II GUI.

Table 1 lists the precedence for reading assignments
depending on the value of the --read_settings_files option.


* Table 1. Precedence for Reading Assignments

Option Specified                      Precedence for Reading Assignments
------------------------------------  ----------------------------------
--import_settings_files=on (Default)  1. Command-line options
                                      2. Quartus II Settings File (.qsf)
                                      3. Compiler database (db directory, if it exists)
                                      4. Quartus II software defaults

--import_settings_files=off           1. Quartus II Settings File (.qsf)
                                      2. Compiler database (db directory, if it exists)
                                      3. Quartus II software defaults


Table 2 lists the locations to which assignments are
written, depending on the value of the --write_settings_files
command-line option.


* Table 2. Location for Writing Assignments

Option Specified                      Location for Writing Assignments
------------------------------------  --------------------------------
--export_settings_files=on (Default)  1. Quartus II Settings File (.qsf) and
                                      2. Compiler database

--export_settings_files=off           1. Compiler database


The following example assumes that a project named fir_filter
exists, and that the Analysis & Synthesis step has been
performed (using the quartus_map executable).

quartus_fit fir_filter --fmax=80MHz
quartus_tan fir_filter
quartus_tan fir_filter --fmax=100MHz --tao=timing_result-100.tao --write_settings_files=off

The first command, quartus_fit fir_filter --fmax=80MHz, runs
the Quartus II Fitter and specifies a global fMAX requirement
of 80 MHz.

The second command, quartus_tan fir_filter, runs Quartus II
Timing Analyzer for the results of the previous fit.

The third command reruns Quartus II Timing Analyzer with a
global Fmax requirement of 100 MHz and saves the result in
a file called timing_result-100.tao. By specifying the
--write_settings_files=off option, the command-line executable
does not update the QSF to reflect the changed Fmax requirement.
The compiler database files reflect the changed Fmax requirement.
If the --write_settings_files=off option is not specified, the
command-line executable updates the .qsf to reflect the 100 MHz
global fMAX requirement.

Use the --read_settings_files=off and --write_settings_files=off
options (where appropriate) to optimize the way that the
Quartus II software reads and updates the QSF. The following
example shows how to avoid unnecessary QSF reading and writing.

quartus_map filtref --source=filtref --part=ep1s10f780c5
quartus_fit filtref --fmax=100MHz --read_settings_files=off
quartus_tan filtref --read_settings_files=off --write_settings_files=off
quartus_asm filtref --read_settings_files=off --write_settings_files=off

The quartus_tan and quartus_asm executables do not need to
read or write settings files because they do not change any
settings in the project.
</DEFAULT_READ_ASSIGNMENT>

<DEFAULT_WRITE_ASSIGNMENT>
--------
Overview
--------

Option to write out the settings obtained from command-line 
options to the Quartus II Settings File (.qsf). 

By default, assignments are written to the QSF unless you 
specify "--write_settings_files=off".

---------------------------
Command-Line Option Details
---------------------------

Command-line options are provided for making many common
global project settings and performing common tasks. You
can use either of two methods to make assignments to an
individual entity. If the project exists, open the project
in the Quartus II GUI, change the assignment, and close the
project. The changed assignment is updated in the QSF. Any
command-line executables that are run after this update use
the updated assignment. See "Option Precedence" below for
more information. You can also make assignments using the
Quartus II Tcl scripting API. To completely script the 
creation of a Quartus II project, choose this method.

-----------------
Option Precedence
-----------------

If you are using the command-line executables, you need to
be aware of the precedence of various project assignments
and how to control the precedence. You can find ssignments 
for a particular project exist in the QSF for the project.
You can also make assignments for a project by using
command-line options, as described earlier. Project
assignments are reflected in compiler database files that
hold intermediate compilation results and reflect assignments
made in the previous project compilation.

All command-line options override any conflicting assignments
found in the QSF or the compiler database files. There are
two command-line options to specify whether QSF or compiler
database files take precedence for any assignments not
specified as command-line options.

Note: Any assignment not specified as a command-line option
or found in the QSF or compiler database files is set to its
Quartus II software default value.

The file precedence command-line options are
--read_settings_files and --write_settings_files. By default,
the --read_settings_files and --write_settings_files options
are turned on. Turning on the --read_settings_files option
causes a command-line executable to read assignments from
the QSF instead of from the compiler database files. Turning
on the --write_settings_files option causes a command-line
executable to update the QSF to reflect any specified options,
as happens when closing a project in the Quartus II GUI.

Table 1 lists the precedence for reading assignments
depending on the value of the --read_settings_files option.


* Table 1. Precedence for Reading Assignments

Option Specified                      Precedence for Reading Assignments
------------------------------------  ----------------------------------
--import_settings_files=on (Default)  1. Command-line options
                                      2. Quartus II Settings File (QSF)
                                      3. Compiler database (db directory, if it exists)
                                      4. Quartus II software defaults

--import_settings_files=off           1. Quartus II Settings File (QSF)
                                      2. Compiler database (db directory, if it exists)
                                      3. Quartus II software defaults


Table 2 lists the locations to which assignments are
written, depending on the value of the --write_settings_files
command-line option.


* Table 2. Location for Writing Assignments

Option Specified                      Location for Writing Assignments
------------------------------------  --------------------------------
--export_settings_files=on (Default)  1. Quartus II Settings File (.qsf) and
                                      2. Compiler database

--export_settings_files=off           1. Compiler database


The following example assumes that a project named fir_filter
exists, and that the Analysis & Synthesis step has been
performed (using the quartus_map executable).

quartus_fit fir_filter --fmax=80MHz
quartus_tan fir_filter
quartus_tan fir_filter --fmax=100MHz --tao=timing_result-100.tao --write_settings_files=off

The first command, quartus_fit fir_filter --fmax=80MHz, runs
the Quartus II Fitter and specifies a global fMAX requirement
of 80 MHz.

The second command, quartus_tan fir_filter, runs Quartus II
Timing Analyzer for the results of the previous fit.

The third command reruns Quartus II Timing Analyzer with a
global Fmax requirement of 100 MHz and saves the result in
a file called timing_result-100.tao. By specifying the
--write_settings_files=off option, the command-line executable
does not update the QSF to reflect the changed Fmax requirement.
The compiler database files reflect the changed Fmax requirement.
If the --write_settings_files=off option is not specified, the
command-line executable updates the QSF to reflect the 100 MHz
global fMAX requirement.

Use the --read_settings_files=off and --write_settings_files=off
options (where appropriate) to optimize the way that the
Quartus II software reads and updates the QSF. The following
example shows how to avoid unnecessary QSF reading and writing.

quartus_map filtref --source=filtref --part=ep1s10f780c5
quartus_fit filtref --fmax=100MHz --read_settings_files=off
quartus_tan filtref --read_settings_files=off --write_settings_files=off
quartus_asm filtref --read_settings_files=off --write_settings_files=off

The quartus_tan and quartus_asm executables do not need to
read or write settings files because they do not change any
settings in the project.
</DEFAULT_WRITE_ASSIGNMENT>

<TOP_SIMULATION_ID>
A top-level option that indicates that all other options 
specified on the command line are meant for simulation-related 
file generation.

The exact type of output file(s) are specified by secondary 
options. These include: 
    --tool
    --format 
    --output_directory 
    --glitch_filtering 
    --no_top_vhdl_entity 
    --disable_bidir_input_timing_checks 
    --vhdl_architecture 
    --vcd_tb_design_instance_name 
    --vcd_type 
    --functional
    --maintain_design_hierarchy
    --map_illegal_characters
    --short_hpath
    --timescale
    --flatten_buses
    --device_controls_as_ports
    --user_compiled_simlib_dir

All options are always optional, except "--tool" and "--format". The
"--tool" and "--format" options may or may not be optional.

For more information on each option, use "--help=<option>".
</TOP_SIMULATION_ID>

<TOP_GEN_TESTBENCH_ID>

A top-level option that indicates that all other options specified on
the command line are meant for HDL test bench-related file generation.

The exact type of output file(s) are specified by secondary options.
These include:
    --tool
    --format 
    --vector_source
    --testbench_file
    --check_outputs

All options are always optional, except "--tool" and "--format". The
"--tool" and "--format" options may or may not be optional.

    The "--vector_source", "--testbench_file", and "--check_outputs"
    options cannot be used unless the "--gen_testbench" option is used.

For more information on each option, use "--help=<option>".
</TOP_GEN_TESTBENCH_ID>

<TOP_BOARD_SIGNAL_INTEGRITY_ID>

A top-level option that indicates that all other options
specified on the command line are meant for board level signal 
integrity related file generation.

The exact type of output file(s) are specified by the secondary
options --format=ibis and --format=hspice, and --output_directory
The --output_directory option is optional.
</TOP_BOARD_SIGNAL_INTEGRITY_ID>

<TOP_BOARD_BOUNDARY_SCAN_ID>
A top-level option that indicates that all other options
specified on the command line are meant for board level boundary 
scan-related file generation.

The exact type of output file(s) are specified by the secondary
options --format=bsdl, and --output_directory The 
--output_directory option is optional.
</TOP_BOARD_BOUNDARY_SCAN_ID>

<TOP_BOARD_SYMBOL_ID>

A top-level option that indicates that all other options specified on
the command line are meant for board level symbol related file
generation.

The exact type of output file(s) are specified by the
"--tool=viewdraw" and "--output_directory" options.

The --output_directory option is optional.
</TOP_BOARD_SYMBOL_ID>

<TOP_TIMING_ANALYSIS_ID>
A top-level option that indicates that all other options 
specified on the command line are meant for timing analysis-
related file generation.

The exact type of output file(s) are specified by secondary 
options. These include: 
    --tool
    --format
    --output_directory
    --map_illegal_characters
    --short_hpath
    --flatten_buses

All options are always optional, except "--tool" and 
"--format". The "--tool" and "--format" options may or 
may not be optional.

For more information on each option, use "--help=<option>".
</TOP_TIMING_ANALYSIS_ID>

<TOP_BOARD_TIMING_ID>
A top-level option that indicates that all other options 
specified on the command line are meant for board level timing 
related file generation.

The exact type of output file(s) are specified by the 
"--format=stamp" and "--output_directory" options.

The --output_directory option is optional.
</TOP_BOARD_TIMING_ID>

<TOP_FORMAL_VERIFICATION_ID>
A top-level option that indicates that all other options 
specified on the command line are meant for formal 
verification-related file generation.

The exact type of output file(s) are specified by the 
"--tool" and the "--output_directory" option.
The --output_directory option is optional.
</TOP_FORMAL_VERIFICATION_ID>

<TOP_RESYNTHESIS_ID>
A top-level option that indicates that all other options 
specified on the command line are meant for resynthesis-
related file generation.

The exact type of output file(s) are specified by the 
"--tool" option.
</TOP_RESYNTHESIS_ID>

<TOOL_ID>
Option to tell the EDA Netlist Writer to write out a netlist 
for the specified third-party EDA tool. You can choose the 
third-party EDA tool from one of the three categories of 
available tools: simulation, timing analysis, or board level 
design and analysis.

This option overrides the settings specified in the 
Quartus II Settings File (.qsf). 

Both the tool name and format must be specified in order 
to generate a netlist. Available tools and their corresponding 
options are listed below:

Simulation Tool as shown in GUI                       Command-line Options
----------------------------------------------------  ---------------------
Tool: ModelSim Format: VHDL                           --simulation --tool=modelsim --format=vhdl
Tool: ModelSim Format: Verilog                        --simulation --tool=modelsim --format=verilog
Tool: ModelSim-Altera Format: VHDL                    --simulation --tool=modelsim_oem --format=vhdl
Tool: ModelSim-Altera Format: Verilog                --simulation --tool=modelsim_oem --format=verilog
Tool: NC-VHDL Format: VHDL                            --simulation --tool=ncsim --format=vhdl
Tool: NC-Verilog Format: Verilog                      --simulation --tool=ncsim --format=verilog
Tool: VCS-MX                                          --simulation --tool=vcsmx
Tool: VCS                                             --simulation --tool=vcs
Tool: Verilog-XL                                      --simulation --tool=verilogxl
Tool: Active-HDL                                      --simulation --tool=activehdl
Tool: Riviera-PRO                                      --simulation --tool=rivierapro

Timing Analysis Tool as shown in GUI                  Command-line Options
----------------------------------------------------  ---------------------
Tool: PrimeTime Format: Verilog                       --timing_analysis --tool=primetime --format=verilog

Board Level Symbol Tool as shown in GUI               Command-line Options
----------------------------------------------------  ---------------------
Tool: Symbol Generation (ViewDraw)                    --board_symbol --tool=viewdraw

Board Level Timing Analysis Tool as shown in GUI      Command-line Options
----------------------------------------------------  ---------------------
Tool: Stamp Generation Format: STAMP                  --board_timing --format=stamp 

Board Level Signal Integrity Tool as shown in GUI     Command-line Options
----------------------------------------------------  ---------------------
Tool: IBIS Generation Format: IBIS                    --board_signal_integrity --format=ibis
Tool: HSPICE Generation Format: HSPICE                --board_signal_integrity --format=hspice 

Resynthesis Tool as shown in GUI                      Command-line Options
----------------------------------------------------  ---------------------
Tool: Blast FPGA                                          --resynthesis --tool=blast_fpga
Tool: Amplify                                         --resynthesis --tool=amplify
Tool: Precision Physical                              --resynthesis --tool=precision

Formal Verification Tool as shown in GUI              Command-line Options
----------------------------------------------------     ----------------------
Tool: Conformal LEC                                   --formal_verification --tool=conformal

</TOOL_ID>

<FORMAT_ID>
Option to specify the format of a netlist or a test bench.
This option is usually used with the "--tool" option.

The following format values are supported:
    verilog
    vhdl 
    ibis
    hspice
    stamp 
    psdf
    bsdl 

This option overrides the settings specified in the
Quartus II Settings File (.qsf).
</FORMAT_ID>

<OUTPUT_DIRECTORY_ID>
Option to specify the directory for generated output files.

This option overrides the settings specified in the 
Quartus II Settings File (.qsf). 
</OUTPUT_DIRECTORY_ID>

<GLITCH_FILTERING_ID>
Option to specify that output netlists and .sdo file be 
generated for glitch filtering.
This option can only be used with the top-level option 
"--simulation".

This option overrides the settings specified in the 
Quartus II Settings File (.qsf). 
</GLITCH_FILTERING_ID>

<VCD_TESTBENCH_DESIGN_INSTANCE_NAME_ID>
Option to specify the hierarchical path to the instance of the 
design in the testbench. This value is used in the VCD 
generation script

The value should be an absolute hierarchical path. For example
"--vcd_tb_instance_name=/tb/u1". 
</VCD_TESTBENCH_DESIGN_INSTANCE_NAME_ID>

<VCD_TYPE_ID>
Option to specify the type of VCD output file
This option can take three possible values: 
    all 
    no_comb
    none

This option overrides the settings specified in the 
Quartus II Settings File (.qsf). 
</VCD_TYPE_ID>

<APP_DESCRIPTION_ID>
The Quartus(R) II EDA Netlist Writer generates netlist and
other output files for use with other EDA tools. Quartus II 
Analysis & Synthesis, the Fitter, or Timing Analyzer 
must be run successfully before running the EDA Netlist 
Writer, depending on the arguments used.

The options are grouped into two levels: top-level options 
and secondary options. A top-level option specifies a single 
task. You can specify only one top-level option. 

The following top-level options are supported:
--simulation, --timing_analysis, --formal_verification, 
--board_timing, --board_signal_integrity --board_symbol,
--resynthesis, --gen_testbench, --hardcopy

For information on top-level options and corresponding 
secondary level options, use "--help=<option>" for the 
top-level option.

</APP_DESCRIPTION_ID>

<GEN_SCRIPT_ID>
Option that tells the EDA Netlist Writer to generate a 
    simulation command script for third-party EDA simulation tools. 

This option can take three possible values:
    
       rtl
    gate_level
    rtl_and_gate_level

The location of pre-compiled simulation library is 
specified with the option "--user_compiled_simlib_dir".
This option is optional.

For more information on this option, use "--help=<option>".

This option overrides the settings specified in the
Quartus II Settings File (.qsf).
</GEN_SCRIPT_ID>

<SIMLIB_DIR_ID>
Option that specifies directory of a pre-compiled simulation library.
</SIMLIB_DIR_ID>

