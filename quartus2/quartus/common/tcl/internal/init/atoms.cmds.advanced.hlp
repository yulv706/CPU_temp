<<<<versions>>>>
1.0
<<<</versions>>>>
<<<<1.0>>>>
<read_atom_netlist>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: read_atom_netlist [-h | -help] [-long_help] [-file <path>] [-pdb] [-type <map|cmp|asm>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -file <path>: The full path of the netlist file
        -pdb: Read a file in PDB format
        -type <map|cmp|asm>: Read the netlist from the project database of the specific type (stage)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Reads the atom netlist database from the last compilation or from a
file, if specified. Also serves as initializer function for all
operations on netlists in this package.

The -file option specifies an alternative database source For reading
ATM files, the <path> is the full path with the file name.  The -pdb
option tells that -file argument is a PDB, and not an ATM file. In
this case the <path> file name, if any, is ignored; only the directory
is used.  The -type option allows the choice of post-map ("map"),
post_fit ("cmp"), or post-asm ("asm") netlist reading. The
availability of any particular type of netlist depends on the device
family and the extent to which the design was processed so far.
        This option is ignored if -file option is specified.

For best results, call the read_atom_netlist command after any netlist
or project change made outside of this package.	
<<<long_help_section>>>

--------------
Example Usage:
--------------

# read the usual netlist from db
read_atom_netlist

# read from an existing ATM netlist in ./db/
catch {read_atom_netlist -file db/my_netlist.atm} bummer
		
# read the usual PDB netlist from ./other_db/
catch {read_atom_netlist -pdb -file other_db/blah.blah} bummer

# do the same as above (-type is ignored)
catch {read_atom_netlist -pdb -file other_db/blah.blah -type map} bummer

# read post-map netlist from db, even if there's post-fit
read_atom_netlist -type map

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: File or directory "<string>" does not exist. Specify an existing file or directory for reading or create one.
TCL_ERROR	1   	ERROR: Illegal type : "<string>". Specify a legal type.
TCL_ERROR	1   	ERROR: Cannot find compiler database. Make sure quartus_map.exe was run.
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: No compilation database found for atom netlist type <string> -- run the necessary Quartus II software to generate the database.
TCL_ERROR	1   	ERROR: No open project exists
TCL_ERROR	1   	ERROR: Run Quartus II Elaboration & Synthesis (quartus_map) before accessing the atom netlist
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</read_atom_netlist>

<write_atom_netlist>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: write_atom_netlist [-h | -help] [-long_help] -file <path> [-pdb] [-verilog]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -file <path>: The full path of the output file
        -pdb: Write in standard database PDB format (only the directory portion of the <path> is used)
        -verilog: Write in Verilog format
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Writes the current atom netlist into the database or to an ASCII file.
The -verilog option causes it to produce a restricted Verilog
formatted file, same that is used for Fusion output.  The -abo option
causes it to produce an ABO file The -pdb option writes standard
databases at the specified path (the file name of <path>, if any, is
ignored and only the directory path is used).  The file name is
autogenerated using the current revision name.  To overwrite the
existing default database of the current project, use "-file db/", if
called from the project directory, or specify the full DB path.  If
<path> does not exist, it will be created. Any existing files with the
same name will be overwritten unless they are read-only.  
<<<long_help_section>>>

--------------
Example Usage:
--------------

set proj_name "chiptrip"
project_open $proj_name
read_atom_netlist

# creates ./netlist_cache.atm
write_atom_netlist -file netlist_cache.atm

# creates ./netlist_dump.abo              
write_atom_netlist -abo -file netlist_dump.abo

# creates ./netlist_dump.vo
write_atom_netlist -verilog -file netlist_dump.vo

# overwrites the netlist database in db/
write_atom_netlist -pdb -file db/whatever

# writes the netlist database to db/whatever/
write_atom_netlist -pdb -file db/whatever/

# creates ./dst/dump.abo and a PDB file in ./dst/
write_atom_netlist -pdb -abo -file dst/dump.abo

# Sample flow - read the netlist, make ACE-like changes and store it elsewhere
# In all LCELLs with DEAD lutmask, change it to BEEF :) (in-memory)
project_open  chiptrip
read_atom_netlist
foreach_in_collection node [get_atom_nodes -type LCELL] {
	set lut_sum  [get_atom_node_info -key LUTMASK_SUM -node $node]
	if { $lut_sum eq "DEAD" } {
		set_atom_node_info -key LUTMASK_SUM BEEF -node $node
		puts "Atom [get_atom_node_info -key NAME -node $node] updated!"
	}
}

# Note, the netlist won't change permanently unless you write_atom_netlist
# So, dump databases in ./DEAD_fix
write_atom_netlist -pdb -file DEAD_fix/

# ATM dump in ./DEAD_fix
write_atom_netlist -file DEAD_fix/new_netlist.atm
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Failed to write the atom netlist into <string>
TCL_ERROR	1   	ERROR: Cannot find compiler database. Make sure quartus_map.exe was run.
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: No open project exists
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
TCL_ERROR	1   	ERROR: Run Quartus II Elaboration & Synthesis (quartus_map) before accessing the atom netlist
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</write_atom_netlist>

<unload_atom_netlist>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: unload_atom_netlist [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Unloads the atom netlist database from memory. Used to release memory
resources for other tasks, while still running the current executable.
After running this command, you will need to read_atom_netlist before
you can use the netlist again.

For best results, call the read_atom_netlist command before running
any memory-intensive processes.
<<<long_help_section>>>

--------------
Example Usage:
--------------

package require ::quartus::flow
set proj_name "chiptrip"
project_open $proj_name
execute_module -tool map
# initialize, read netlist
read_atom_netlist                        
	### perform_my_netlist_gets_sets      # that's where you access the netlist
# save it, if you care
write_atom_netlist -pdb -file db/
# ->> free memory before running fitter
unload_atom_netlist
execute_module -tool fit

# read the updated netlist
read_atom_netlist
	### perform_my_netlist_gets_sets      # that's where you access the netlist
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</unload_atom_netlist>

<get_atom_nodes>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_atom_nodes [-h | -help] [-long_help] [-matching <pattern>] [-type <type>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -matching <pattern>: Pattern to match when choosing the nodes, e.g. "*clk?"
        -type <type>: Include only atom nodes of this type, e.g. LCELL
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Retrieve a collection of nodes.

Note, the result is not a regular Tcl list. It can only be used with
the foreach_in_collection command.

The -type option specifies a family-independent node type, such as
"PIN", "MAC_MULT", "LCELL", etc. These are CDB_ATOM_BASIC_TYPEs.  Use
the get_legal_node_types command to see all the acceptable types

The -matching option specifies a pattern to match the node name, such
as "*block1*clk", "*clk?", etc. using Tcl regexp. It can be used in
combination with the -type option or by itself.
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_open  chiptrip
read_atom_netlist
get_atom_nodes
get_atom_nodes -type RAM
get_atom_nodes -matching "*block1*"
get_atom_nodes -type PLL -matching "altclklock1:inst?4*p??"

# Dump locations of all pins in the project after fitter
set my_project_after_quartus_fit "chiptrip"
project_open      $my_project_after_quartus_fit
read_atom_netlist
foreach_in_collection node [get_atom_nodes -type PIN] {
	set name     [get_atom_node_info -key name -node $node]
	set location [get_atom_node_info -key location -node $node]
	puts "$name : $location"
}

	# Another example
set atom_coll [get_atom_nodes]
foreach_in_collection atom $atom_coll { puts "$atom belongs to $atom_coll" }

# Sample flow - Print LCELLs with BEEF lutmask
project_open  chiptrip
read_atom_netlist
foreach_in_collection node [get_atom_nodes -type LCELL] {
	puts "[get_atom_node_info -key LUTMASK_SUM -node $node]"
	if { [get_atom_node_info -key LUTMASK_SUM -node $node] eq "BEEF" } {
		puts "[get_atom_node_info -key NAME -node $node] has BEEF! Are you hungry?"
	}
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal type : "<string>". Specify a legal type.
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_atom_nodes>

<get_chip_info>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_chip_info [-h | -help] [-long_help] -key <info key>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -key <info key>: The type of information
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Retrieve the specified information about the chip (CDB_CHIP_DB_ENTRY).
Values that -key can take can be obtained by looking at ATM files (for
now)
	
If the data for the specified <info key> is available for the
specified node (and the current device family), the result is the
value of the parameter.  Otherwise, the result is an empty string, and
a warning is issued. The -key parameter determines the expected output
type.
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_open  chiptrip
read_atom_netlist
get_chip_info -key BOOL_FIT_SUCCESSFUL
get_chip_info -key ENUM_USER_FAMILY

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal key : "<string>". Specify a legal key (use the get_legal_info_keys command to get the list).
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
TCL_ERROR	1   	ERROR: Run Quartus II Placement and Routing (quartus_fit) before accessing <string> information
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_chip_info>

<set_chip_info>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_chip_info [-h | -help] [-long_help] -key <key> <value name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -key <key>: The type of information
        <value name>: The value being set
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Sets the specified information about the chip (CDB_CHIP_DB_ENTRY).
The -key parameter determines the expected type of the -value
parameter.  Values that the -key parameter can take can be obtained by
looking at ATM files (for now)

The result is 1 (true) if the set was successful or an error
otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_open  chiptrip
read_atom_netlist
set_chip_info -key BOOL_FIT_SUCCESSFUL 1
set_chip_info -key ENUM_USER_FAMILY "Stratix GX"
# Note, the netlist won't change permanently unless you write_atom_netlist

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal argument <string>. Specify legal arguments as described in Help text for the command.
TCL_ERROR	1   	ERROR: Illegal key : "<string>". Specify a legal key (use the get_legal_info_keys command to get the list).
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
TCL_ERROR	1   	ERROR: Failed setting <string> = <string>. The data for the specified key is read-only, or is not applicable for the current device family, or the value that you are trying to set is not legal for that key, for example "a" when an integer is expected. Either attempt only valid data sets or catch this error.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_chip_info>

<get_power_setting>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_power_setting [-h | -help] [-long_help] [-tile <tile index>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -tile <tile index>: Specifies the power tile
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Retrieve the power setting of the specified tile as a string, if
available. Otherwise, the result is an empty string, and a warning is
issued.

If no tile index is specified the function returns the list of all
possible setting values.
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_open  chiptrip
read_atom_netlist
puts "PWR Setting: [get_power_setting -tile 2]"
puts "Available PWR Settings: [get_power_setting]"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Missing or illegal vector index : "<string>". Specify a legal vector index which should be a positive integer.
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
TCL_ERROR	1   	ERROR: Run Quartus II Placement and Routing (quartus_fit) before accessing <string> information
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_power_setting>

<get_atom_node_info>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_atom_node_info [-h | -help] [-long_help] [-feature <obj feature key>] -key <info key> -node <node id>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -feature <obj feature key>: The object feature type
        -key <info key>: The type of information
        -node <node id>: Identifier of the node
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Retrieve the specified information about the node.  Values that -key
can take can be obtained with the get_legal_info_keys command In
addition, the following -key values are supported:

	NAME                - full atom name
	LOCATION            - atom location string (fails for unplaced atoms)
	TYPE                - basic atom type, e.g. PLL, RAM, etc., same as -type in get_atom_nodes
	BOOL_ENCRYPTED      - is this atom encrypted?

The -feature option is used only with the object keys, in which case
it is a required argument. Otherwise the -feature option is ignored.
Values that the -feature option can take can be obtained with the
get_legal_object_features command Keys and features are not documented
anywhere else.
	
If the data for the specified <info key> is available for the
specified node (and the current device family), the result is the
value of the parameter.  Otherwise, the result is an empty string, and
a warning is issued.  -key parameter determines the expected output
type.  ***_VEC_* returns a list, HDBID_* is uint, ENUM_* is string,
LUTMASK_* is hex string.
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_open  chiptrip
read_atom_netlist
get_atom_node_info -key BOOL_WYSIWYG -node 3
get_atom_node_info -key OBJECT_REAL_EXTERNAL_PARAMETERS  -node 3 -feature OBJECT_INT_BANDWIDTH
get_atom_node_info -key INT_VEC_INCLK_INPUT_PERIOD -node 14
get_atom_node_info -key ITERM_VEC_SUM_LUTMASK_MAP -node 14 -feature ignored_whatever

# Sample flow - Print LCELLs with BEEF lutmask
project_open  chiptrip
read_atom_netlist
foreach_in_collection node [get_atom_nodes -type LCELL] {
	puts "[get_atom_node_info -key LUTMASK_SUM -node $node]"
	if { [get_atom_node_info -key LUTMASK_SUM -node $node] eq "BEEF" } {
		puts "[get_atom_node_info -key NAME -node $node] has BEEF! Are you hungry?"
	}
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot access <string> data of the encrypted atom node %u. This operation involves an encrypted atom node. Use the BOOL_ENCRYPTED test to avoid such nodes and the error.
TCL_ERROR	1   	ERROR: Missing or illegal object feature name : "<string>". Specify a legal object feature (Use the get_legal_object_features command to get the list).
TCL_ERROR	1   	ERROR: Illegal key : "<string>". Specify a legal key (use the get_legal_info_keys command to get the list).
TCL_ERROR	1   	ERROR: Illegal node ID : "<string>". Specify a legal node ID.
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
TCL_ERROR	1   	ERROR: Run Quartus II Placement and Routing (quartus_fit) before accessing <string> information
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_atom_node_info>

<set_atom_node_info>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_atom_node_info [-h | -help] [-long_help] [-feature <obj feature key>] [-index <vector index>] -key <key> -node <node id> <value name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -feature <obj feature key>: The object feature type
        -index <vector index>: The index in vector data
        -key <key>: The type of information
        -node <node id>: Identifier of the node
        <value name>: The value being set
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Sets the specified information for the node. The -key parameter
determines the expected type of the -value parameter.  HDBID_* is
uint, ENUM_* is string, LUTMASK_* is hex string ***_VEC_* uses -index
to modify vector elements one-by-one Values that -key can take can be
obtained by get_legal_info_keys In addition, the following -key values
are supported: LOCATION

The -feature parameter is only used with the object keys, in which
case it is a required argument and -value specifies the value of the
object feature.  Otherwise -feature argument is ignored.  Values that
-feature can take can be obtained by get_legal_object_features

The -index parameter is only used with the ***_VEC_* keys, in which
case it is a required argument. Otherwise -index argument is ignored.

The result is 1 (true) if the set was successful or an error otherwise.

Keys and features are not documented anywhere else (yet?)		
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_open  chiptrip
read_atom_netlist
set_atom_node_info -key BOOL_WYSIWYG 1 -node 3
set_atom_node_info -key BOOL_WYSIWYG 1 -node 3 -index ignored_whatever -feature ignored_whatever
catch {set_atom_node_info -key OBJECT_REAL_EXTERNAL_PARAMETERS 300 -feature OBJECT_INT_BANDWIDTH -node 3} bummer
catch {set_atom_node_info -key INT_VEC_INCLK_INPUT_PERIOD 300 -index 1 -node 14} bummer
catch {set_atom_node_info -key ITERM_VEC_SUM_LUTMASK_MAP 4 -index 0 -node 14} bummer

# Sample flow - In all LCELLs with DEAD lutmask, change it to BEEF :) (in-memory)
# Note, the netlist won't change permanently unless you write_atom_netlist
project_open  chiptrip
read_atom_netlist
foreach_in_collection node [get_atom_nodes -type LCELL] {
	set lut_sum  [get_atom_node_info -key LUTMASK_SUM -node $node]
	puts $lut_sum
	if { $lut_sum eq "DEAD" } {
		set_atom_node_info -key LUTMASK_SUM BEEF -node $node
		puts "Atom [get_atom_node_info -key NAME -node $node] updated!"
	}
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot access <string> data of the encrypted atom node %u. This operation involves an encrypted atom node. Use the BOOL_ENCRYPTED test to avoid such nodes and the error.
TCL_ERROR	1   	ERROR: Illegal argument <string>. Specify legal arguments as described in Help text for the command.
TCL_ERROR	1   	ERROR: Missing or illegal object feature name : "<string>". Specify a legal object feature (Use the get_legal_object_features command to get the list).
TCL_ERROR	1   	ERROR: Missing or illegal vector index : "<string>". Specify a legal vector index which should be a positive integer.
TCL_ERROR	1   	ERROR: Illegal key : "<string>". Specify a legal key (use the get_legal_info_keys command to get the list).
TCL_ERROR	1   	ERROR: Illegal node ID : "<string>". Specify a legal node ID.
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
TCL_ERROR	1   	ERROR: Failed setting <string> = <string>. The data for the specified key is read-only, or is not applicable to the specified <node ID> for the current device family, or the value that you are trying to set is not legal for that key, for example "a" when an integer is expected. If setting object data, you also may have typed an illegal feature name, or the data is not applicable to the specified feature. Either attempt only valid data sets or catch this error.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_atom_node_info>

<get_atom_node_by_name>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_atom_node_by_name [-h | -help] [-long_help] -name <node name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <node name>: Full hierarchy name of the node
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Returns the ID of the node which has the full name specified.  
If the node	cannot be found, -1 is returned
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_open  chiptrip
read_atom_netlist
if { ![catch {set mynode [get_atom_node_by_name -name "block2|input14"]} bummer] } {
	get_atom_node_info -key LOCATION -node $mynode
} else {
	puts $bummer
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot find node named "<string>". A node with this name could not be found in the current netlist. Make sure you specify the correct hierarchy path for this netlist.
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_atom_node_by_name>

<get_atom_iport_by_type>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_atom_iport_by_type [-h | -help] [-long_help] [-index <literal index>] -node <node id> -type <port type>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -index <literal index>: Optional literal (bus) index. Non-negative integer, zero by default
        -node <node id>: Identifier of the node
        -type <port type>: DB_INPUT_PORT_TYPE string
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Retrieve the input port of the specified node, type and literal index. 
Returns -1, if port is not found.
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_open  chiptrip
read_atom_netlist
get_atom_iport_by_type -node 3 -type DATAIN
get_atom_iport_by_type -node 3 -type DATAIN -index 2

# Sample Flow - find the percentage of inverted ports of type $my_port_type in all PINs in design
project_open  chiptrip
read_atom_netlist
set inverts 0
set port_count 0
set my_port_type DATAIN
foreach_in_collection node [get_atom_nodes -type PIN] {
	set my_port [get_atom_iport_by_type -node $node -type $my_port_type]
	if { $my_port != -1 } {
		if { [get_atom_port_info -node $node -type iport -port_id $my_port -key is_inverted] } {
			incr inverts 1
		}
		incr port_count 1
	}
}
puts "Design has [expr 100 * $inverts / $port_count]% of $my_port_type PIN inputs inverted."
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot access <string> data of the encrypted atom node %u. This operation involves an encrypted atom node. Use the BOOL_ENCRYPTED test to avoid such nodes and the error.
TCL_ERROR	1   	ERROR: Port type "<string>" is illegal for this node. Specify a legal type.
TCL_ERROR	1   	ERROR: Illegal argument <string>. Specify legal arguments as described in Help text for the command.
TCL_ERROR	1   	ERROR: Illegal node ID : "<string>". Specify a legal node ID.
TCL_ERROR	1   	ERROR: Illegal type : "<string>". Specify a legal type.
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_atom_iport_by_type>

<get_atom_oport_by_type>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_atom_oport_by_type [-h | -help] [-long_help] [-index <literal index>] -node <node id> -type <port type>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -index <literal index>: Optional literal (bus) index. Non-negative integer, zero by default
        -node <node id>: Identifier of the node
        -type <port type>: DB_OUTPUT_PORT_TYPE string
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Retrieve the output port of the specified node, type and literal index.
Returns -1, if port is not found.
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_open  chiptrip
read_atom_netlist
get_atom_oport_by_type -node 3 -type PADIO
get_atom_oport_by_type -node 3 -type PADIO -index 2

# Sample Flow - find the average fan-out of ports of type $my_port_type in all PINs in design
project_open  chiptrip
read_atom_netlist
set fanouts 0
set port_count 0
set my_port_type COMBOUT
foreach_in_collection node [get_atom_nodes -type PIN] {
	set my_port [get_atom_oport_by_type -node $node -type $my_port_type]
	if { $my_port != -1 } {
		incr fanouts [llength [get_atom_port_info -node $node -type oport -port_id $my_port -key fanout]]
		incr port_count 1
	}
}
puts "The average fan-out of $my_port_type PIN outputs is [expr 1.0 * $fanouts / $port_count]."
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot access <string> data of the encrypted atom node %u. This operation involves an encrypted atom node. Use the BOOL_ENCRYPTED test to avoid such nodes and the error.
TCL_ERROR	1   	ERROR: Port type "<string>" is illegal for this node. Specify a legal type.
TCL_ERROR	1   	ERROR: Illegal argument <string>. Specify legal arguments as described in Help text for the command.
TCL_ERROR	1   	ERROR: Illegal node ID : "<string>". Specify a legal node ID.
TCL_ERROR	1   	ERROR: Illegal type : "<string>". Specify a legal type.
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_atom_oport_by_type>

<get_atom_iports>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_atom_iports [-h | -help] [-long_help] -node <node id>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -node <node id>: Identifier of the node
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Retrieve an iterable list of input ports of the specified node.
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_open  chiptrip
read_atom_netlist
get_atom_iports -node 3

# Sample Flow - print delays on iterms of the specified atom node
project_open  chiptrip
read_atom_netlist
set atom 3
set iterms [get_atom_iports -node $atom]
puts "--- Iterms: $iterms"
foreach i $iterms {
	puts "delay\[$i\] = [get_atom_port_info -node $atom -type iport -port_id $i -key delay]"
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot access <string> data of the encrypted atom node %u. This operation involves an encrypted atom node. Use the BOOL_ENCRYPTED test to avoid such nodes and the error.
TCL_ERROR	1   	ERROR: Illegal node ID : "<string>". Specify a legal node ID.
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_atom_iports>

<get_atom_oports>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_atom_oports [-h | -help] [-long_help] -node <node id>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -node <node id>: Identifier of the node
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Retrieve an iterable list of output ports of the specified node.
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_open  chiptrip
read_atom_netlist
get_atom_oports -node 3

# Sample Flow - get famout of each oport of the specified atom node
project_open  chiptrip
read_atom_netlist
set atom 3
set oterms [get_atom_oports -node $atom]
puts "--- Oterms: $oterms\n Fanout:"
foreach i $oterms {
	puts "(node,iterm) \[$i\] = [get_atom_port_info -node $atom -type oport -port_id $i -key fanout]"
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot access <string> data of the encrypted atom node %u. This operation involves an encrypted atom node. Use the BOOL_ENCRYPTED test to avoid such nodes and the error.
TCL_ERROR	1   	ERROR: Illegal node ID : "<string>". Specify a legal node ID.
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_atom_oports>

<get_atom_port_info>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_atom_port_info [-h | -help] [-long_help] -key <info key> -node <node id> -port_id <port id> -type <iport/oport>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -key <info key>: The type of information
        -node <node id>: Identifier of the node
        -port_id <port id>: The index of the port
        -type <iport/oport>: The type of port for the node
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Retrieve the specified information about the node.
Values that -key can take are:
	IPORT:
		fanin           : The source (node ID, oport ID)
		type            : DB_INPUT_PORT_TYPE string
		delay           : IC Delay to the iterm	
		literal_index   : Port literal (bus) index
		is_inverted     : True if iterm is inverted
		is_global       : True if global
		get_global	: Get global type string
		is_row_global   : True if row global
		is_logical_vcc  : True if VCC
		is_logical_gnd  : True if GND
		IS_ENCRYPTED    : True for ports that belong to an encrypted atom node

	OPORT:
		name            : Signal name
		name_id         : HDB name ID for the signal name
		fanout          : List of destinations (node ID, iport ID) fed by this oport
		type            : DB_OUTPUT_PORT_TYPE string
		literal_index   : Port literal (bus) index
		timing_node     : Get TDB node
		is_registered   : True if oterm is registered
		is_inverted     : True if oterm is inverted
		is_global       : True if oterm is global
		is_row_global   : True if oterm is Row global
		is_auto_global  : True if oterm is AUTO global
		is_observable   : True if oterm is marked OBSERVABLE
		lutmask         : LUTMASK of this oterm
		IS_ENCRYPTED    : True for ports that belong to an encrypted atom node
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_open  chiptrip
read_atom_netlist
catch {get_atom_port_info -node 3 -type iport -port_id 2 -key name} bummer

# Sample Flow - dump accessible input port data of atom
project_open  chiptrip
read_atom_netlist
set atom 3
set iterms [get_atom_iports -node $atom]
puts "--- Iterms: $iterms"
foreach i $iterms {
	set delay [get_atom_port_info -node $atom -type iport -port_id $i -key delay]
	if { $delay == "0.000 ns" } {
		set delay "$delay (run quartus_fit first)"
	}
	puts "	Input Port $i:
	fanin:		[get_atom_port_info -node $atom -type iport -port_id $i -key fanin]
	type:		[get_atom_port_info -node $atom -type iport -port_id $i -key type]
	delay:		$delay
	is_inverted:	[get_atom_port_info -node $atom -type iport -port_id $i -key is_inverted]
	is_global:	[get_atom_port_info -node $atom -type iport -port_id $i -key is_global]
	get_global:	[get_atom_port_info -node $atom -type iport -port_id $i -key get_global]
	is_row_global:	[get_atom_port_info -node $atom -type iport -port_id $i -key is_row_global]
	is_logical_vcc:	[get_atom_port_info -node $atom -type iport -port_id $i -key is_logical_vcc]
	is_logical_gnd:	[get_atom_port_info -node $atom -type iport -port_id $i -key is_logical_gnd]"
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot access <string> data of the encrypted atom node %u. This operation involves an encrypted atom node. Use the BOOL_ENCRYPTED test to avoid such nodes and the error.
TCL_ERROR	1   	ERROR: Illegal key : "<string>". Specify a legal key (use the get_legal_info_keys command to get the list).
TCL_ERROR	1   	ERROR: Illegal node ID : "<string>". Specify a legal node ID.
TCL_ERROR	1   	ERROR: Illegal input or output port ID : "<string>". Specify a legal port ID for the chosen port type (iport, oport).
TCL_ERROR	1   	ERROR: Illegal type : "<string>". Specify a legal type.
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_atom_port_info>

<get_legal_info_keys>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_legal_info_keys [-h | -help] [-long_help] [-node <node id>] -type <data type>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -node <node id>: Optional for atom node-specific test (read_atom_netlist first)
        -type <data type>: One of the {ALL, bool, int, uint, string, enum, hdbid, lutmask, pointer, int_vec, uint_vec, string_vec, iterm_vec, oterm_vec}
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

With the specified -type as one of the {ALL, BOOL, INT, UINT, STRING,
ENUM, HDBID, LUTMASK, POINTER, INT_VEC, UINT_VEC, STRING_VEC,
ITERM_VEC, OTERM_VEC, ATOM_BITS}, the function returns all the legal values that
-key argument of get_atom_node_info or set_atom_node_info can take for
this type of data.

Without -node intended only for reference, not in the actual
scripts. With -node it can be used to determine all the valid get keys
for this particular node (but setting for some may still be invalid
because some data is constant) This option requires read_atom_netlist
performed first.
<<<long_help_section>>>

--------------
Example Usage:
--------------

puts [get_legal_info_keys -type BOOL]
# prints all the supported keys (of all the supported types) 
puts [get_legal_info_keys -type all]

project_open chiptrip
read_atom_netlist
puts [get_legal_info_keys -type BOOL -node 5]

# Sample flow - An example of a pseudo-ATM dump for atom 2 
set atom 2
project_open chiptrip
read_atom_netlist
set type [get_atom_node_info -key TYPE -node $atom]
set name [get_atom_node_info -key NAME -node $atom]
puts "\n node $type $atom $name"
puts "{"
# Get all the possibe keys applicable to this atom
foreach key [get_legal_info_keys -node $atom -type ALL] {
	puts -nonewline "\t"
	# when dealing with OBJECT keys, print all obj features
	if { [regexp -nocase "^object" $key] == 1 } {
		puts "$key ="
		puts "\t{"
		foreach feature [get_legal_object_features -key $key -node $atom -type all] {
			
			puts -nonewline "\t\t"
			puts "$feature = [get_atom_node_info -key $key -node $atom -feature $feature]"
		}
		puts "\t}"
	} else {
		puts "$key = [get_atom_node_info -key $key -node $atom]"
	}
}
puts "}"
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal node ID : "<string>". Specify a legal node ID.
TCL_ERROR	1   	ERROR: Illegal type : "<string>". Specify a legal type.
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_legal_info_keys>

<get_legal_object_features>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_legal_object_features [-h | -help] [-long_help] -key <object> [-node <node id>] -type <data type>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -key <object>: One of the OBJECT_*** keys
        -node <node id>: For atom node-specific test (read_atom_netlist first)
        -type <data type>: One of the {ALL, int, uint, float, string, enum, hdbid, int_vec, enum_vec}
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

With the specified -key as one of the legal OBJECT keys, the function
returns all the legal values that -feature argument of
get_atom_node_info or set_atom_node_info can take for this OBJECT.

The -node parameter is a node-specific test that shows only feature
applicable to the object in the specified netlist node. (But setting
for some may still be invalid because some data is constant.)  This
option requires read_atom_netlist performed first.
<<<long_help_section>>>

--------------
Example Usage:
--------------

puts [get_legal_object_features -key OBJECT_REAL_EXTERNAL_PARAMETERS -type fLOAt]

project_open chiptrip
read_atom_netlist
puts [get_legal_object_features -key OBJECT_REAL_INTERNAL_PARAMETERS -node 5 -type ENUM_VEC]
	
# Sample flow - dump all features of OBJECT_REAL_INTERNAL_PARAMETERS 
# of all PLL atoms in the project
project_open chiptrip
read_atom_netlist
set key OBJECT_REAL_INTERNAL_PARAMETERS 
foreach_in_collection atom [get_atom_nodes -type PLL] {
	puts "\n OBJECT_REAL_INTERNAL_PARAMETERS for atom $atom ([get_atom_node_info -key NAME -node $atom])"
	foreach feature [get_legal_object_features -key $key -node $atom -type all] {
		puts "$feature = [get_atom_node_info -key $key -node $atom -feature $feature]"
	}
}
project_close


-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal key : "<string>". Specify a legal key (use the get_legal_info_keys command to get the list).
TCL_ERROR	1   	ERROR: Illegal node ID : "<string>". Specify a legal node ID.
TCL_ERROR	1   	ERROR: Illegal type : "<string>". Specify a legal type.
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_legal_object_features>

<get_legal_node_types>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_legal_node_types [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Returns a list of basic node types supported in get_atom_nodes (-type
filtering option) These types are device family-independent, although
not necessarily applicable to every device family, e.g. PLL, while not
limited to YGR_PLL, still invalid for FLEX6000.  Intended mostly for
reference - see what types exist and use then in get_atom_nodes.
<<<long_help_section>>>

--------------
Example Usage:
--------------

get_legal_node_types 

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_legal_node_types>

<get_converted_node_name>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_converted_node_name [-h | -help] [-long_help] [-full_name] <node id>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -full_name: Option to return the full hierarchical name
        <node id>: Node ID
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Given the node ID, returns the converted unit name without the
hierarchy or the converted full hierarchical name if "-full_name" is
specified.

Only the HardCopy II device family is currently supported.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Display the converted unit name and full hierarchical
# name for each pin
project_open chiptrip
read_atom_netlist
foreach_in_collection atom_id [get_atom_nodes -type PIN] {

	puts "\n"
	puts "Atom ID: $atom_id"
	puts "-----------------"

	puts "Unit name: [get_converted_node_name $atom_id]"
	puts "Full name: [get_converted_node_name $atom_id -full_name]"
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot access <string> data of the encrypted atom node %u. This operation involves an encrypted atom node. Use the BOOL_ENCRYPTED test to avoid such nodes and the error.
TCL_ERROR	1   	ERROR: Illegal device family: <string>. The device family currently supported by the command are for Hardcopy families".
TCL_ERROR	1   	ERROR: Illegal node ID : "<string>". Specify a legal node ID.
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
TCL_ERROR	1   	ERROR: Run Quartus II Placement and Routing (quartus_fit) before accessing <string> information
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_converted_node_name>

<get_converted_port_name>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_converted_port_name [-h | -help] [-long_help] [-full_name] -node_id <node id> <port id>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -full_name: Option to return the full hierarchical name
        -node_id <node id>: Option to specify the node ID
        <port id>: Output port ID
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Given the port ID and the node ID, returns the converted unit name
without the hierarchy or the converted full hierarchical name if
"-full_name" is specified.

Only the HardCopy II device family is currently supported.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Display the converted unit name and full hierarchical
# name for each fanout
project_open chiptrip
read_atom_netlist
foreach_in_collection atom_id [get_atom_nodes -type PIN] {

	set oterms [get_atom_oports -node $atom_id]

	puts "\n"
	puts "Atom ID: $atom_id, Oterm ID(s): $oterms"
	puts "---------------------------------------"

	foreach oterm_id $oterms {

		puts "Unit name: [get_converted_port_name $oterm_id -node_id $atom_id]"
		puts "Full name: [get_converted_port_name $oterm_id -node_id $atom_id -full_name]"
	}
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot access <string> data of the encrypted atom node %u. This operation involves an encrypted atom node. Use the BOOL_ENCRYPTED test to avoid such nodes and the error.
TCL_ERROR	1   	ERROR: Illegal device family: <string>. The device family currently supported by the command are for Hardcopy families".
TCL_ERROR	1   	ERROR: Illegal input or output port ID : "<string>". Specify a legal port ID for the chosen port type (iport, oport).
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
TCL_ERROR	1   	ERROR: Run Quartus II Placement and Routing (quartus_fit) before accessing <string> information
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_converted_port_name>

<get_original_node_id>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_original_node_id [-h | -help] [-long_help] <converted node name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <converted node name>: Converted node name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Given the converted node name, returns the original node ID.

The converted node name can be obtained with the following two
commands:

get_converted_node_name
get_converted_port_name

Only the HardCopy II device family is currently supported.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Display the converted unit name and full hierarchical
# name for each pin
project_open chiptrip
read_atom_netlist
foreach_in_collection atom_id [get_atom_nodes -type PIN] {

	set oterms [get_atom_oports -node $atom_id]

	puts "\n"
	puts "Atom ID: $atom_id, Oterm ID(s): $oterms"
	puts "---------------------------------------"

	set unit_name [get_converted_node_name $atom_id]
	set full_name [get_converted_node_name $atom_id -full_name]

	puts "--> Atom ID: $atom_id"
	puts "Unit name: $unit_name"
	puts "Full name: $full_name"
	puts "Original atom ID (Unit name): [get_original_node_id $unit_name]"
	puts "Original atom ID (Full name): [get_original_node_id $full_name]"

	foreach oterm_id $oterms {

		set unit_name [get_converted_port_name $oterm_id -node_id $atom_id]
		set full_name [get_converted_port_name $oterm_id -node_id $atom_id -full_name]

		puts "--> Oterm ID: $oterm_id"
		puts "Unit name: $unit_name"
		puts "Full name: $full_name"
		puts "Original oterm ID (Unit name): [get_original_node_id $unit_name]"
		puts "Original oterm ID (Full name): [get_original_node_id $full_name]"
	}
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot access <string> data of the encrypted atom node %u. This operation involves an encrypted atom node. Use the BOOL_ENCRYPTED test to avoid such nodes and the error.
TCL_ERROR	1   	ERROR: Cannot find node named "<string>". A node with this name could not be found in the current netlist. Make sure you specify the correct hierarchy path for this netlist.
TCL_ERROR	1   	ERROR: Illegal device family: <string>. The device family currently supported by the command are for Hardcopy families".
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
TCL_ERROR	1   	ERROR: Run Quartus II Placement and Routing (quartus_fit) before accessing <string> information
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_original_node_id>

<convert_cell_name_to_hc>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: convert_cell_name_to_hc [-h | -help] [-long_help] -cell_type <Atom basic type> [-use_sdc_format] <name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -cell_type <Atom basic type>: The atom's basic type
        -use_sdc_format: Activates SDC format
        <name>: Name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Given the node atom type, node's cell name, function returns the
converted Hardcopy II name.

Only the HardCopy II device family is currently supported.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Display the converted Harcopy II name and full hierarchical
# name for each atom.
package require ::quartus::flow
set proj_name "chiptrip"
project_open $proj_name
set_global_assignment -name family HardCopyII
execute_flow -compile
read_atom_netlist
foreach_in_collection atom_id [get_atom_nodes] {

	puts "\n"
	puts "Atom ID: $atom_id"
	puts "-----------------"

	set cell_type [get_atom_node_info -key TYPE -node $atom_id]
	set cell_name [get_atom_node_info -key NAME -node $atom_id]
	set hcii_name [convert_cell_name_to_hc $cell_name -cell_type $cell_type -use_sdc_format]
	puts "Full name: $cell_name"
	puts "HCII name: $hcii_name"
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot convert the cell name to HCII "<string>".
TCL_ERROR	1   	ERROR: Illegal atom type: "<string>". Specify a legal atom type (use the get_legal_node_types command to get the list).
TCL_ERROR	1   	ERROR: Illegal device family: <string>. The device family currently supported by the command are for Hardcopy families".
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
TCL_ERROR	1   	ERROR: Run Quartus II Placement and Routing (quartus_fit) before accessing <string> information
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</convert_cell_name_to_hc>

<convert_pin_name_to_hc>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: convert_pin_name_to_hc [-h | -help] [-long_help] [-use_sdc_format] <name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -use_sdc_format: Activates SDC format
        <name>: Name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Given the pin name, this function returns the converted Hardcopy II
pin name.

Only the HardCopy II device family is currently supported.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Display the converted Hardcopy II name and full hierarchical
# name for each atom.
project_open chiptrip
read_atom_netlist
foreach_in_collection atom_id [get_atom_nodes -type PIN] {

	puts "\n"
	puts "Atom ID: $atom_id"
	puts "-----------------"

	set cell_type [get_atom_node_info -key TYPE -node $atom_id]
	set cell_name [get_atom_node_info -key NAME -node $atom_id]
	set hcii_name [convert_pin_name_to_hc $cell_name -use_sdc_format]
	puts "Full name: $cell_name"
	puts "HCII name: $hcii_name"
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot convert the pin name to HCII "<string>".
TCL_ERROR	1   	ERROR: Illegal device family: <string>. The device family currently supported by the command are for Hardcopy families".
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
TCL_ERROR	1   	ERROR: Run Quartus II Placement and Routing (quartus_fit) before accessing <string> information
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</convert_pin_name_to_hc>

<convert_net_name_to_hc>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: convert_net_name_to_hc [-h | -help] [-long_help] [-use_sdc_format] <name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -use_sdc_format: Activates SDC format
        <name>: Name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Given the net name, function returns the converted Hardcopy II name.
Only the HardCopy II device family is currently supported. 
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Display the converted Harcopy II name and full hierarchical
# name for each pin
project_open chiptrip
read_atom_netlist
foreach_in_collection atom_id [get_atom_nodes -type PIN] {

	puts "\n"
	puts "Atom ID: $atom_id"
	puts "-----------------"

	set cell_type [get_atom_node_info -key TYPE -node $atom_id]
	set cell_name [get_atom_node_info -key NAME -node $atom_id]
	set hcii_name [convert_net_name_to_hc $cell_name -use_sdc_format]
	puts "Full name: $cell_name"
	puts "HCII name: $hcii_name"
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot convert the pin name to HCII "<string>".
TCL_ERROR	1   	ERROR: Illegal device family: <string>. The device family currently supported by the command are for Hardcopy families".
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
TCL_ERROR	1   	ERROR: Run Quartus II Placement and Routing (quartus_fit) before accessing <string> information
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</convert_net_name_to_hc>

<convert_hc_name_to_fpga_name>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: convert_hc_name_to_fpga_name [-h | -help] [-long_help] <name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <name>: Name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::atoms 1.0 (advanced)

------------
Description:
------------

This is an advanced Quartus II Tcl command.

Given the Hardcopy II encoded cell name for the node, function returns
the FPGA original name.  Only the HardCopy II device family is
currently supported.		
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Display the converted unit name and full hierarchical
# name for each pin
project_open chiptrip
read_atom_netlist
foreach_in_collection atom_id [get_atom_nodes -type PIN] {

	puts "\n"
	puts "Atom ID: $atom_id"
	puts "-----------------"

	set cell_type [get_atom_node_info -key TYPE -node $atom_id]
	set cell_name [get_atom_node_info -key NAME -node $atom_id]
	set hcii_name [convert_cell_name_to_hc $cell_name -cell_type $cell_type -use_sdc_format]
	
	# should get back the original cell name.
	set fpga_name [convert_hc_name_to_fpga_name $hcii_name]
	puts "Full name: $cell_name"
	puts "HCII name: $hcii_name"
	puts "Fpga name: $fpga_name"
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Cannot access <string> data of the encrypted atom node %u. This operation involves an encrypted atom node. Use the BOOL_ENCRYPTED test to avoid such nodes and the error.
TCL_ERROR	1   	ERROR: The specified Hardcopy II node named "<string>" is illegal.
TCL_ERROR	1   	ERROR: Illegal device family: <string>. The device family currently supported by the command are for Hardcopy families".
TCL_ERROR	1   	ERROR: Cannot read atom netlist from persistent database or from the specified source
TCL_ERROR	1   	ERROR: You must run the read_atom_netlist command first to initialize the netlist
TCL_ERROR	1   	ERROR: Run Quartus II Placement and Routing (quartus_fit) before accessing <string> information
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</convert_hc_name_to_fpga_name>

<<<</1.0>>>>
