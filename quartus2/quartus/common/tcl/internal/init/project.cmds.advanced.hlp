<<<<versions>>>>
1.0
2.0
3.0
4.0
5.0
6.0
<<<</versions>>>>
<<<<1.0>>>>
<project_new>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_new [-h | -help] [-long_help] [-cmp <revision_name>] [-device <device>] [-family <family>] [-no_cmp] [-overwrite] [-sim <revision_name>] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -cmp <revision_name>: Revision name to open. Defaults to project name.
        -device <device>: Device name
        -family <family>: Family name
        -no_cmp: Option to indicate that revision is not opened automatically
        -overwrite: Option to overwrite existing project and revision
        -sim <revision_name>: Revision name to open
        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Creates and opens a new project with the specified project name.

If the "-cmp" and "-sim" options are both specified and have 
different names, the "-sim" option is ignored.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create project "chiptrip" and revision "chiptrip"
project_new chiptrip

## Create project "chiptrip" and revision "auto_max"
project_new -revision auto_max chiptrip

## Create project "chiptrip" and revision "chiptrip"
## Overwrite any existing assignment files if they exist
project_new chiptrip -overwrite

## Create project "chiptrip" and revision "chiptrip"
## Set the FAMILY assignment to Stratix
project_new chiptrip -family Stratix

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Specified values of options "-<string>" and "-<string>" differ. Ignored value of "-<string>" option. No action is required.
TCL_ERROR	1   	ERROR: Can't create project: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name using the "-<string>" option.
TCL_ERROR	1   	ERROR: Can't create settings files for project: <string>. Make sure the .psf, .csf, and .ssf files are writeable.
TCL_ERROR	1   	ERROR: Can't open project: <string>
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Project already exists: <string>. Specify a different project name or use the "-overwrite" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_new>

<project_open>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_open [-h | -help] [-long_help] [-cmp <revision_name>] [-no_cmp] [-sim <revision_name>] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -cmp <revision_name>: Revision name to open. Defaults to project name.
        -no_cmp: Option to indicate that revision is not opened automatically
        -sim <revision_name>: Revision name to open
        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Opens an existing project. To open a new project, use the 
"project_new" command.

If the "-cmp" and "-sim" options are both specified and
have different names, the "-sim" option is ignored.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Open project "chiptrip" and revision "chiptrip"
project_open chiptrip

## Open project "chiptrip" and revision "auto_max"
project_open -cmp auto_max chiptrip

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Specified values of options "-<string>" and "-<string>" differ. Ignored value of "-<string>" option. No action is required.
TCL_OK   	0   	WARNING: Project is already open: <string>
TCL_ERROR	1   	ERROR: Can't open project: <string>. First close the currently open project: <string>.
TCL_ERROR	1   	ERROR: Can't open project: <string>
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_open>

<is_project_open>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: is_project_open [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Checks whether a project is currently open. Returns 1, if a 
project is currently open; returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Close the project if open
if [is_project_open] {
   project_close
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</is_project_open>

<project_close>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_close [-h | -help] [-long_help] [-dont_export_assignments]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -dont_export_assignments: Do not export assignments to file
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Closes an open project.

The assignments created or modified during an open project
are committed to the Quartus II Settings File (.qsf) during a 
"project_close", unless you use the "-dont_export_assignments"
option.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Close the project if open
if [is_project_open] {
   project_close
}
## Close the project if open
## and do not export the assignments
if [is_project_open] {
   project_close -dont_export_assignments
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_close>

<project_exists>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_exists [-h | -help] [-long_help] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Checks whether a project exists. Returns 1, if a project exists; 
returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create project if one does not exist.
## Open existing project otherwise.
if [project_exists chiptrip] {
	project_open chiptrip
} else {
	project_new chiptrip
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_exists>

<project_archive>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_archive [-h | -help] [-long_help] [-all_revisions] [-include_libraries] [-include_outputs] [-overwrite] [-use_file_set <file_set>] [-version_compatible_database] <archive_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -all_revisions: Option to archive all revisions
        -include_libraries: Option to include related system libraries
        -include_outputs: Option to include output files in archive
        -overwrite: Option to overwrite any currently existing archive file
        -use_file_set <file_set>: Option to create the archive using the specified file set
        -version_compatible_database: Option to include version-compatible database if supported
        <archive_name>: Archive file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Archives an open project and its related files into a
Quartus II Archive File (.qar).

The description of operations is as follows:

Option        Description
------        -------------------------
use_file_set  

              Creates the archive using the specified
              file set. By default, the 'basic'
              file set is used. For more information
              about file sets, type:

                 quartus_sh --archive -list_file_sets

all_revisions

              Archives all revisions.

overwrite

              Overwrites existing archive file.

include_outputs

              Includes output files in archive.

include_libraries

              Includes related Megafunction and
              IP library files.

version_compatible_database

              Includes version-compatible database
              if supported.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Default mode: Archive current revisions without output files or libraries
project_archive chiptrip.qar

## Archive all revisions without output files or libraries
project_archive chiptrip.qar -all_revisions

## Archive current revision with version-compatible database if supported
project_archive chiptrip.qar -version_compatible_database

## Same as first one, but overwrite any existing archive file
project_archive chiptrip.qar -overwrite

## Include outut files and libraries
project_archive chiptrip.qar -include_outputs -include_libraries

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Error(s) found while archiving the project. See error message(s) for details.
TCL_ERROR	1   	ERROR: Project archive failed. Some files could not be processed. Refer to the Quartus II Archive Log File (<archive_name>.qarlog).
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_archive>

<project_restore>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_restore [-h | -help] [-long_help] [-destination <directory>] [-overwrite] [-update_included_file_info] <archive_file>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -destination <directory>: Directory where restored files are placed
        -overwrite: Option to overwrite files in destination directory
        -update_included_file_info: Option to update included file information
        <archive_file>: Archive file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Restores a Quartus II Archive File (.qar) that contains 
the project and its related files.

By default, the archive is restored into the current
directory. Use the "-destination" option to restore the 
files into a new directory.

By default, the command fails if the archive already 
contains files in the destination directory. Use the 
"-overwrite" option to overwrite any existing files 
in the destination directory.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Restore archive and expand files into current directory
project_restore chiptrip.qar
## or
project_restore chiptrip.qar -destination 

## Restore archive. Expand files into current directory, 
## but overwrite any existing files in "."
project_restore chiptrip.qar -destination . -overwrite

## Restore project into a "restored" subdirectory
project_restore chiptrip.qar -destination "restored" -overwrite

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Error(s) found while restoring the archive. See error message(s) for details.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_restore>

<set_project_settings>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_project_settings [-h | -help] [-long_help] [-cmp <revision_name>] [-sim <revision_name>] [-swb <revision_name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -cmp <revision_name>: Revision name
        -sim <revision_name>: Revision name
        -swb <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Sets the current revision to the value specified by the 
"-cmp", "-sim", or "-swb" option.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Sets the revision to auto_max.qsf
set_project_settings -cmp auto_max

## Sets the revision to auto_max.qsf
set_project_settings -sim auto_max

## Sets the revision to auto_max.qsf
set_project_settings -swb auto_max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name using the "-<string>" option.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_project_settings>

<get_project_settings>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_project_settings [-h | -help] [-long_help] [-cmp] [-sim] [-swb]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -cmp: Revision name
        -sim: Revision name
        -swb: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Returns the name of the current revision regardless of which 
option was specified.
<<<long_help_section>>>

--------------
Example Usage:
--------------

set revision_name [get_project_settings -cmp]
set revision_name [get_project_settings -sim]
set revision_name [get_project_settings -swb]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_project_settings>

<project_settings_exist>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_settings_exist [-h | -help] [-long_help] [-cmp <revision_name>] [-sim <revision_name>] [-swb <revision_name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -cmp <revision_name>: Revision name
        -sim <revision_name>: Revision name
        -swb <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Checks whether the specified revision exists. Returns 1, 
if revision exists; returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Check if auto_max.qsf exists
project_settings_exist -cmp auto_max

## Check if auto_max.qsf exists
project_settings_exist -sim auto_max

## Check if auto_max.qsf exists
project_settings_exist -swb auto_max

## Check if auto_max.qsf exists
project_settings_exist -swb auto_max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_settings_exist>

<get_all_quartus_defaults>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_quartus_defaults [-h | -help] [-long_help] [-name <name>] [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Returns a filtered output collection of all matching default
assignment values. To access each element of the output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads in the default assignments found inside
the Quartus II Default Settings File (.qdf). It filters the 
assignments data found inside the .qdf and outputs the data 
based on the values specified by the "-name" option.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Assignment name>} {<Assignment value>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the default assignments using
## the foreach_in_collection method

set default_asgns_col [get_all_quartus_defaults]
foreach_in_collection default $default_asgns_col {
	set sect_id [lindex $default 0]
	set name [lindex $default 1]
	set value [lindex $default 2]

	## Now, display the content of the assignment
	puts "Section ID ($sect_id)"
	puts "Assignment Name ($name)"
	puts "Assignment Value ($value)"
}

## Using wildcards
set default_asgns_col [get_all_quartus_defaults -name *]
foreach_in_collection default $default_asgns_col {
	set sect_id [lindex $default 0]
	set name [lindex $default 1]
	set value [lindex $default 2]

	## Now, display the content of the assignment
	puts "Section ID ($sect_id)"
	puts "Assignment Name ($name)"
	puts "Assignment Value ($value)"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_quartus_defaults>

<set_parameter>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_parameter [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] -name <name> [-remove] [-to <destination>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable parameter
        -entity <entity_name>: Entity to which to add parameter
        -name <name>: Parameter name
        -remove: Option to remove parameter
        -to <destination>: Destination of parameter
        <value>: Parameter value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Sets or removes the specified parameter name.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

The parameters created or modified by using this Tcl command are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.

Use the "-entity" option to force the parameter to the specified
entity. If the "-entity" option is not specified, the value for 
the FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

A parameter is an attribute of a megafunction, macrofunction,
or certain primitives that determines the logic created or used
to implement the function. The parameter information can be 
used to determine the actual primitives and other subdesigns 
needed to implement the logic of the function.

The following general guidelines apply to parameters:

*  All logic options can be assigned as parameters for individual
   instances of megafunctions or macrofunctions. For a given 
   logic OPTION the precedence for parameters is:

      1) Instance specific logic option settings
      2) Instance specific parameter settings
      3) Project-wide default parameter settings

*  You cannot assign a value to the predefined Altera(R) 
   parameter DEVICE_FAMILY, which represents the device family 
   assigned for the project. However, you can use the parameter 
   value in comparisons.

*  The predefined Altera LPM_PIPELINE and LATENCY parameters 
   can be assigned to an instance of a megafunction or 
   macrofunction. However, the parameter applies only to that 
   instance, and is not inherited by the subdesigns of that 
   instance.

*  All logic options can be assigned as parameters for individual
   megafunctions or macrofunctions. However, logic options cannot 
   be assigned global, project-wide default parameter values.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set project-wide, default WIDTH parameter value
set_parameter -name WIDTH 8

## Set entity-specific SIZE parameter value
## to "my_ram" entity
set_parameter -entity my_ram -name SIZE 16

## Specify the same parameter to my_ram
## but inside "top_level" entity
set_parameter -entity top_level -to my_ram -name SIZE 16

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Removed parameter: <string>
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Parameter does not exist and cannot be removed: <string>. Specify an existing parameter name.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_parameter>

<get_parameter>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_parameter [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name
        -to <destination>: Destination of parameter
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Returns the value of the parameter.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function returns the 
parameter value for the current entity. The value is retrieved 
from the PARAMETERS section of the entity. Otherwise, the 
function returns the project-wide default parameter value
obtained from the DEFAULT_PARAMETERS section.

Use the "-entity" option to retrieve the parameter from the 
specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get project-wide, default parameter value
get_parameter -name WIDTH

## Get entity-specific parameter value
get_parameter -name inst1 -to SIZE

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_parameter>

<get_all_parameters>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_parameters [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name (string pattern is matched using Tcl string matching)
        -to <destination>: Destination of the parameter (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Returns a filtered output collection of all matching parameter 
values. To access each element of this output collection, use 
the Tcl command "foreach_in_collection". To see example usage, 
type "foreach_in_collection -long_help".

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function returns 
the parameter values for the current entity. The values are 
retrieved from the PARAMETERS section of the entity. Otherwise,
the function returns the project-wide default parameter values
obtained from the DEFAULT_PARAMETERS section.

This Tcl command filters the parameter data found in the
Quartus II Settings File (.qsf) and outputs the data based on
the values specified by the "-name" and "-to" options. These
options can take string patterns containing special characters
from the set "*?\[]" as values. The values are matched using
Tcl string matching. Note that bus names are automatically
detected and do not need to be escaped. Bus names have the
following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
get_all_parameters -name * -to a[0]

# To match all indices of bus "a", type:
get_all_parameters -name * -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

get_all_parameters -name * -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

Each element of the collection is a list with the following 
format:
{ {<Destination>} {<Parameter name>} {<Parameter value>} }

Use the "-entity" option to retrieve the parameter values from
the specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Display all project-wide default parameter values
foreach_in_collection parameter [get_all_parameters -name *] {

	set name [lindex $parameter 1]
	set value [lindex $parameter 2]

	## Now, display the content of the parameter
	puts "Parameter Name ($name)"
	puts "Parameter Value ($value)"
}

## Display all entity-specific parameter values
foreach_in_collection parameter [get_all_parameters -name * -to *] {

	set dest [lindex $parameter 0]
	set name [lindex $parameter 1]
	set value [lindex $parameter 2]

	## Now, display the content of the parameter
	puts "Destination ($dest)"
	puts "Parameter Name ($name)"
	puts "Parameter Value ($value)"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_parameters>

<remove_all_parameters>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_parameters [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name (string pattern is matched using Tcl string matching)
        -to <destination>: Destination of the parameter (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Removes all matching parameters.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function removes 
the parameters from the current entity. The parameters are 
removed from the PARAMETERS section of the entity. Otherwise,
the function removes the project-wide default parameters
obtained from the DEFAULT_PARAMETERS section.

This Tcl command filters the parameter data found in the
Quartus II Settings File (.qsf) and removes the data based on
the values specified by the "-name" and "-to" options. These
options can take string patterns containing special characters
from the set "*?\[]" as values. The values are matched using
Tcl string matching. Note that bus names are automatically
detected and do not need to be escaped. Bus names have the
following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
remove_all_parameters -name * -to a[0]

# To match all indices of bus "a", type:
remove_all_parameters -name * -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

remove_all_parameters -name * -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

Use the "-entity" option to remove the parameters from the 
specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.

The parameters removed by using this Tcl command are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## The following 3 examples remove project-wide,
## default parameter values
remove_all_parameters -name WIDTH
remove_all_parameters -name *ID*
remove_all_parameters -name *

## The following 3 examples remove entity-specific
## parameter values
remove_all_parameters -name inst1 -to SIZE
remove_all_parameters -name inst1 -to *IZ*
remove_all_parameters -name inst1 -to *

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> parameter(s) were removed
TCL_OK   	0   	INFO: Removed parameter: <string>
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Parameter does not exist and cannot be removed: <string>. Specify an existing parameter name.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_parameters>

<set_global_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_global_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] -name <name> [-remove] [-section_id <section id>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -entity <entity_name>: Entity to which to add assignment
        -name <name>: Assignment name
        -remove: Option to remove assignment
        -section_id <section id>: Section id
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Sets or removes a global assignment.

Assignments created or modified by using this Tcl command are not
saved to the Quartus II Settings File (.qsf) unless you explicitly
call one of the following two Tcl commands (from the
::quartus::project Tcl package):

1) export_assignments 
2) project_close (unless -dont_export_assignments is specified as an
argument to project_close)

You must save assignment changes before you run Quartus(R) II
command-line executables. Note, however, that the Tcl commands
execute_flow and execute_module (from the ::quartus::flow Tcl
package) call "export_assignments" before they run
command-line executables.

For entity-specific assignments, use the -entity option to force the
assignment to specified entity. If the -entity option is not
specified, the value for the FOCUS_ENTITY_NAME assignment is used. If
the FOCUS_ENTITY_NAME value is not found, the revision name is used.

If the Quartus II Settings File contains a USER_LIBRARIES assignment
and you call set_global_assignment to set a SEARCH_PATH or
USER_LIBRARIES assignment, the existing USER_LIBRARIES assignment
expands into one or more SEARCH_PATH assignments.

Note that values that begin with a dash ("-") should be enclosed in a
backslash followed by a quote. In the following example, -02 is
enclosed by \" at the beginning and the end.

set_global_assignment -name ARM_CPP_COMMAND_LINE \"-O2\"
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify Stratix as the family to use when compiling
set_global_assignment -name FAMILY Stratix

## If the family name has empty spaces, use quotes
set_global_assignment -name FAMILY "Stratix GX"

## or remove any empty space
set_global_assignment -name FAMILY StratixGX

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: File name "<string>" exceeds maximum of <string> characters. Specify a file name with fewer characters.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> cannot be removed -- it has multiple values. Specify one value to remove or use the "<string>" command to remove all values for the assignment.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_global_assignment>

<get_global_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_global_assignment [-h | -help] [-long_help] [-entity <entity_name>] [-front] -name <name> [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -front: Option to return the first assignment if there is more than one assignment found
        -name <name>: Assignment name
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Returns the value of the global assignment.

The "-name" option is not case sensitive.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the value of the FAMILY assignment
get_global_assignment -name FAMILY

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> has multiple values. Use the "<string>" command to get all values or use the "<string> -front" command to get the first value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_global_assignment>

<get_all_global_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_global_assignments [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Returns a filtered output collection of all matching global
assignment values. To access each element of the output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads the global assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignment data in the .qsf and outputs the data based 
on the values given by the "-name" option.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Assignment name>} {<Assignment value>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the registered source files
## using the foreach_in_collection method
set file_asgn_col [get_all_global_assignments -name SOURCE_FILE]
foreach_in_collection file_asgn $file_asgn_col {

    ## Each element in the collection has the following
    ## format: {} {SOURCE_FILE} {<file_name>}
    puts [lindex $file_asgn 2]
}

# Using wildcards
get_all_global_assignments -name SOURCE*

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_global_assignments>

<remove_all_global_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_global_assignments [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Removes all matching global assignments.

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads the global assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignments data found in the .qsf and removes the data
based on the values specified by the "-name" option.

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
remove the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

Assignments removed by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Remove all the registered source files

remove_all_global_assignments -name SOURCE_FILE

# Using wildcards
remove_all_global_assignments -name SOURCE*

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> global assignment(s) were removed
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_global_assignments>

<set_instance_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_instance_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] [-fall] [-from <source>] -name <name> [-remove] [-rise] [-section_id <section id>] [-to <destination>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -entity <entity_name>: Entity to which to add assignment
        -fall: Option applies to falling edge
        -from <source>: Source of assignment
        -name <name>: Assignment name
        -remove: Option to remove assignment
        -rise: Option applies to rising edge
        -section_id <section id>: Section id
        -to <destination>: Destination of assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Sets or removes an instance assignment.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If the "-entity" 
option is not specified, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify a TSU_REQUIREMENT of 2ns from mypin to any register
set_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT 2ns

## Remove the TSU_REQUIREMENT from mypin to all registers
set_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT -remove

## Specify the entity to which the assignment is added, 
## use the -entity option
## This is needed if the top-level entity name is other than
## that of the project name
## The following command generates a top_level entity
set_instance_assignment -from "mypin" -to * -entity top_level -name TSU_REQUIREMENT 2ns

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> cannot be removed -- it has multiple values. Specify one value to remove or use the "<string>" command to remove all values for the assignment.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_instance_assignment>

<get_instance_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_instance_assignment [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] [-front] -name <name> [-section_id <section id>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of assignment
        -front: Option to return the first assignment if there is more than one assignment found
        -name <name>: Assignment name
        -section_id <section id>: Section id
        -to <destination>: Destination of assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Returns the value of the instance assignment.

The "-name" option is not case sensitive.
The "-entity", "-to", and "-from" options are case sensitive.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the TSU_REQUIREMENT from mypin to any register
set value [get_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT]
puts "TSU_REQUIREMENT(mypin->*) = $value"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> has multiple values. Use the "<string>" command to get all values or use the "<string> -front" command to get the first value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_instance_assignment>

<get_all_instance_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_instance_assignments [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] -name <name> [-section_id <section id>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of assignment (string pattern is matched using Tcl string matching)
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -to <destination>: Destination of assignment (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Returns a filtered output collection of all matching instance
assignment values. To access each element of this output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

The "-name" option is not case sensitive.
The "-to" and "-from" options are case sensitive.

These options can take string patterns containing special 
characters from the set "*?\[]" as values. The values are 
matched using Tcl string matching. Note that bus names are
automatically detected and do not need to be escaped. Bus
names have the following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
get_all_instance_assignments -name LOCATION -to a[0]

# To match all indices of bus "a", type:
get_all_instance_assignments -name LOCATION -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

get_all_instance_assignments -name LOCATION -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

This Tcl command reads in the instance assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignments data found in the .qsf and outputs the 
data based on the values specified by the "-name", "-from", 
and "-to" options.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Source>} {<Destination>} {<Assignment name>} {<Assignment value>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the timing requirements
## using the foreach_in_collection method
## Use wildcards to catch TSU_REQUIREMENT, TCO_REQUIREMENT,
## and others
set asgn_col [get_all_instance_assignments -name *_REQUIREMENT]
foreach_in_collection asgn $asgn_col {

    ## Each element in the collection has the following
    ## format: { {} {<Source>} {<Destination>} {<Assignment name>} {<Assignment value>} }
    set from  [lindex $asgn 1]
    set to    [lindex $asgn 2]
    set name  [lindex $asgn 3]
    set value [lindex $asgn 4]
    puts "$name ($from -> $to) = $value"
}

## Print out all the location assignments with
## the destination bus name "timeo".
set bus_name "timeo"
get_all_instance_assignments -name LOCATION -to $bus_name[*]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_instance_assignments>

<remove_all_instance_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_instance_assignments [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] -name <name> [-section_id <section id>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of the assignment (string pattern is matched using Tcl string matching)
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -to <destination>: Destination of the assignment (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Removes all matching instance assignment values.

The "-name" option is not case sensitive.
The "-to" and "-from" options are case sensitive.

These options can take string patterns containing special 
characters from the set "*?\[]" as values. The values are 
matched using Tcl string matching. Note that bus names are
automatically detected and do not need to be escaped. Bus
names have the following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
remove_all_instance_assignments -name LOCATION -to a[0]

# To match all indices of bus "a", type:
remove_all_instance_assignments -name LOCATION -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

remove_all_instance_assignments -name LOCATION -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

This Tcl command reads the instance assignments found in
the Quartus II Settings File (.qsf) and removes this data based 
on the values specified by the "-name", "-from", and "-to"
options.

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
remove the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

Assignments removed by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Remove all the timing requirements
## Use wildcards to catch TSU_REQUIREMENT, TCO_REQUIREMENT,
## and others
remove_all_instance_assignments -name *_REQUIREMENT

## Remove all the location assignments with
## the destination bus name "timeo".
set bus_name "timeo"
remove_all_instance_assignments -name LOCATION -to $bus_name[*]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> instance assignment(s) were removed
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_instance_assignments>

<set_location_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_location_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-remove] -to <destination> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -remove: Option to remove assignment
        -to <destination>: Destination of assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Sets or removes a location assignment.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

set_location_assignment -to dst LOC

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_location_assignment>

<get_location_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_location_assignment [-h | -help] [-long_help] -to <destination>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -to <destination>: Destination of assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Returns the value of a location assignment.

The "-chip" option is not case sensitive.
The "-to" option is case sensitive.
<<<long_help_section>>>

--------------
Example Usage:
--------------

get_location_assignment -to dst		

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_location_assignment>

<export_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: export_assignments [-h | -help] [-long_help] [-cmp <revision_name>] [-sim <revision_name>] [-swb <revision_name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -cmp <revision_name>: Revision name
        -sim <revision_name>: Revision name
        -swb <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Exports assignments to the Quartus II Settings File (.qsf)
for the current revision.

The "-cmp", "-sim", and "-swb" options are ignored and exist 
only for backwards compatibility.

Assignments created or modified during an open project are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## The most common use of export_assignments is to
## call it before doing a system call
## to call a compiler command-line executable
project_open $project_name
set_global_assignment -name FAMILY Stratix

## Before calling quartus_map, 
## write out the FAMILY assignment
export_assignments

## Now, call quartus_map
qexec "[file join $::quartus(binpath) quartus_map] $project_name"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</export_assignments>

<create_base_clock>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_base_clock [-h | -help] [-long_help] [-comment <comment>] [-disable] [-duty_cycle <integer>] [-entity <entity>] -fmax <fmax> [-no_target] [-target <name>] [-virtual] <clock_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -duty_cycle <integer>: Duty cycle
        -entity <entity>: Entity to which to add clock assignment
        -fmax <fmax>: Clock frequency
        -no_target: Option to not assign clock to node
        -target <name>: Clock node name
        -virtual: Option to specify the clock as a virtual clock
        <clock_name>: Clock name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Creates the base clock. The base clock is an absolute clock.

The "-fmax" option can take the format:

<floating point time value><time unit>

For example, if the fmax is 10.55ns, "10.55" is the
<floating point time value> and "ns" is the <time unit>.

The following table displays possible time units:

Time Unit                 Description
---------                 --------------
s                         second(s)
ms                        millisecond(s)
us                        microsecond(s)
ns                        nanosecond(s)
ps                        picosecond(s)
fs                        femtosecond(s)
Hz                        hertz
KHz                       kilohertz
MHz                       megahertz
GHz                       gigahertz

If you specify the "-virtual" option, the base clock
is not assigned to any node in the timing netlist. You cannot
specify the "-virtual" option and the "-target" option 
at the same time.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If you do not specify
the "-entity" option, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Specify a clock named "clk50" with
# a 50ns period
# The command specifies a CLOCK section
# in the active project with the 50ns
# specification, and adds a
# "clk50 : CLOCK_SETTING=clk50" assignment
# to the current entity
create_base_clock -fmax 50ns clk50

# Specify the same clk50 to a pin with
# a different name (myclkpin)
create_base_clock -fmax 50ns -target myclkpin clk50

# Specify the entity name to which the clock
# is added, using the -entity option
# This is needed if the top-level entity name 
# is other than that of the project
# The following command generates a "top_level" entity.
create_base_clock -fmax 50ns -entity top_level clk50

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: The option "-<string>" was ignored because it is no longer supported. No action is required.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Options are mutually exclusive: <string> and <string>. Specify only one of the two options.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_base_clock>

<create_relative_clock>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_relative_clock [-h | -help] [-long_help] -base_clock <Base clock> [-comment <comment>] [-disable] [-divide <integer>] [-duty_cycle <integer>] [-entity <entity>] [-invert] [-multiply <integer>] [-no_target] [-offset <offset>] [-phase_shift <integer>] [-target <name>] [-virtual] <clock_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -base_clock <Base clock>: Base clock name
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -divide <integer>: Base clock division factor
        -duty_cycle <integer>: Duty cycle
        -entity <entity>: Entity to which to add clock assignment
        -invert: Option to invert base clock
        -multiply <integer>: Base clock multiplication factor
        -no_target: Option to not assign clock to node
        -offset <offset>: Offset from base clock
        -phase_shift <integer>: Phase shift from base clock
        -target <name>: Clock node name
        -virtual: Option to specify the clock as a virtual clock
        <clock_name>: Clock name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Creates a relative clock that derived from the absolute clock.

The "-offset" option can take the format:

<floating point time value><time unit>

For example, if the offset is 10.55ns, "10.55" is the
<floating point time value> and "ns" is the <time unit>.

The following table displays possible time units:

Time Unit                 Description
---------                 --------------
s                         second(s)
ms                        millisecond(s)
us                        microsecond(s)
ns                        nanosecond(s)
ps                        picosecond(s)
fs                        femtosecond(s)

The "-phase_shift" option takes an integer that represents
degrees of phase shift from the base clock period. For example, 
if a base clock has a period of 10ns and clk2 is a relative
clock derived from the base clock. A phase shift value of 45
applies a 45 degree phase shift to clk2, producing an offset
of 1.25ns from the base clock. For a given relative clock,
you may specify a phase shift, an offset, or both. If both
are specified, they are additive.

If you specify the "-virtual" option, the relative clock
is not assigned to any node in the timing netlist. You cannot
specify the "-virtual" option and the "-target" option 
at the same time.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If you do not specify
the "-entity" option, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify a base clock of 10ns
create_base_clock -fmax 10ns clk10

## Specify a relative clock with 2/3 the period
create_relative_clock -base_clock clk10 -multiply 2 -divide 3 clk2_3

## Specify a relative clock with a phase shift of 45 degrees
create_relative_clock -base_clock clk10 -phase_shift 45 clk_45
## or, equivalently, with an offset of 1.25ns
create_relative_clock -base_clock clk10 -offset 1.25ns clk_45

## Specify the entity name to which the clock
## is added, using the -entity option
## This is needed if the top-level entity name is 
## other than that of the project
## The following command generates a "top_level" entity
create_relative_clock -base_clock clk10 -entity top_level -multiply 2 -divide 3 clk2_3

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Options are mutually exclusive: <string> and <string>. Specify only one of the two options.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_relative_clock>

<get_clocks>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_clocks [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Returns a list of lists consisting of node name and clock 
setting name. The output has the following format:

{{<node name #1> <clock setting name #1>}
 {<node name #2> <clock setting name #2>}
 ...
 {<node name #N> <clock setting name #N>}}

If <node name> is empty, <clock setting name> was not assigned 
to any node. If <clock setting name> is empty, <node name> 
was assigned to an undefined <clock setting name>.

You can create <clock setting name> using the 
"create_base_clock" or "create_relative_clock" commands. You 
can create node names using the following command:

set_instance_assignment -name CLOCK_SETTINGS -to <clock setting name> <node name>
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Search for all pairs of node names and clock setting names
# and print the information

set clock_lists [get_clocks]

foreach clock_asgn $clock_lists {
     set node_name [lindex $clock_asgn 0]
     set clock_setting_name [lindex $clock_asgn 1]

     if { $node_name == "" } {
          puts "No node uses the clock \"$clock_setting_name\""
     } elseif {$clock_setting_name == ""} {
          puts "The node \"$node_name\" uses an undefined clock setting";
     } else {
          puts "The node \"$node_name\" uses the clock \"$clock_setting_name\""
     }
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_clocks>

<timegroup>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: timegroup [-h | -help] [-long_help] [-add_exception <name>] [-add_member <name>] [-comment <comment>] [-disable] [-get_exceptions] [-get_members] [-overwrite] [-remove] [-remove_exception <name>] [-remove_member <name>] <group_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -add_exception <name>: Tcl list of exception names to add
        -add_member <name>: Tcl list of member names to add
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -get_exceptions: Option to get collection of timegroup exceptions
        -get_members: Option to get collection of timegroup members
        -overwrite: Option to overwrite existing timegroup with the same group name
        -remove: Option to remove timegroup
        -remove_exception <name>: Tcl list of exception names to remove
        -remove_member <name>: Tcl list of member names to remove
        <group_name>: Group name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Adds, removes, gets members of, or gets exceptions to a 
timegroup.

A timegroup is a custom group of registers and pins. You can 
use the "-add_member" option to specify register or pin names 
you want to include in the timegroup. You can use the 
"-add_exception" option to specify names you want to exclude 
from the timegroup.

You can specify the names using wildcards, that is, using "?" 
or "*". For example, to add all registers and pins that start 
with a "b" except those that start with "b|c|" to a particular
timegroup named "group_b", type:

timegroup "group_b" -add_member "b*" -add_exception "b|c|*"

To remove members or exceptions from a timegroup, use the 
"-remove_member" or "-remove_exception" options respectively.

The "-get_members" option returns a collection of members in 
the timegroup. The "-get_exceptions" option returns a collection 
of exceptions to the timegroup. To access each element of the 
collection, use the Tcl command "foreach_in_collection". To see 
example usage, type "timegroup -long_help" or
"foreach_in_collection -long_help".

Specifying registers and pins in terms of a timegroup allows 
you to set timing constraints easily. For example, to make a 
multicycle assignment from nodes "a1" and "a2" to nodes "b1", 
"b2", and "b3", type the following:

timegroup "group_a" -add_member [list "a1" "a2"]
timegroup "group_b" -add_member [list "b1" "b2" "b3"]

set_multicycle_assignment -from "group_a" -to "group_b" 2

This command sets a multicycle assignment from every member of 
"group_a" to every member of "group_b". Quartus(R) II timing 
analysis is optimized to use timegroups in handling timing 
constraints.

To disable timegroup assignments for the entire group,
use the "-disable" option, for example:

timegroup "group_a" -disable

To disable a particular timegroup assignment, use the
"-disable" option with the "-add_member" or "-add_exception"
options, for example:

timegroup "group_a" -add_member "m1" -disable
timegroup "group_a" -add_exception "e1" -disable

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Make timing cut assignment from nodes starting
# with "r" except those starting with "r|s|"
# and except those starting with "r|t|"
# to nodes "t1", "t2", and "t3"
timegroup "tg1" -add_member "r*" -add_exception "r|s|*"
timegroup "tg1" -add_exception "r|t|*"

timegroup "tg2" -add_member [list "t1" "t2" "t3"]

set_timing_cut_assignment -from "group_a" -to "group_b" 2

# Remove the "t1" from a particular timegroup named "tg2"
timegroup "tg2" -remove_member "t1"

# Display the members of a particular timegroup named "tg1"
foreach_in_collection member [timegroup "tg1" -get_members] {

	# Print the name of the member
	puts $member
}

# Display the exceptions to a particular timegroup named "tg1"
foreach_in_collection exception [timegroup "tg1" -get_exceptions] {

	# Print the name of the exception
	puts $exception
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</timegroup>

<set_input_delay>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_input_delay [-h | -help] [-long_help] [-clk_ref <clock>] [-clock_fall] [-comment <comment>] [-disable] [-max] [-min] [-remove] -to <input_pin> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -clk_ref <clock>: Reference clock name
        -clock_fall: Option to specify that delay is relative to falling edge of reference clock
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -max: Option to set maximum delay
        -min: Option to set minimum delay
        -remove: Option to remove input delay requirement
        -to <input_pin>: Input pin name or input timegroup
        <value>: Input delay value after rise of reference clock
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Specifies the required minimum or maximum delay on the input 
pin or input timegroup as specified by the "-to" option. 
The Quartus II(R) timing analysis propagates this delay and 
checks it against the actual delay. For more information 
about timegroups, type "timegroup -h".

If both "-min" and "-max" options are not used, then the
assignment is set for both minimum and maximum delay.

The "-clock_fall" option specifies that the input delay is 
relative to the falling edge of the reference clock. The 
rising edge of the reference clock is the default.

The <value> is the input delay after the rise or fall of the 
reference clock. If you do not specify the "-clk_ref" option, 
all clocks are assumed to be reference clocks by default.

The format of <value> is "<numerical value><time unit>", 
for example, "7.55ns". 

The following table shows the available time units:

Time Unit                  Description
----------------------     ------------------
s                          second(s)
ms                         millisecond(s)
us                         microsecond(s)
ns                         nanosecond(s)
ps                         picosecond(s)
fs                         femtosecond(s)
Hz                         hertz
KHz                        kilohertz
MHz                        megahertz
GHz                        gigahertz

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify the required minimum and maximum input
## delays on the input pin named "ipin" relative to
## the rising edge of the reference clock named "clk1"
set_input_delay 2ns -to "ipin" -clk_ref "clk1"
## Or, equivalently,
set_input_delay 2ns -to "ipin" -clk_ref "clk1" -min -max

## Specify the required minimum input delay on 
## the input pin named "ipin" relative to the
## falling edge of the reference clock named "clk1"
set_input_delay 2ns -to "ipin" -clk_ref "clk1" -min -clock_fall

## Specify the required maximum input delay on
## input pins with names that start with "i"
## except those that start with "ibus"
timegroup "input_pins" -add_member "i*" -add_exception "ibus*"
set_input_delay 2ns -to "input_pins" -max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_input_delay>

<set_output_delay>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_output_delay [-h | -help] [-long_help] [-clk_ref <clock>] [-clock_fall] [-comment <comment>] [-disable] [-max] [-min] [-remove] -to <output_pin> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -clk_ref <clock>: Reference clock name
        -clock_fall: Option to specify that delay is relative to falling edge of reference clock
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -max: Option to set maximum delay
        -min: Option to set minimum delay
        -remove: Option to remove output delay requirement
        -to <output_pin>: Output pin name or output timegroup
        <value>: Delay value after rise of reference clock
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Specifies the required minimum or maximum delay on the output 
pin or output timegroup as specified by the "-to" option. 
The Quartus II(R) timing analysis propagates this delay and 
checks it against the actual delay. For more information 
about timegroups, type "timegroup -h".

If both "-min" and "-max" options are not used, then the
assignment is set for both minimum and maximum delay.

The "-clock_fall" option specifies that the output delay is 
relative to the falling edge of the reference clock. The 
rising edge of the reference clock is the default.

The <value> is the output delay after the rise or fall of the 
reference clock. If you do not specify the "-clk_ref" option, 
all clocks are assumed to be reference clocks by default.

The format of <value> is "<numerical value><time unit>", 
for example, "7.55ns".

The following table displays available time units:

Time Unit                  Description
----------------------     ------------------
s                          second(s)
ms                         millisecond(s)
us                         microsecond(s)
ns                         nanosecond(s)
ps                         picosecond(s)
fs                         femtosecond(s)
Hz                         hertz
KHz                        kilohertz
MHz                        megahertz
GHz                        gigahertz

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify the required minimum and maximum output
## delays on the output pin named "opin" relative to
## the rising edge of the reference clock named "clk1"
set_output_delay 2ns -to "opin" -clk_ref "clk1"
## Or, equivalently,
set_output_delay 2ns -to "opin" -clk_ref "clk1" -min -max

## Specify the required minimum output delay on 
## the output pin named "opin" relative to the
## falling edge of the reference clock named "clk1"
set_output_delay 2ns -to "opin" -clk_ref "clk1" -min -clock_fall

## Specify the required maximum output delay on
## output pins with names that start with "o"
## except those that start with "obus"
timegroup "output_pins" -add_member "o*" -add_exception "obus*"
set_output_delay 2ns -to "output_pins" -max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_output_delay>

<set_multicycle_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_multicycle_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-end] [-from <from_list>] [-hold] [-remove] [-setup] [-start] [-to <to_list>] <path_multiplier>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable multicycle assignment
        -end: Option to indicate that destination clock cycles should be considered for path multiplier
        -from <from_list>: List of clock names, node names, and/or timegroup names that represent start or source points of multicycle path, for example, {node1 node2 ...}
        -hold: Option to indicate that path multiplier is meant for hold
        -remove: Option to remove multicycle assignment
        -setup: Option to indicate that path multiplier is meant for setup
        -start: Option to indicate that source clock cycles must be considered for path multiplier
        -to <to_list>: List of clock names, node names, and/or timegroup names that represent end or destination points of multicycle path, for example, {node1 node2 ...}
        <path_multiplier>: Multicycle path multiplier
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Specifies that the given timing paths have multicycle setup 
or hold delays with the number of cycles specified by the 
"-path_multiplier" option. 

If neither the "-setup" nor "-hold" options are used, the 
"-setup" option is the default option. If neither the "-start" 
nor "-end" options are used, the "-end" option is the default 
option.

You must use either the "-from <from_list>" or "-to <to_list>" 
option.

Note that Quartus(R) II timing analysis is optimized to use
timegroups for timing constraints instead of a list of nodes.
Of the following two methods to make multicycle assignments, 
method (1) is the optimal method.

(1) timegroup "src_group" -add_member "s1"
    timegroup "src_group" -add_member "s2"
    timegroup "src_group" -add_member "s3"
    timegroup "dst_group" -add_member "d1"
    timegroup "dst_group" -add_member "d2"
    set_multicycle_assignment -from "src_group" -to "dst_group"

(2) set_multicycle_assignment -from {s1 s2 s3} -to {d1 d2}

For more information about timegroups, type "timegroup -h".

The meaning of multicycle hold differs between the Quartus II 
software timing analysis and the Synopsys PrimeTime software 
timing analysis. Refer to the online Help of each software for 
more information.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Multicycle "setup" from reg1 and reg2 to any destination points
timegroup "src_group" -add_member reg1
timegroup "src_group" -add_member reg2
set_multicycle_assignment 2 -setup -from "src_group"

## or
timegroup "src_group" -add_member reg1
timegroup "src_group" -add_member reg2
timegroup "dst_group" -add_member *
set_multicycle_assignment 2 -setup -from "src_group" -to "dst_group"

## Source multicycle "setup" to reg1 and reg2 from any source points 
timegroup "dst_group" -add_member reg1
timegroup "dst_group" -add_member reg2
set_multicycle_assignment 2 -setup -start -to "dst_group"

## or
timegroup "dst_group" -add_member reg1
timegroup "dst_group" -add_member reg2
timegroup "src_group" -add_member *
set_multicycle_assignment 2 -setup -start -from "src_group" -to "dst_group"

## Source multicycle "hold" from src1 to dst1 and dst2 and
## from src2 to dst1 and dst2
timegroup "src_group" -add_member src1
timegroup "src_group" -add_member src2
timegroup "dst_group" -add_member dst1
timegroup "dst_group" -add_member dst2
set_multicycle_assignment 2 -hold -from "src_group" -to "dst_group"

## Source multicycle "hold" from registers clocked by clk1
## to registers clocked by clk2
## Timegroups are useful for making assignments to
## more than one node. Timegroups are not necessary 
## for making an assignment from only one clock node  
## to another clock 
set_multicycle_assignment 2 -hold -start -from clk1 -to clk2

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Invalid path multiplier value: <string>.  Specify a positive integer value.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_multicycle_assignment>

<set_timing_cut_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_timing_cut_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-from <from_pin_list>] [-remove] [-to <to_pin_list>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -from <from_pin_list>: List of start or source node names and/or timegroup names for timing path, for example, {node1 node2 ...}
        -remove: Option to remove timing cut assignment
        -to <to_pin_list>: List of end node names and/or timegroup names for timing path, for example, {node1 node2 ...}
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 1.0

------------
Description:
------------

Specifies that the timing paths that start from the designated 
<from_pin_list> and end in the designated <to_pin_list> are 
false paths.

Nodes for the <from_pin_list> can be input pins, internal nodes, 
clock pins, or timegroups. Nodes for the <to_pin_list> can be
output pins, internal nodes, clock pins, or timegroups.

You must use either the "-from <from_pin_list>" or the 
"-to <to_pin_list>" option.

Note that Quartus(R) II timing analysis is optimized to use
timegroups for timing constraints instead of a list of nodes.
Of the following two methods to make timing cut assignments, 
method (1) is the optimal method.

(1) timegroup "src_group" -add_member "s1"
    timegroup "src_group" -add_member "s2"
    timegroup "src_group" -add_member "s3"
    timegroup "dst_group" -add_member "d1"
    timegroup "dst_group" -add_member "d2"
    set_timing_cut_assignment -from "src_group" -to "dst_group"

(2) set_timing_cut_assignment -from {s1 s2 s3} -to {d1 d2}

For more information about timegroups, type "timegroup -h".

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set timing cut from any source points to dst1 and dst2
timegroup "dst_group" -add_member dst1
timegroup "dst_group" -add_member dst2
set_timing_cut_assignment -to "dst_group"

## or
timegroup "src_group" -add_member *
timegroup "dst_group" -add_member dst1
timegroup "dst_group" -add_member dst2
set_timing_cut_assignment -from "src_group" -to "dst_group"

## Set timing cut from src1 and src2 to any end points
timegroup "src_group" -add_member src1
timegroup "src_group" -add_member src2
set_timing_cut_assignment -from "src_group"

## or
timegroup "src_group" -add_member src1
timegroup "src_group" -add_member src2
timegroup "dst_group" -add_member *
set_timing_cut_assignment -from "src_group" -to "dst_group"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_timing_cut_assignment>

<<<</1.0>>>>
<<<<2.0>>>>
<is_project_open>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: is_project_open [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Checks whether a project is currently open. Returns 1, if a 
project is currently open; returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Close the project if open
if [is_project_open] {
   project_close
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</is_project_open>

<project_close>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_close [-h | -help] [-long_help] [-dont_export_assignments]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -dont_export_assignments: Do not export assignments to file
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Closes an open project.

The assignments created or modified during an open project
are committed to the Quartus II Settings File (.qsf) during a 
"project_close", unless you use the "-dont_export_assignments"
option.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Close the project if open
if [is_project_open] {
   project_close
}
## Close the project if open
## and do not export the assignments
if [is_project_open] {
   project_close -dont_export_assignments
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_close>

<project_exists>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_exists [-h | -help] [-long_help] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Checks whether a project exists. Returns 1, if a project exists; 
returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create project if one does not exist.
## Open existing project otherwise.
if [project_exists chiptrip] {
	project_open chiptrip
} else {
	project_new chiptrip
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_exists>

<project_archive>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_archive [-h | -help] [-long_help] [-all_revisions] [-include_libraries] [-include_outputs] [-overwrite] [-use_file_set <file_set>] [-version_compatible_database] <archive_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -all_revisions: Option to archive all revisions
        -include_libraries: Option to include related system libraries
        -include_outputs: Option to include output files in archive
        -overwrite: Option to overwrite any currently existing archive file
        -use_file_set <file_set>: Option to create the archive using the specified file set
        -version_compatible_database: Option to include version-compatible database if supported
        <archive_name>: Archive file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Archives an open project and its related files into a
Quartus II Archive File (.qar).

The description of operations is as follows:

Option        Description
------        -------------------------
use_file_set  

              Creates the archive using the specified
              file set. By default, the 'basic'
              file set is used. For more information
              about file sets, type:

                 quartus_sh --archive -list_file_sets

all_revisions

              Archives all revisions.

overwrite

              Overwrites existing archive file.

include_outputs

              Includes output files in archive.

include_libraries

              Includes related Megafunction and
              IP library files.

version_compatible_database

              Includes version-compatible database
              if supported.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Default mode: Archive current revisions without output files or libraries
project_archive chiptrip.qar

## Archive all revisions without output files or libraries
project_archive chiptrip.qar -all_revisions

## Archive current revision with version-compatible database if supported
project_archive chiptrip.qar -version_compatible_database

## Same as first one, but overwrite any existing archive file
project_archive chiptrip.qar -overwrite

## Include outut files and libraries
project_archive chiptrip.qar -include_outputs -include_libraries

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Error(s) found while archiving the project. See error message(s) for details.
TCL_ERROR	1   	ERROR: Project archive failed. Some files could not be processed. Refer to the Quartus II Archive Log File (<archive_name>.qarlog).
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_archive>

<project_restore>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_restore [-h | -help] [-long_help] [-destination <directory>] [-overwrite] [-update_included_file_info] <archive_file>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -destination <directory>: Directory where restored files are placed
        -overwrite: Option to overwrite files in destination directory
        -update_included_file_info: Option to update included file information
        <archive_file>: Archive file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Restores a Quartus II Archive File (.qar) that contains 
the project and its related files.

By default, the archive is restored into the current
directory. Use the "-destination" option to restore the 
files into a new directory.

By default, the command fails if the archive already 
contains files in the destination directory. Use the 
"-overwrite" option to overwrite any existing files 
in the destination directory.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Restore archive and expand files into current directory
project_restore chiptrip.qar
## or
project_restore chiptrip.qar -destination 

## Restore archive. Expand files into current directory, 
## but overwrite any existing files in "."
project_restore chiptrip.qar -destination . -overwrite

## Restore project into a "restored" subdirectory
project_restore chiptrip.qar -destination "restored" -overwrite

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Error(s) found while restoring the archive. See error message(s) for details.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_restore>

<get_all_quartus_defaults>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_quartus_defaults [-h | -help] [-long_help] [-name <name>] [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns a filtered output collection of all matching default
assignment values. To access each element of the output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads in the default assignments found inside
the Quartus II Default Settings File (.qdf). It filters the 
assignments data found inside the .qdf and outputs the data 
based on the values specified by the "-name" option.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Assignment name>} {<Assignment value>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the default assignments using
## the foreach_in_collection method

set default_asgns_col [get_all_quartus_defaults]
foreach_in_collection default $default_asgns_col {
	set sect_id [lindex $default 0]
	set name [lindex $default 1]
	set value [lindex $default 2]

	## Now, display the content of the assignment
	puts "Section ID ($sect_id)"
	puts "Assignment Name ($name)"
	puts "Assignment Value ($value)"
}

## Using wildcards
set default_asgns_col [get_all_quartus_defaults -name *]
foreach_in_collection default $default_asgns_col {
	set sect_id [lindex $default 0]
	set name [lindex $default 1]
	set value [lindex $default 2]

	## Now, display the content of the assignment
	puts "Section ID ($sect_id)"
	puts "Assignment Name ($name)"
	puts "Assignment Value ($value)"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_quartus_defaults>

<set_parameter>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_parameter [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] -name <name> [-remove] [-to <destination>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable parameter
        -entity <entity_name>: Entity to which to add parameter
        -name <name>: Parameter name
        -remove: Option to remove parameter
        -to <destination>: Destination of parameter
        <value>: Parameter value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Sets or removes the specified parameter name.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

The parameters created or modified by using this Tcl command are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.

Use the "-entity" option to force the parameter to the specified
entity. If the "-entity" option is not specified, the value for 
the FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

A parameter is an attribute of a megafunction, macrofunction,
or certain primitives that determines the logic created or used
to implement the function. The parameter information can be 
used to determine the actual primitives and other subdesigns 
needed to implement the logic of the function.

The following general guidelines apply to parameters:

*  All logic options can be assigned as parameters for individual
   instances of megafunctions or macrofunctions. For a given 
   logic OPTION the precedence for parameters is:

      1) Instance specific logic option settings
      2) Instance specific parameter settings
      3) Project-wide default parameter settings

*  You cannot assign a value to the predefined Altera(R) 
   parameter DEVICE_FAMILY, which represents the device family 
   assigned for the project. However, you can use the parameter 
   value in comparisons.

*  The predefined Altera LPM_PIPELINE and LATENCY parameters 
   can be assigned to an instance of a megafunction or 
   macrofunction. However, the parameter applies only to that 
   instance, and is not inherited by the subdesigns of that 
   instance.

*  All logic options can be assigned as parameters for individual
   megafunctions or macrofunctions. However, logic options cannot 
   be assigned global, project-wide default parameter values.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set project-wide, default WIDTH parameter value
set_parameter -name WIDTH 8

## Set entity-specific SIZE parameter value
## to "my_ram" entity
set_parameter -entity my_ram -name SIZE 16

## Specify the same parameter to my_ram
## but inside "top_level" entity
set_parameter -entity top_level -to my_ram -name SIZE 16

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Removed parameter: <string>
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Parameter does not exist and cannot be removed: <string>. Specify an existing parameter name.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_parameter>

<get_parameter>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_parameter [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name
        -to <destination>: Destination of parameter
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns the value of the parameter.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function returns the 
parameter value for the current entity. The value is retrieved 
from the PARAMETERS section of the entity. Otherwise, the 
function returns the project-wide default parameter value
obtained from the DEFAULT_PARAMETERS section.

Use the "-entity" option to retrieve the parameter from the 
specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get project-wide, default parameter value
get_parameter -name WIDTH

## Get entity-specific parameter value
get_parameter -name inst1 -to SIZE

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_parameter>

<get_all_parameters>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_parameters [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name (string pattern is matched using Tcl string matching)
        -to <destination>: Destination of the parameter (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns a filtered output collection of all matching parameter 
values. To access each element of this output collection, use 
the Tcl command "foreach_in_collection". To see example usage, 
type "foreach_in_collection -long_help".

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function returns 
the parameter values for the current entity. The values are 
retrieved from the PARAMETERS section of the entity. Otherwise,
the function returns the project-wide default parameter values
obtained from the DEFAULT_PARAMETERS section.

This Tcl command filters the parameter data found in the
Quartus II Settings File (.qsf) and outputs the data based on
the values specified by the "-name" and "-to" options. These
options can take string patterns containing special characters
from the set "*?\[]" as values. The values are matched using
Tcl string matching. Note that bus names are automatically
detected and do not need to be escaped. Bus names have the
following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
get_all_parameters -name * -to a[0]

# To match all indices of bus "a", type:
get_all_parameters -name * -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

get_all_parameters -name * -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

Each element of the collection is a list with the following 
format:
{ {<Destination>} {<Parameter name>} {<Parameter value>} }

Use the "-entity" option to retrieve the parameter values from
the specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Display all project-wide default parameter values
foreach_in_collection parameter [get_all_parameters -name *] {

	set name [lindex $parameter 1]
	set value [lindex $parameter 2]

	## Now, display the content of the parameter
	puts "Parameter Name ($name)"
	puts "Parameter Value ($value)"
}

## Display all entity-specific parameter values
foreach_in_collection parameter [get_all_parameters -name * -to *] {

	set dest [lindex $parameter 0]
	set name [lindex $parameter 1]
	set value [lindex $parameter 2]

	## Now, display the content of the parameter
	puts "Destination ($dest)"
	puts "Parameter Name ($name)"
	puts "Parameter Value ($value)"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_parameters>

<remove_all_parameters>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_parameters [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name (string pattern is matched using Tcl string matching)
        -to <destination>: Destination of the parameter (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Removes all matching parameters.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function removes 
the parameters from the current entity. The parameters are 
removed from the PARAMETERS section of the entity. Otherwise,
the function removes the project-wide default parameters
obtained from the DEFAULT_PARAMETERS section.

This Tcl command filters the parameter data found in the
Quartus II Settings File (.qsf) and removes the data based on
the values specified by the "-name" and "-to" options. These
options can take string patterns containing special characters
from the set "*?\[]" as values. The values are matched using
Tcl string matching. Note that bus names are automatically
detected and do not need to be escaped. Bus names have the
following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
remove_all_parameters -name * -to a[0]

# To match all indices of bus "a", type:
remove_all_parameters -name * -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

remove_all_parameters -name * -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

Use the "-entity" option to remove the parameters from the 
specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.

The parameters removed by using this Tcl command are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## The following 3 examples remove project-wide,
## default parameter values
remove_all_parameters -name WIDTH
remove_all_parameters -name *ID*
remove_all_parameters -name *

## The following 3 examples remove entity-specific
## parameter values
remove_all_parameters -name inst1 -to SIZE
remove_all_parameters -name inst1 -to *IZ*
remove_all_parameters -name inst1 -to *

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> parameter(s) were removed
TCL_OK   	0   	INFO: Removed parameter: <string>
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Parameter does not exist and cannot be removed: <string>. Specify an existing parameter name.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_parameters>

<set_global_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_global_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] -name <name> [-remove] [-section_id <section id>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -entity <entity_name>: Entity to which to add assignment
        -name <name>: Assignment name
        -remove: Option to remove assignment
        -section_id <section id>: Section id
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Sets or removes a global assignment.

Assignments created or modified by using this Tcl command are not
saved to the Quartus II Settings File (.qsf) unless you explicitly
call one of the following two Tcl commands (from the
::quartus::project Tcl package):

1) export_assignments 
2) project_close (unless -dont_export_assignments is specified as an
argument to project_close)

You must save assignment changes before you run Quartus(R) II
command-line executables. Note, however, that the Tcl commands
execute_flow and execute_module (from the ::quartus::flow Tcl
package) call "export_assignments" before they run
command-line executables.

For entity-specific assignments, use the -entity option to force the
assignment to specified entity. If the -entity option is not
specified, the value for the FOCUS_ENTITY_NAME assignment is used. If
the FOCUS_ENTITY_NAME value is not found, the revision name is used.

If the Quartus II Settings File contains a USER_LIBRARIES assignment
and you call set_global_assignment to set a SEARCH_PATH or
USER_LIBRARIES assignment, the existing USER_LIBRARIES assignment
expands into one or more SEARCH_PATH assignments.

Note that values that begin with a dash ("-") should be enclosed in a
backslash followed by a quote. In the following example, -02 is
enclosed by \" at the beginning and the end.

set_global_assignment -name ARM_CPP_COMMAND_LINE \"-O2\"
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify Stratix as the family to use when compiling
set_global_assignment -name FAMILY Stratix

## If the family name has empty spaces, use quotes
set_global_assignment -name FAMILY "Stratix GX"

## or remove any empty space
set_global_assignment -name FAMILY StratixGX

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: File name "<string>" exceeds maximum of <string> characters. Specify a file name with fewer characters.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> cannot be removed -- it has multiple values. Specify one value to remove or use the "<string>" command to remove all values for the assignment.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_global_assignment>

<get_global_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_global_assignment [-h | -help] [-long_help] [-entity <entity_name>] [-front] -name <name> [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -front: Option to return the first assignment if there is more than one assignment found
        -name <name>: Assignment name
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns the value of the global assignment.

The "-name" option is not case sensitive.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the value of the FAMILY assignment
get_global_assignment -name FAMILY

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> has multiple values. Use the "<string>" command to get all values or use the "<string> -front" command to get the first value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_global_assignment>

<get_all_global_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_global_assignments [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns a filtered output collection of all matching global
assignment values. To access each element of the output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads the global assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignment data in the .qsf and outputs the data based 
on the values given by the "-name" option.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Assignment name>} {<Assignment value>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the registered source files
## using the foreach_in_collection method
set file_asgn_col [get_all_global_assignments -name SOURCE_FILE]
foreach_in_collection file_asgn $file_asgn_col {

    ## Each element in the collection has the following
    ## format: {} {SOURCE_FILE} {<file_name>}
    puts [lindex $file_asgn 2]
}

# Using wildcards
get_all_global_assignments -name SOURCE*

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_global_assignments>

<remove_all_global_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_global_assignments [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Removes all matching global assignments.

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads the global assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignments data found in the .qsf and removes the data
based on the values specified by the "-name" option.

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
remove the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

Assignments removed by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Remove all the registered source files

remove_all_global_assignments -name SOURCE_FILE

# Using wildcards
remove_all_global_assignments -name SOURCE*

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> global assignment(s) were removed
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_global_assignments>

<set_instance_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_instance_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] [-fall] [-from <source>] -name <name> [-remove] [-rise] [-section_id <section id>] [-to <destination>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -entity <entity_name>: Entity to which to add assignment
        -fall: Option applies to falling edge
        -from <source>: Source of assignment
        -name <name>: Assignment name
        -remove: Option to remove assignment
        -rise: Option applies to rising edge
        -section_id <section id>: Section id
        -to <destination>: Destination of assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Sets or removes an instance assignment.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If the "-entity" 
option is not specified, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify a TSU_REQUIREMENT of 2ns from mypin to any register
set_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT 2ns

## Remove the TSU_REQUIREMENT from mypin to all registers
set_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT -remove

## Specify the entity to which the assignment is added, 
## use the -entity option
## This is needed if the top-level entity name is other than
## that of the project name
## The following command generates a top_level entity
set_instance_assignment -from "mypin" -to * -entity top_level -name TSU_REQUIREMENT 2ns

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> cannot be removed -- it has multiple values. Specify one value to remove or use the "<string>" command to remove all values for the assignment.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_instance_assignment>

<get_instance_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_instance_assignment [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] [-front] -name <name> [-section_id <section id>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of assignment
        -front: Option to return the first assignment if there is more than one assignment found
        -name <name>: Assignment name
        -section_id <section id>: Section id
        -to <destination>: Destination of assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns the value of the instance assignment.

The "-name" option is not case sensitive.
The "-entity", "-to", and "-from" options are case sensitive.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the TSU_REQUIREMENT from mypin to any register
set value [get_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT]
puts "TSU_REQUIREMENT(mypin->*) = $value"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> has multiple values. Use the "<string>" command to get all values or use the "<string> -front" command to get the first value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_instance_assignment>

<get_all_instance_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_instance_assignments [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] -name <name> [-section_id <section id>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of assignment (string pattern is matched using Tcl string matching)
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -to <destination>: Destination of assignment (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns a filtered output collection of all matching instance
assignment values. To access each element of this output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

The "-name" option is not case sensitive.
The "-to" and "-from" options are case sensitive.

These options can take string patterns containing special 
characters from the set "*?\[]" as values. The values are 
matched using Tcl string matching. Note that bus names are
automatically detected and do not need to be escaped. Bus
names have the following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
get_all_instance_assignments -name LOCATION -to a[0]

# To match all indices of bus "a", type:
get_all_instance_assignments -name LOCATION -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

get_all_instance_assignments -name LOCATION -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

This Tcl command reads in the instance assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignments data found in the .qsf and outputs the 
data based on the values specified by the "-name", "-from", 
and "-to" options.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Source>} {<Destination>} {<Assignment name>} {<Assignment value>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the timing requirements
## using the foreach_in_collection method
## Use wildcards to catch TSU_REQUIREMENT, TCO_REQUIREMENT,
## and others
set asgn_col [get_all_instance_assignments -name *_REQUIREMENT]
foreach_in_collection asgn $asgn_col {

    ## Each element in the collection has the following
    ## format: { {} {<Source>} {<Destination>} {<Assignment name>} {<Assignment value>} }
    set from  [lindex $asgn 1]
    set to    [lindex $asgn 2]
    set name  [lindex $asgn 3]
    set value [lindex $asgn 4]
    puts "$name ($from -> $to) = $value"
}

## Print out all the location assignments with
## the destination bus name "timeo".
set bus_name "timeo"
get_all_instance_assignments -name LOCATION -to $bus_name[*]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_instance_assignments>

<remove_all_instance_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_instance_assignments [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] -name <name> [-section_id <section id>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of the assignment (string pattern is matched using Tcl string matching)
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -to <destination>: Destination of the assignment (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Removes all matching instance assignment values.

The "-name" option is not case sensitive.
The "-to" and "-from" options are case sensitive.

These options can take string patterns containing special 
characters from the set "*?\[]" as values. The values are 
matched using Tcl string matching. Note that bus names are
automatically detected and do not need to be escaped. Bus
names have the following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
remove_all_instance_assignments -name LOCATION -to a[0]

# To match all indices of bus "a", type:
remove_all_instance_assignments -name LOCATION -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

remove_all_instance_assignments -name LOCATION -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

This Tcl command reads the instance assignments found in
the Quartus II Settings File (.qsf) and removes this data based 
on the values specified by the "-name", "-from", and "-to"
options.

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
remove the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

Assignments removed by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Remove all the timing requirements
## Use wildcards to catch TSU_REQUIREMENT, TCO_REQUIREMENT,
## and others
remove_all_instance_assignments -name *_REQUIREMENT

## Remove all the location assignments with
## the destination bus name "timeo".
set bus_name "timeo"
remove_all_instance_assignments -name LOCATION -to $bus_name[*]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> instance assignment(s) were removed
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_instance_assignments>

<set_location_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_location_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-remove] -to <destination> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -remove: Option to remove assignment
        -to <destination>: Destination of assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Sets or removes a location assignment.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

set_location_assignment -to dst LOC

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_location_assignment>

<get_location_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_location_assignment [-h | -help] [-long_help] -to <destination>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -to <destination>: Destination of assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns the value of a location assignment.

The "-chip" option is not case sensitive.
The "-to" option is case sensitive.
<<<long_help_section>>>

--------------
Example Usage:
--------------

get_location_assignment -to dst		

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_location_assignment>

<create_base_clock>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_base_clock [-h | -help] [-long_help] [-comment <comment>] [-disable] [-duty_cycle <integer>] [-entity <entity>] -fmax <fmax> [-no_target] [-target <name>] [-virtual] <clock_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -duty_cycle <integer>: Duty cycle
        -entity <entity>: Entity to which to add clock assignment
        -fmax <fmax>: Clock frequency
        -no_target: Option to not assign clock to node
        -target <name>: Clock node name
        -virtual: Option to specify the clock as a virtual clock
        <clock_name>: Clock name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Creates the base clock. The base clock is an absolute clock.

The "-fmax" option can take the format:

<floating point time value><time unit>

For example, if the fmax is 10.55ns, "10.55" is the
<floating point time value> and "ns" is the <time unit>.

The following table displays possible time units:

Time Unit                 Description
---------                 --------------
s                         second(s)
ms                        millisecond(s)
us                        microsecond(s)
ns                        nanosecond(s)
ps                        picosecond(s)
fs                        femtosecond(s)
Hz                        hertz
KHz                       kilohertz
MHz                       megahertz
GHz                       gigahertz

If you specify the "-virtual" option, the base clock
is not assigned to any node in the timing netlist. You cannot
specify the "-virtual" option and the "-target" option 
at the same time.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If you do not specify
the "-entity" option, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Specify a clock named "clk50" with
# a 50ns period
# The command specifies a CLOCK section
# in the active project with the 50ns
# specification, and adds a
# "clk50 : CLOCK_SETTING=clk50" assignment
# to the current entity
create_base_clock -fmax 50ns clk50

# Specify the same clk50 to a pin with
# a different name (myclkpin)
create_base_clock -fmax 50ns -target myclkpin clk50

# Specify the entity name to which the clock
# is added, using the -entity option
# This is needed if the top-level entity name 
# is other than that of the project
# The following command generates a "top_level" entity.
create_base_clock -fmax 50ns -entity top_level clk50

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: The option "-<string>" was ignored because it is no longer supported. No action is required.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Options are mutually exclusive: <string> and <string>. Specify only one of the two options.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_base_clock>

<create_relative_clock>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_relative_clock [-h | -help] [-long_help] -base_clock <Base clock> [-comment <comment>] [-disable] [-divide <integer>] [-duty_cycle <integer>] [-entity <entity>] [-invert] [-multiply <integer>] [-no_target] [-offset <offset>] [-phase_shift <integer>] [-target <name>] [-virtual] <clock_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -base_clock <Base clock>: Base clock name
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -divide <integer>: Base clock division factor
        -duty_cycle <integer>: Duty cycle
        -entity <entity>: Entity to which to add clock assignment
        -invert: Option to invert base clock
        -multiply <integer>: Base clock multiplication factor
        -no_target: Option to not assign clock to node
        -offset <offset>: Offset from base clock
        -phase_shift <integer>: Phase shift from base clock
        -target <name>: Clock node name
        -virtual: Option to specify the clock as a virtual clock
        <clock_name>: Clock name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Creates a relative clock that derived from the absolute clock.

The "-offset" option can take the format:

<floating point time value><time unit>

For example, if the offset is 10.55ns, "10.55" is the
<floating point time value> and "ns" is the <time unit>.

The following table displays possible time units:

Time Unit                 Description
---------                 --------------
s                         second(s)
ms                        millisecond(s)
us                        microsecond(s)
ns                        nanosecond(s)
ps                        picosecond(s)
fs                        femtosecond(s)

The "-phase_shift" option takes an integer that represents
degrees of phase shift from the base clock period. For example, 
if a base clock has a period of 10ns and clk2 is a relative
clock derived from the base clock. A phase shift value of 45
applies a 45 degree phase shift to clk2, producing an offset
of 1.25ns from the base clock. For a given relative clock,
you may specify a phase shift, an offset, or both. If both
are specified, they are additive.

If you specify the "-virtual" option, the relative clock
is not assigned to any node in the timing netlist. You cannot
specify the "-virtual" option and the "-target" option 
at the same time.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If you do not specify
the "-entity" option, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify a base clock of 10ns
create_base_clock -fmax 10ns clk10

## Specify a relative clock with 2/3 the period
create_relative_clock -base_clock clk10 -multiply 2 -divide 3 clk2_3

## Specify a relative clock with a phase shift of 45 degrees
create_relative_clock -base_clock clk10 -phase_shift 45 clk_45
## or, equivalently, with an offset of 1.25ns
create_relative_clock -base_clock clk10 -offset 1.25ns clk_45

## Specify the entity name to which the clock
## is added, using the -entity option
## This is needed if the top-level entity name is 
## other than that of the project
## The following command generates a "top_level" entity
create_relative_clock -base_clock clk10 -entity top_level -multiply 2 -divide 3 clk2_3

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Options are mutually exclusive: <string> and <string>. Specify only one of the two options.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_relative_clock>

<get_clocks>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_clocks [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns a list of lists consisting of node name and clock 
setting name. The output has the following format:

{{<node name #1> <clock setting name #1>}
 {<node name #2> <clock setting name #2>}
 ...
 {<node name #N> <clock setting name #N>}}

If <node name> is empty, <clock setting name> was not assigned 
to any node. If <clock setting name> is empty, <node name> 
was assigned to an undefined <clock setting name>.

You can create <clock setting name> using the 
"create_base_clock" or "create_relative_clock" commands. You 
can create node names using the following command:

set_instance_assignment -name CLOCK_SETTINGS -to <clock setting name> <node name>
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Search for all pairs of node names and clock setting names
# and print the information

set clock_lists [get_clocks]

foreach clock_asgn $clock_lists {
     set node_name [lindex $clock_asgn 0]
     set clock_setting_name [lindex $clock_asgn 1]

     if { $node_name == "" } {
          puts "No node uses the clock \"$clock_setting_name\""
     } elseif {$clock_setting_name == ""} {
          puts "The node \"$node_name\" uses an undefined clock setting";
     } else {
          puts "The node \"$node_name\" uses the clock \"$clock_setting_name\""
     }
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_clocks>

<timegroup>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: timegroup [-h | -help] [-long_help] [-add_exception <name>] [-add_member <name>] [-comment <comment>] [-disable] [-get_exceptions] [-get_members] [-overwrite] [-remove] [-remove_exception <name>] [-remove_member <name>] <group_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -add_exception <name>: Tcl list of exception names to add
        -add_member <name>: Tcl list of member names to add
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -get_exceptions: Option to get collection of timegroup exceptions
        -get_members: Option to get collection of timegroup members
        -overwrite: Option to overwrite existing timegroup with the same group name
        -remove: Option to remove timegroup
        -remove_exception <name>: Tcl list of exception names to remove
        -remove_member <name>: Tcl list of member names to remove
        <group_name>: Group name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Adds, removes, gets members of, or gets exceptions to a 
timegroup.

A timegroup is a custom group of registers and pins. You can 
use the "-add_member" option to specify register or pin names 
you want to include in the timegroup. You can use the 
"-add_exception" option to specify names you want to exclude 
from the timegroup.

You can specify the names using wildcards, that is, using "?" 
or "*". For example, to add all registers and pins that start 
with a "b" except those that start with "b|c|" to a particular
timegroup named "group_b", type:

timegroup "group_b" -add_member "b*" -add_exception "b|c|*"

To remove members or exceptions from a timegroup, use the 
"-remove_member" or "-remove_exception" options respectively.

The "-get_members" option returns a collection of members in 
the timegroup. The "-get_exceptions" option returns a collection 
of exceptions to the timegroup. To access each element of the 
collection, use the Tcl command "foreach_in_collection". To see 
example usage, type "timegroup -long_help" or
"foreach_in_collection -long_help".

Specifying registers and pins in terms of a timegroup allows 
you to set timing constraints easily. For example, to make a 
multicycle assignment from nodes "a1" and "a2" to nodes "b1", 
"b2", and "b3", type the following:

timegroup "group_a" -add_member [list "a1" "a2"]
timegroup "group_b" -add_member [list "b1" "b2" "b3"]

set_multicycle_assignment -from "group_a" -to "group_b" 2

This command sets a multicycle assignment from every member of 
"group_a" to every member of "group_b". Quartus(R) II timing 
analysis is optimized to use timegroups in handling timing 
constraints.

To disable timegroup assignments for the entire group,
use the "-disable" option, for example:

timegroup "group_a" -disable

To disable a particular timegroup assignment, use the
"-disable" option with the "-add_member" or "-add_exception"
options, for example:

timegroup "group_a" -add_member "m1" -disable
timegroup "group_a" -add_exception "e1" -disable

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Make timing cut assignment from nodes starting
# with "r" except those starting with "r|s|"
# and except those starting with "r|t|"
# to nodes "t1", "t2", and "t3"
timegroup "tg1" -add_member "r*" -add_exception "r|s|*"
timegroup "tg1" -add_exception "r|t|*"

timegroup "tg2" -add_member [list "t1" "t2" "t3"]

set_timing_cut_assignment -from "group_a" -to "group_b" 2

# Remove the "t1" from a particular timegroup named "tg2"
timegroup "tg2" -remove_member "t1"

# Display the members of a particular timegroup named "tg1"
foreach_in_collection member [timegroup "tg1" -get_members] {

	# Print the name of the member
	puts $member
}

# Display the exceptions to a particular timegroup named "tg1"
foreach_in_collection exception [timegroup "tg1" -get_exceptions] {

	# Print the name of the exception
	puts $exception
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</timegroup>

<set_input_delay>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_input_delay [-h | -help] [-long_help] [-clk_ref <clock>] [-clock_fall] [-comment <comment>] [-disable] [-max] [-min] [-remove] -to <input_pin> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -clk_ref <clock>: Reference clock name
        -clock_fall: Option to specify that delay is relative to falling edge of reference clock
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -max: Option to set maximum delay
        -min: Option to set minimum delay
        -remove: Option to remove input delay requirement
        -to <input_pin>: Input pin name or input timegroup
        <value>: Input delay value after rise of reference clock
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Specifies the required minimum or maximum delay on the input 
pin or input timegroup as specified by the "-to" option. 
The Quartus II(R) timing analysis propagates this delay and 
checks it against the actual delay. For more information 
about timegroups, type "timegroup -h".

If both "-min" and "-max" options are not used, then the
assignment is set for both minimum and maximum delay.

The "-clock_fall" option specifies that the input delay is 
relative to the falling edge of the reference clock. The 
rising edge of the reference clock is the default.

The <value> is the input delay after the rise or fall of the 
reference clock. If you do not specify the "-clk_ref" option, 
all clocks are assumed to be reference clocks by default.

The format of <value> is "<numerical value><time unit>", 
for example, "7.55ns". 

The following table shows the available time units:

Time Unit                  Description
----------------------     ------------------
s                          second(s)
ms                         millisecond(s)
us                         microsecond(s)
ns                         nanosecond(s)
ps                         picosecond(s)
fs                         femtosecond(s)
Hz                         hertz
KHz                        kilohertz
MHz                        megahertz
GHz                        gigahertz

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify the required minimum and maximum input
## delays on the input pin named "ipin" relative to
## the rising edge of the reference clock named "clk1"
set_input_delay 2ns -to "ipin" -clk_ref "clk1"
## Or, equivalently,
set_input_delay 2ns -to "ipin" -clk_ref "clk1" -min -max

## Specify the required minimum input delay on 
## the input pin named "ipin" relative to the
## falling edge of the reference clock named "clk1"
set_input_delay 2ns -to "ipin" -clk_ref "clk1" -min -clock_fall

## Specify the required maximum input delay on
## input pins with names that start with "i"
## except those that start with "ibus"
timegroup "input_pins" -add_member "i*" -add_exception "ibus*"
set_input_delay 2ns -to "input_pins" -max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_input_delay>

<set_output_delay>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_output_delay [-h | -help] [-long_help] [-clk_ref <clock>] [-clock_fall] [-comment <comment>] [-disable] [-max] [-min] [-remove] -to <output_pin> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -clk_ref <clock>: Reference clock name
        -clock_fall: Option to specify that delay is relative to falling edge of reference clock
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -max: Option to set maximum delay
        -min: Option to set minimum delay
        -remove: Option to remove output delay requirement
        -to <output_pin>: Output pin name or output timegroup
        <value>: Delay value after rise of reference clock
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Specifies the required minimum or maximum delay on the output 
pin or output timegroup as specified by the "-to" option. 
The Quartus II(R) timing analysis propagates this delay and 
checks it against the actual delay. For more information 
about timegroups, type "timegroup -h".

If both "-min" and "-max" options are not used, then the
assignment is set for both minimum and maximum delay.

The "-clock_fall" option specifies that the output delay is 
relative to the falling edge of the reference clock. The 
rising edge of the reference clock is the default.

The <value> is the output delay after the rise or fall of the 
reference clock. If you do not specify the "-clk_ref" option, 
all clocks are assumed to be reference clocks by default.

The format of <value> is "<numerical value><time unit>", 
for example, "7.55ns".

The following table displays available time units:

Time Unit                  Description
----------------------     ------------------
s                          second(s)
ms                         millisecond(s)
us                         microsecond(s)
ns                         nanosecond(s)
ps                         picosecond(s)
fs                         femtosecond(s)
Hz                         hertz
KHz                        kilohertz
MHz                        megahertz
GHz                        gigahertz

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify the required minimum and maximum output
## delays on the output pin named "opin" relative to
## the rising edge of the reference clock named "clk1"
set_output_delay 2ns -to "opin" -clk_ref "clk1"
## Or, equivalently,
set_output_delay 2ns -to "opin" -clk_ref "clk1" -min -max

## Specify the required minimum output delay on 
## the output pin named "opin" relative to the
## falling edge of the reference clock named "clk1"
set_output_delay 2ns -to "opin" -clk_ref "clk1" -min -clock_fall

## Specify the required maximum output delay on
## output pins with names that start with "o"
## except those that start with "obus"
timegroup "output_pins" -add_member "o*" -add_exception "obus*"
set_output_delay 2ns -to "output_pins" -max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_output_delay>

<set_multicycle_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_multicycle_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-end] [-from <from_list>] [-hold] [-remove] [-setup] [-start] [-to <to_list>] <path_multiplier>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable multicycle assignment
        -end: Option to indicate that destination clock cycles should be considered for path multiplier
        -from <from_list>: List of clock names, node names, and/or timegroup names that represent start or source points of multicycle path, for example, {node1 node2 ...}
        -hold: Option to indicate that path multiplier is meant for hold
        -remove: Option to remove multicycle assignment
        -setup: Option to indicate that path multiplier is meant for setup
        -start: Option to indicate that source clock cycles must be considered for path multiplier
        -to <to_list>: List of clock names, node names, and/or timegroup names that represent end or destination points of multicycle path, for example, {node1 node2 ...}
        <path_multiplier>: Multicycle path multiplier
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Specifies that the given timing paths have multicycle setup 
or hold delays with the number of cycles specified by the 
"-path_multiplier" option. 

If neither the "-setup" nor "-hold" options are used, the 
"-setup" option is the default option. If neither the "-start" 
nor "-end" options are used, the "-end" option is the default 
option.

You must use either the "-from <from_list>" or "-to <to_list>" 
option.

Note that Quartus(R) II timing analysis is optimized to use
timegroups for timing constraints instead of a list of nodes.
Of the following two methods to make multicycle assignments, 
method (1) is the optimal method.

(1) timegroup "src_group" -add_member "s1"
    timegroup "src_group" -add_member "s2"
    timegroup "src_group" -add_member "s3"
    timegroup "dst_group" -add_member "d1"
    timegroup "dst_group" -add_member "d2"
    set_multicycle_assignment -from "src_group" -to "dst_group"

(2) set_multicycle_assignment -from {s1 s2 s3} -to {d1 d2}

For more information about timegroups, type "timegroup -h".

The meaning of multicycle hold differs between the Quartus II 
software timing analysis and the Synopsys PrimeTime software 
timing analysis. Refer to the online Help of each software for 
more information.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Multicycle "setup" from reg1 and reg2 to any destination points
timegroup "src_group" -add_member reg1
timegroup "src_group" -add_member reg2
set_multicycle_assignment 2 -setup -from "src_group"

## or
timegroup "src_group" -add_member reg1
timegroup "src_group" -add_member reg2
timegroup "dst_group" -add_member *
set_multicycle_assignment 2 -setup -from "src_group" -to "dst_group"

## Source multicycle "setup" to reg1 and reg2 from any source points 
timegroup "dst_group" -add_member reg1
timegroup "dst_group" -add_member reg2
set_multicycle_assignment 2 -setup -start -to "dst_group"

## or
timegroup "dst_group" -add_member reg1
timegroup "dst_group" -add_member reg2
timegroup "src_group" -add_member *
set_multicycle_assignment 2 -setup -start -from "src_group" -to "dst_group"

## Source multicycle "hold" from src1 to dst1 and dst2 and
## from src2 to dst1 and dst2
timegroup "src_group" -add_member src1
timegroup "src_group" -add_member src2
timegroup "dst_group" -add_member dst1
timegroup "dst_group" -add_member dst2
set_multicycle_assignment 2 -hold -from "src_group" -to "dst_group"

## Source multicycle "hold" from registers clocked by clk1
## to registers clocked by clk2
## Timegroups are useful for making assignments to
## more than one node. Timegroups are not necessary 
## for making an assignment from only one clock node  
## to another clock 
set_multicycle_assignment 2 -hold -start -from clk1 -to clk2

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Invalid path multiplier value: <string>.  Specify a positive integer value.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_multicycle_assignment>

<set_timing_cut_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_timing_cut_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-from <from_pin_list>] [-remove] [-to <to_pin_list>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -from <from_pin_list>: List of start or source node names and/or timegroup names for timing path, for example, {node1 node2 ...}
        -remove: Option to remove timing cut assignment
        -to <to_pin_list>: List of end node names and/or timegroup names for timing path, for example, {node1 node2 ...}
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Specifies that the timing paths that start from the designated 
<from_pin_list> and end in the designated <to_pin_list> are 
false paths.

Nodes for the <from_pin_list> can be input pins, internal nodes, 
clock pins, or timegroups. Nodes for the <to_pin_list> can be
output pins, internal nodes, clock pins, or timegroups.

You must use either the "-from <from_pin_list>" or the 
"-to <to_pin_list>" option.

Note that Quartus(R) II timing analysis is optimized to use
timegroups for timing constraints instead of a list of nodes.
Of the following two methods to make timing cut assignments, 
method (1) is the optimal method.

(1) timegroup "src_group" -add_member "s1"
    timegroup "src_group" -add_member "s2"
    timegroup "src_group" -add_member "s3"
    timegroup "dst_group" -add_member "d1"
    timegroup "dst_group" -add_member "d2"
    set_timing_cut_assignment -from "src_group" -to "dst_group"

(2) set_timing_cut_assignment -from {s1 s2 s3} -to {d1 d2}

For more information about timegroups, type "timegroup -h".

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set timing cut from any source points to dst1 and dst2
timegroup "dst_group" -add_member dst1
timegroup "dst_group" -add_member dst2
set_timing_cut_assignment -to "dst_group"

## or
timegroup "src_group" -add_member *
timegroup "dst_group" -add_member dst1
timegroup "dst_group" -add_member dst2
set_timing_cut_assignment -from "src_group" -to "dst_group"

## Set timing cut from src1 and src2 to any end points
timegroup "src_group" -add_member src1
timegroup "src_group" -add_member src2
set_timing_cut_assignment -from "src_group"

## or
timegroup "src_group" -add_member src1
timegroup "src_group" -add_member src2
timegroup "dst_group" -add_member *
set_timing_cut_assignment -from "src_group" -to "dst_group"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_timing_cut_assignment>

<project_new>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_new [-h | -help] [-long_help] [-family <family>] [-overwrite] [-part <part>] [-revision <revision_name>] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -family <family>: Family name
        -overwrite: Option to overwrite existing project and revision
        -part <part>: Part name
        -revision <revision_name>: Revision name
        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Creates and opens a new project with the specified project name.

If the "-revision" option is not specified, the project name 
is used to create the revision.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create project "chiptrip" and revision "chiptrip"
project_new chiptrip

## Create project "chiptrip" and revision "auto_max"
project_new -revision auto_max chiptrip

## Create project "chiptrip" and revision "chiptrip"
## Overwrite any Quartus II Settings File (.qsf) if it exists
project_new chiptrip -overwrite

## Create project "chiptrip" and revision "chiptrip"
## Set the FAMILY assignment to Stratix
project_new chiptrip -family Stratix

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: The "-<string>" option must also be used when you use the "-<string>" option. Specify both options.
TCL_ERROR	1   	ERROR: Can't create project: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name using the "-<string>" option.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name.
TCL_ERROR	1   	ERROR: Can't create settings files for project: <string>. Make sure the .psf, .csf, and .ssf files are writeable.
TCL_ERROR	1   	ERROR: Can't open project: <string>
TCL_ERROR	1   	ERROR: Can't remove Quartus II Settings File: <string>. Make sure the file is writeable.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Project already exists: <string>. Specify a different project name or use the "-overwrite" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_new>

<project_open>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_open [-h | -help] [-long_help] [-current_revision] [-error_on_incompatible_database] [-revision <revision_name>] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -current_revision: Option to open the current revision automatically
        -error_on_incompatible_database: Option not to open the project and issue and error if the database version is incompatible
        -revision <revision_name>: Revision name
        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Opens an existing project. To create a new project, use the 
"project_new" command.

If the "-revision" option is not specified, the project name
is used to open the revision.

By default, opening the project overwrites the database
created in a different version of the Quartus II software.
However, if the "-error_on_incompatible_database" option is
specified, instead of opening the project, an error is issued 
when the database version differs from the current version of the 
Quartus II software.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Open project "chiptrip" and revision "chiptrip"
project_open chiptrip

## Open project "chiptrip" and revision "auto_max"
project_open -revision auto_max chiptrip

## Get the current revision before opening
## the project with the current revision
set project_name chiptrip
set current_revision [get_current_revision $project_name]
project_open -revision $current_revision $project_name
puts [get_global_assignment -name FAMILY]
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Project is already open: <string>
TCL_ERROR	1   	ERROR: Can't open project: <string>. First close the currently open project: <string>.
TCL_ERROR	1   	ERROR: Can't open project: <string>
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Cannot open project: <string>. The project is not compatible with the installed version of the Quartus II software. Opening the project will overwrite the old project database. If you wish to overwrite the old project database, make sure to specify the -<string> option.
TCL_ERROR	1   	ERROR: Can't open revision: <string> (project: <string>). The revision is not compatible with the installed version of the Quartus II software. Opening the revision will overwrite the old revision database. If you wish to overwrite the old revision database, make sure to specify the -<string> option.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_open>

<set_current_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_current_revision [-h | -help] [-long_help] [-force] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -force: Option to open the revision and overwrite the compilation database if the database version is incompatible.
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Sets the specified revision name as the current revision.

In 8.1 or later versions of Quartus II software, set_current_revision
gives an error when the compilation database version is not
compatible with the current version of Quartus II software.
You may specify the "-force" option to avoid the error
and overwrite the database.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Sets "auto_max" as the current revision 
set_current_revision auto_max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Revision is already the current revision: <string>. No action is required.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision file does not exist: <string>.qsf. Use "delete_revision" to delete the revision from the current project. Then use "create_revision" to create the revision and its .qsf before setting <string> as the current revision.
TCL_ERROR	1   	ERROR: Revision is not included in the current project: <string> . Use the "create_revision" command to create the revision.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_current_revision>

<get_current_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_current_revision [-h | -help] [-long_help] [<project_name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns the name of the current revision for the specified 
project. If the project name is not specified, the current 
project name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the current revision name for
# the currently open project "chiptrip"
project_open chiptrip
set revision_name [get_current_revision]
project_close

# Get the current revision name for
# a project that is not currently open
set revision_name [get_current_revision chiptrip]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_current_revision>

<create_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_revision [-h | -help] [-long_help] [-based_on <revision_name>] [-copy_results] [-set_current] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -based_on <revision_name>: Revision name on which new revision bases its settings
        -copy_results: Option to copy results from "based_on" revision
        -set_current: Option to set new revision as current revision
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Creates the specified revision. If the revision is not 
included in the current project, a new revision is 
created in the project with default settings. 

If you specify the "-set_current" option, this command 
sets the newly created revision as the current revision.

If you specify the "-based_on" option, the command creates 
a new revision in the project based on the settings of the 
based-on revision specified by the option.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create a new revision called "tmp"
create_revision tmp

## Create a new revision called "tmp"
## and set it as the current revision
create_revision tmp -set_current
## This method is the same as 
create_revision tmp
set_current_revision tmp

## Create a new revision called "speed_ch"
## with settings based on "chiptrip"
## and set it as the current revision
create_revision speed_ch -based_on chiptrip -set_current

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Revision is already the current revision: <string>. No action is required.
TCL_ERROR	1   	ERROR: Based-on revision is not included in the current project: <string>. Make sure the based-on revision name is spelled correctly and included in the current project.
TCL_ERROR	1   	ERROR: Can't create revision because the current project uses the device family: <string>. Change the device family or create the revision in another project that uses a different device family.
TCL_ERROR	1   	ERROR: Can't create file: <string>. Make sure you have permission to write to the specified file.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name.
TCL_ERROR	1   	ERROR: Can't remove file: <string>. Make sure the file is not read-only and you have permission to write to the specified file.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Didn't create revision because it is already included in current project: <string>. If you want a new revision, specify a different revision name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_revision>

<delete_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: delete_revision [-h | -help] [-long_help] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Deletes the specified revision from the current project. The corresponding
<revision name>.qsf file is deleted as well.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Delete the revision called "tmp"
delete_revision tmp

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't delete the current revision: <string>. Specify a different revision name.
TCL_ERROR	1   	ERROR: Can't delete revision  because it is not included in the current project: <string> . Specify a revision name that is included in the project.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</delete_revision>

<revision_exists>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: revision_exists [-h | -help] [-long_help] [-project <project_name>] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -project <project_name>: Project name
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Checks whether the revision exists for the specified project
or currently open project. 

Returns 1, if the revision exists; returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Check if the specified revision exists
## in the specified project
if [revision_exists -ARG(project) chiptrip speed_ch] {
	puts "Revision exists"
} else {
	puts "Revision does not exist"
}

## Create revision for the currently open 
## project if it does not exist
## Set the current revision otherwise
project_open chiptrip
if [revision_exists speed_ch] {
	set_current_revision speed_ch
} else {
	create_revision speed_ch
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</revision_exists>

<get_project_revisions>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_project_revisions [-h | -help] [-long_help] [<project_name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns a list of revisions included in the specified project.
If the project name is not specified, the current project name
is used by default.

The first element in the list of revisions is the current
revision and is the same as the return value for the
"get_current_revision" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Set the device family assignment to Stratix 
# for all revisions
project_open chiptrip
set original_revision [get_current_revision]

foreach revision [get_project_revisions] {
	puts "$revision"
	set_current_revision $revision
	set_global_assignment -name FAMILY Stratix
	export_assignments
}

set_current_revision $original_revision
project_close

# Open the project with the first available revision 
# and set the device family assignment to Stratix
set revision [lindex [get_project_revisions chiptrip] 0]
open_project -revision $revision chiptrip
set_global_assignment -name FAMILY Stratix
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_project_revisions>

<export_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: export_assignments [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Exports assignments for the current revision to the Quartus II 
Settings File (.qsf).

Assignments created or modified during an open project are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## The most common use of export_assignments is to
## call it before doing a system call
## to call a compiler command-line executable
project_open $project_name
set_global_assignment -name FAMILY Stratix

## Before calling quartus_map, 
## write out the FAMILY assignment
export_assignments

## Now, call quartus_map
qexec "[file join $::quartus(binpath) quartus_map] $project_name"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</export_assignments>

<get_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_names [-h | -help] [-long_help] -filter <wildcard> [-node_type <all|comb|reg|pin|input|output|bidir|hierarchy|mem|bus|qsf>] [-observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -filter <wildcard>: Option to specify the node's full path name and/or wildcard character(s)
        -node_type <all|comb|reg|pin|input|output|bidir|hierarchy|mem|bus|qsf>: Option to filter based on the specified node type.
        -observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>: Option to filter based on the specified observable type
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns a filtered output collection of all matching
node name IDs found in a compiled Quartus(R) II project. 

To access each element of the output collection, use the Tcl 
command "foreach_in_collection". To see example usage, type 
"get_names -long_help" or "foreach_in_collection -long_help".

If the "-node_type" option is not specified, the default
value is "all". Similarly, if the "-observable_type" option
is not specified, the default value is "all".

The node type "pin" includes "input", "output", and "bidir".
The node type "qsf" include names from qsf settings file.
The node type "all" includes all node types.
 
The value for "-observable_type" option can be one of 
the following:

Observable Type      Description
---------------      -----------------------------------
all                  Use post-Fitter information. If it is
                     not available, post-Synthesis
                     information is used. Otherwise,
                     pre-synthesis information is used if it
                     exists.
pre_synthesis        Use pre-synthesis information.
post_synthesis       Use post-synthesis information.
post_fitter          Use post-Fitter information.
post_asm             Use post-Assembler information. The
                     post-Assembler information is only supported
                     for designs using the HardCopy II device family.
stp_pre_synthesis    Use SignalTap II pre-synthesis information.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Search for a single post-Fitter pin with the name accel and 
# make assignments
set accel_name_id [get_names -filter accel -node_type pin -observable_type post_fitter]
foreach_in_collection name_id $accel_name_id {

	# Get the full path name of the node
	set target [get_name_info -info full_path $name_id]

	# Set multicycle assignment
	set_multicycle_assignment -to $target 2

	# Set location assignment
	set_location_assignment -to $target Pin_E22
}
# Search for nodes of any post-Fitter node type with name length <= 5
# The default node type is "all"
set name_ids [get_names -filter ????? -observable_type post_fitter]
foreach_in_collection name_id $name_ids {

	# Print the name id
	puts $name_id

	# Print the node type
	puts [get_name_info -info node_type $name_id]

	# Print the full path (which excludes the current
	# focus entity from the path)
	puts [get_name_info -info full_path $name_id]
}
# Search for nodes of any post-Fitter node type that end in "eed".
# The default node type is "all"
set name_ids [get_names -filter *eed -observable_type post_fitter]
foreach_in_collection name_id $name_ids {

	# Print the name id
	puts $name_id

	# Print the node type
	puts [get_name_info -info node_type $name_id]

	# Print the full path (which excludes the current
	# focus entity from the path)
	puts [get_name_info -info full_path $name_id]
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Illegal node type: <string>.  Specify "all", "comb", "reg", "pin", "hierarchy", or "bus".
TCL_ERROR	1   	ERROR: Illegal observable type: <string>.  Specify "all", "pre_synthesis", "post_synthesis", or "post_fitter".
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Post-Assembler compiler database does not exist for revision name: <string>. Run Assembler (quartus_asm) with the specified revision name before using this Tcl command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_names>

<get_name_info>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_name_info [-h | -help] [-long_help] [-get_synonyms] [-info <parent_name_id|base_name|entity_name|instance_name|full_path|short_full_path|node_type|creator|signaltapii|file_location>] [-observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>] [-use_cached_database] <name_id>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -get_synonyms: Option to get a Tcl list of synonym name ids. This is an advanced Quartus II Tcl option.
        -info <parent_name_id|base_name|entity_name|instance_name|full_path|short_full_path|node_type|creator|signaltapii|file_location>: Option to specify the type of information to display.
        -observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>: Option to specify the observable type of the name ID
        -use_cached_database: Option not to check the compilation database for updates. Use this option only if you do not compile the project after getting the name IDs from "get_names" command. If you compile the project, you must re-run "get_names" command again to refresh the cached database information before using this option. This is an advanced Quartus II Tcl option.
        <name_id>: Option to specify the node name ID
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Displays the specified type of information for the specified node 
name id. Type "get_names -long_help" to view how to get a collection 
of node name IDs.

If the "-observable_type" option is not specified, the default 
value is "all". The specified observable type must have the same 
observable type as specified in the "get_names" Tcl command which 
returned the currently specified node name id.

The value for "-observable_type" option can be one of 
the following:

Observable Type      Description
---------------      -----------------------------------
all                  Use post-Fitter information. If it is
                     not available, post-synthesis
                     information is used. Otherwise,
                     pre-synthesis information is used if it
                     exists.
pre_synthesis        Use pre-synthesis information.
post_synthesis       Use post-synthesis information.
post_fitter          Use post-Fitter information.
post_asm             Use post-Assembler information. The
                     post-Assembler information is only supported
                     for designs using the HardCopy II device family.
stp_pre_synthesis    Use SignalTap II pre-synthesis information.


The info type for the "-info" option can be one of 
the following:

Info Type            Description
--------------       -----------------------------------
parent_name_id       The name id for the node's parent.
base_name            The node name, which consists of an 
                     entity name and/or an instance name 
                     separated by a colon if necessary.
entity_name          The entity name.
instance_name        The instance name.
full_path            The full hierarchy path name, which 
                     consists of entity name(s) and/or the 
                     instance name(s). This path name 
                     excludes the current focus entity.
                     If there is nothing shown, the
                     name id is the current focus entity's 
                     name id.
short_full_path      The short full hierarchy path name, 
                     which consists of the instance name(s).
                     This path name excludes the current 
                     focus entity. If nothing is 
                     shown, the name id is the
                     current focus entity's name id.
node_type            The node type, which can be one of 
                     the types supported by "get_names",
                     namely, "input", "output", "bidirectional",
                     "register", "combinational",
                     "hierarchy", "memory", or "bus".
                     If "pin" type was specified for 
                     "get_names" command, the node type shown
                     here is expanded to be "input", "output", or
                     "bidirectional".
                     Node type value of "qsf" indicates name 
                     originates from qsf settings file.
creator              The creator of the node, which is either
                     "user_entered" or "compiler_generated".
signaltapii          If this node can be connected to a
                     SignalTap(R) II embedded logic analyzer, 
                     1 is shown. Otherwise, 0 is shown.
file_location        The source file location. For example,
                     the source file location for the entity
                     chiptrip is "chiptrip.v". To get the full
                     path to the source file, use the command
                     "resolve_file_path" which exists only in
                     version 4.0 or later of ::quartus::project
                     package.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the name id of the current focus entity
set current_focus_entity_id [get_top_level_entity]

# The full path name of the current focus entity
# is empty because the full path excludes the 
# current focus entity
set msg "Full path of the current focus entity => ("
append msg [get_name_info -info full_path $current_focus_entity_id]
append msg ")"
puts $msg
puts ""

# Get the node type of the current focus entity
# The node type should be a hierarchy type
set msg "Node type of the current focus entity => ("
append msg [get_name_info -info node_type $current_focus_entity_id]
append msg ")"
puts $msg

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Illegal info type: <string>.  Specify "parent_name_id", "base_name", "entity_name", "instance_name", "full_path", "short_full_path", "node_type", "creator", or "signaltapii".
TCL_ERROR	1   	ERROR: Illegal name id: <string>.  Specify a name id that exists in a compiled Quartus II project.
TCL_ERROR	1   	ERROR: Invalid name id: <string>.  Specify an integer greater than or equal to zero.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Post-Assembler compiler database does not exist for revision name: <string>. Run Assembler (quartus_asm) with the specified revision name before using this Tcl command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_name_info>

<get_top_level_entity>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_top_level_entity [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns the name id for the current focus entity.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the name id of the current focus entity
set current_focus_entity_id [get_top_level_entity]

# Print out the entity name of the current focus entity
set msg "Entity name of the current focus entity => ("
append msg [get_name_info -info entity_name $current_focus_entity_id]
append msg ")"
puts ""
puts $msg

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_top_level_entity>

<get_all_assignment_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_assignment_names [-h | -help] [-long_help] [-family <family>] [-module <all|map|fit|tan|asm|eda|drc|generic>] [-type <all|global|instance>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -family <family>: Option to filter based on the specified device family. Defaults to all families.
        -module <all|map|fit|tan|asm|eda|drc|generic>: Option to filter based on the specified flow module. Defaults to all.
        -type <all|global|instance>: Option to filter based on the specified assignment type. Defaults to all.
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns a filtered output list of all available, matching
assignment names.

The module option takes one of the following values:

Module           Description
--------         -------------------------------------
map              Analysis & Synthesis assignment names
fit              Fitter assignment names
tan              Classic Timing Analyzer assignment names
asm              Assembler assignment names
eda              EDA Netlist Writer assignment names
drc              Design Assistant assignment names
generic          Other assignment names not included in any 
                 of the above flow modules
all              All assignment names
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all available global assignments
foreach i [get_all_assignment_names -type global] {
    puts $i
}

## Print out all available global assignments
## for the Stratix family
foreach i [get_all_assignment_names -type global -family Stratix] {
    puts $i
}

## Print out all available global assignments
## for the Stratix family required
## by the Analysis & Synthesis module
foreach i [get_all_assignment_names -type global -family Stratix -module map] {
    puts $i
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal flow module: <string>.  Specify "<string>", "<string>", "<string>", "<string>", "<string>", "<string>", "<string>", or "<string>".
TCL_ERROR	1   	ERROR: Illegal type: <string>.  Specify "<string>", "<string>", or "<string>".
TCL_ERROR	1   	ERROR: Illegal device family: <string>.  Specify a legal device family.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_assignment_names>

<set_user_option>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_user_option [-h | -help] [-long_help] -name <name> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name
        <value>: User option value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Sets the user option value for the name specified by
the "-name" option. The user option is written to
the quartus2.ini file.

To get a list of all available user option names, use
the "get_all_user_option_names" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set TALKBACK_ENABLED to "on"
set_user_option -name TALKBACK_ENABLED on

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal user option name: <string>. Specify a legal user option name. To get a list of legal names, use the "get_all_user_option_names" command.
TCL_ERROR	1   	ERROR: Illegal user option value: <string>. Specify a legal user option value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_user_option>

<get_user_option>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_user_option [-h | -help] [-long_help] -name <name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns the user option value for the name specified by
the "-name" option.

To get a list of all available user option names, use
the "get_all_user_option_names" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the value for the user option
## "TALKBACK_ENABLED"
set value [get_user_option -name TALKBACK_ENABLED]
puts "TALKBACK_ENABLED = $value"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal user option name: <string>. Specify a legal user option name. To get a list of legal names, use the "get_all_user_option_names" command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_user_option>

<get_all_user_option_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_user_option_names [-h | -help] [-long_help] [-name <name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 2.0

------------
Description:
------------

Returns a filtered output list of all available, matching
user option names.

If the "-name" option is not specified, all available user
option names are returned. Otherwise, only the matching
user option names are returned.

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all available user option names
foreach i [get_all_user_option_names] {
    puts $i
}

## Display all user option names that contain
## the word "talkback" and also display the 
## value for each of the user option names
foreach i [get_all_user_option_names -name *talkback*] {
	set name $i
	set value [get_user_option -name $i]
    puts "$name = $value"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_user_option_names>

<<<</2.0>>>>
<<<<3.0>>>>
<is_project_open>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: is_project_open [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Checks whether a project is currently open. Returns 1, if a 
project is currently open; returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Close the project if open
if [is_project_open] {
   project_close
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</is_project_open>

<project_close>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_close [-h | -help] [-long_help] [-dont_export_assignments]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -dont_export_assignments: Do not export assignments to file
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Closes an open project.

The assignments created or modified during an open project
are committed to the Quartus II Settings File (.qsf) during a 
"project_close", unless you use the "-dont_export_assignments"
option.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Close the project if open
if [is_project_open] {
   project_close
}
## Close the project if open
## and do not export the assignments
if [is_project_open] {
   project_close -dont_export_assignments
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_close>

<project_exists>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_exists [-h | -help] [-long_help] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Checks whether a project exists. Returns 1, if a project exists; 
returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create project if one does not exist.
## Open existing project otherwise.
if [project_exists chiptrip] {
	project_open chiptrip
} else {
	project_new chiptrip
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_exists>

<project_archive>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_archive [-h | -help] [-long_help] [-all_revisions] [-include_libraries] [-include_outputs] [-overwrite] [-use_file_set <file_set>] [-version_compatible_database] <archive_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -all_revisions: Option to archive all revisions
        -include_libraries: Option to include related system libraries
        -include_outputs: Option to include output files in archive
        -overwrite: Option to overwrite any currently existing archive file
        -use_file_set <file_set>: Option to create the archive using the specified file set
        -version_compatible_database: Option to include version-compatible database if supported
        <archive_name>: Archive file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Archives an open project and its related files into a
Quartus II Archive File (.qar).

The description of operations is as follows:

Option        Description
------        -------------------------
use_file_set  

              Creates the archive using the specified
              file set. By default, the 'basic'
              file set is used. For more information
              about file sets, type:

                 quartus_sh --archive -list_file_sets

all_revisions

              Archives all revisions.

overwrite

              Overwrites existing archive file.

include_outputs

              Includes output files in archive.

include_libraries

              Includes related Megafunction and
              IP library files.

version_compatible_database

              Includes version-compatible database
              if supported.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Default mode: Archive current revisions without output files or libraries
project_archive chiptrip.qar

## Archive all revisions without output files or libraries
project_archive chiptrip.qar -all_revisions

## Archive current revision with version-compatible database if supported
project_archive chiptrip.qar -version_compatible_database

## Same as first one, but overwrite any existing archive file
project_archive chiptrip.qar -overwrite

## Include outut files and libraries
project_archive chiptrip.qar -include_outputs -include_libraries

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Error(s) found while archiving the project. See error message(s) for details.
TCL_ERROR	1   	ERROR: Project archive failed. Some files could not be processed. Refer to the Quartus II Archive Log File (<archive_name>.qarlog).
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_archive>

<project_restore>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_restore [-h | -help] [-long_help] [-destination <directory>] [-overwrite] [-update_included_file_info] <archive_file>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -destination <directory>: Directory where restored files are placed
        -overwrite: Option to overwrite files in destination directory
        -update_included_file_info: Option to update included file information
        <archive_file>: Archive file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Restores a Quartus II Archive File (.qar) that contains 
the project and its related files.

By default, the archive is restored into the current
directory. Use the "-destination" option to restore the 
files into a new directory.

By default, the command fails if the archive already 
contains files in the destination directory. Use the 
"-overwrite" option to overwrite any existing files 
in the destination directory.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Restore archive and expand files into current directory
project_restore chiptrip.qar
## or
project_restore chiptrip.qar -destination 

## Restore archive. Expand files into current directory, 
## but overwrite any existing files in "."
project_restore chiptrip.qar -destination . -overwrite

## Restore project into a "restored" subdirectory
project_restore chiptrip.qar -destination "restored" -overwrite

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Error(s) found while restoring the archive. See error message(s) for details.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_restore>

<get_all_quartus_defaults>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_quartus_defaults [-h | -help] [-long_help] [-name <name>] [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns a filtered output collection of all matching default
assignment values. To access each element of the output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads in the default assignments found inside
the Quartus II Default Settings File (.qdf). It filters the 
assignments data found inside the .qdf and outputs the data 
based on the values specified by the "-name" option.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Assignment name>} {<Assignment value>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the default assignments using
## the foreach_in_collection method

set default_asgns_col [get_all_quartus_defaults]
foreach_in_collection default $default_asgns_col {
	set sect_id [lindex $default 0]
	set name [lindex $default 1]
	set value [lindex $default 2]

	## Now, display the content of the assignment
	puts "Section ID ($sect_id)"
	puts "Assignment Name ($name)"
	puts "Assignment Value ($value)"
}

## Using wildcards
set default_asgns_col [get_all_quartus_defaults -name *]
foreach_in_collection default $default_asgns_col {
	set sect_id [lindex $default 0]
	set name [lindex $default 1]
	set value [lindex $default 2]

	## Now, display the content of the assignment
	puts "Section ID ($sect_id)"
	puts "Assignment Name ($name)"
	puts "Assignment Value ($value)"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_quartus_defaults>

<set_parameter>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_parameter [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] -name <name> [-remove] [-to <destination>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable parameter
        -entity <entity_name>: Entity to which to add parameter
        -name <name>: Parameter name
        -remove: Option to remove parameter
        -to <destination>: Destination of parameter
        <value>: Parameter value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Sets or removes the specified parameter name.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

The parameters created or modified by using this Tcl command are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.

Use the "-entity" option to force the parameter to the specified
entity. If the "-entity" option is not specified, the value for 
the FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

A parameter is an attribute of a megafunction, macrofunction,
or certain primitives that determines the logic created or used
to implement the function. The parameter information can be 
used to determine the actual primitives and other subdesigns 
needed to implement the logic of the function.

The following general guidelines apply to parameters:

*  All logic options can be assigned as parameters for individual
   instances of megafunctions or macrofunctions. For a given 
   logic OPTION the precedence for parameters is:

      1) Instance specific logic option settings
      2) Instance specific parameter settings
      3) Project-wide default parameter settings

*  You cannot assign a value to the predefined Altera(R) 
   parameter DEVICE_FAMILY, which represents the device family 
   assigned for the project. However, you can use the parameter 
   value in comparisons.

*  The predefined Altera LPM_PIPELINE and LATENCY parameters 
   can be assigned to an instance of a megafunction or 
   macrofunction. However, the parameter applies only to that 
   instance, and is not inherited by the subdesigns of that 
   instance.

*  All logic options can be assigned as parameters for individual
   megafunctions or macrofunctions. However, logic options cannot 
   be assigned global, project-wide default parameter values.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set project-wide, default WIDTH parameter value
set_parameter -name WIDTH 8

## Set entity-specific SIZE parameter value
## to "my_ram" entity
set_parameter -entity my_ram -name SIZE 16

## Specify the same parameter to my_ram
## but inside "top_level" entity
set_parameter -entity top_level -to my_ram -name SIZE 16

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Removed parameter: <string>
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Parameter does not exist and cannot be removed: <string>. Specify an existing parameter name.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_parameter>

<get_parameter>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_parameter [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name
        -to <destination>: Destination of parameter
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns the value of the parameter.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function returns the 
parameter value for the current entity. The value is retrieved 
from the PARAMETERS section of the entity. Otherwise, the 
function returns the project-wide default parameter value
obtained from the DEFAULT_PARAMETERS section.

Use the "-entity" option to retrieve the parameter from the 
specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get project-wide, default parameter value
get_parameter -name WIDTH

## Get entity-specific parameter value
get_parameter -name inst1 -to SIZE

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_parameter>

<get_all_parameters>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_parameters [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name (string pattern is matched using Tcl string matching)
        -to <destination>: Destination of the parameter (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns a filtered output collection of all matching parameter 
values. To access each element of this output collection, use 
the Tcl command "foreach_in_collection". To see example usage, 
type "foreach_in_collection -long_help".

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function returns 
the parameter values for the current entity. The values are 
retrieved from the PARAMETERS section of the entity. Otherwise,
the function returns the project-wide default parameter values
obtained from the DEFAULT_PARAMETERS section.

This Tcl command filters the parameter data found in the
Quartus II Settings File (.qsf) and outputs the data based on
the values specified by the "-name" and "-to" options. These
options can take string patterns containing special characters
from the set "*?\[]" as values. The values are matched using
Tcl string matching. Note that bus names are automatically
detected and do not need to be escaped. Bus names have the
following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
get_all_parameters -name * -to a[0]

# To match all indices of bus "a", type:
get_all_parameters -name * -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

get_all_parameters -name * -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

Each element of the collection is a list with the following 
format:
{ {<Destination>} {<Parameter name>} {<Parameter value>} }

Use the "-entity" option to retrieve the parameter values from
the specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Display all project-wide default parameter values
foreach_in_collection parameter [get_all_parameters -name *] {

	set name [lindex $parameter 1]
	set value [lindex $parameter 2]

	## Now, display the content of the parameter
	puts "Parameter Name ($name)"
	puts "Parameter Value ($value)"
}

## Display all entity-specific parameter values
foreach_in_collection parameter [get_all_parameters -name * -to *] {

	set dest [lindex $parameter 0]
	set name [lindex $parameter 1]
	set value [lindex $parameter 2]

	## Now, display the content of the parameter
	puts "Destination ($dest)"
	puts "Parameter Name ($name)"
	puts "Parameter Value ($value)"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_parameters>

<remove_all_parameters>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_parameters [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name (string pattern is matched using Tcl string matching)
        -to <destination>: Destination of the parameter (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Removes all matching parameters.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function removes 
the parameters from the current entity. The parameters are 
removed from the PARAMETERS section of the entity. Otherwise,
the function removes the project-wide default parameters
obtained from the DEFAULT_PARAMETERS section.

This Tcl command filters the parameter data found in the
Quartus II Settings File (.qsf) and removes the data based on
the values specified by the "-name" and "-to" options. These
options can take string patterns containing special characters
from the set "*?\[]" as values. The values are matched using
Tcl string matching. Note that bus names are automatically
detected and do not need to be escaped. Bus names have the
following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
remove_all_parameters -name * -to a[0]

# To match all indices of bus "a", type:
remove_all_parameters -name * -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

remove_all_parameters -name * -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

Use the "-entity" option to remove the parameters from the 
specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.

The parameters removed by using this Tcl command are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## The following 3 examples remove project-wide,
## default parameter values
remove_all_parameters -name WIDTH
remove_all_parameters -name *ID*
remove_all_parameters -name *

## The following 3 examples remove entity-specific
## parameter values
remove_all_parameters -name inst1 -to SIZE
remove_all_parameters -name inst1 -to *IZ*
remove_all_parameters -name inst1 -to *

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> parameter(s) were removed
TCL_OK   	0   	INFO: Removed parameter: <string>
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Parameter does not exist and cannot be removed: <string>. Specify an existing parameter name.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_parameters>

<set_global_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_global_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] -name <name> [-remove] [-section_id <section id>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -entity <entity_name>: Entity to which to add assignment
        -name <name>: Assignment name
        -remove: Option to remove assignment
        -section_id <section id>: Section id
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Sets or removes a global assignment.

Assignments created or modified by using this Tcl command are not
saved to the Quartus II Settings File (.qsf) unless you explicitly
call one of the following two Tcl commands (from the
::quartus::project Tcl package):

1) export_assignments 
2) project_close (unless -dont_export_assignments is specified as an
argument to project_close)

You must save assignment changes before you run Quartus(R) II
command-line executables. Note, however, that the Tcl commands
execute_flow and execute_module (from the ::quartus::flow Tcl
package) call "export_assignments" before they run
command-line executables.

For entity-specific assignments, use the -entity option to force the
assignment to specified entity. If the -entity option is not
specified, the value for the FOCUS_ENTITY_NAME assignment is used. If
the FOCUS_ENTITY_NAME value is not found, the revision name is used.

If the Quartus II Settings File contains a USER_LIBRARIES assignment
and you call set_global_assignment to set a SEARCH_PATH or
USER_LIBRARIES assignment, the existing USER_LIBRARIES assignment
expands into one or more SEARCH_PATH assignments.

Note that values that begin with a dash ("-") should be enclosed in a
backslash followed by a quote. In the following example, -02 is
enclosed by \" at the beginning and the end.

set_global_assignment -name ARM_CPP_COMMAND_LINE \"-O2\"
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify Stratix as the family to use when compiling
set_global_assignment -name FAMILY Stratix

## If the family name has empty spaces, use quotes
set_global_assignment -name FAMILY "Stratix GX"

## or remove any empty space
set_global_assignment -name FAMILY StratixGX

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: File name "<string>" exceeds maximum of <string> characters. Specify a file name with fewer characters.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> cannot be removed -- it has multiple values. Specify one value to remove or use the "<string>" command to remove all values for the assignment.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_global_assignment>

<get_global_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_global_assignment [-h | -help] [-long_help] [-entity <entity_name>] [-front] -name <name> [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -front: Option to return the first assignment if there is more than one assignment found
        -name <name>: Assignment name
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns the value of the global assignment.

The "-name" option is not case sensitive.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the value of the FAMILY assignment
get_global_assignment -name FAMILY

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> has multiple values. Use the "<string>" command to get all values or use the "<string> -front" command to get the first value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_global_assignment>

<get_all_global_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_global_assignments [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns a filtered output collection of all matching global
assignment values. To access each element of the output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads the global assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignment data in the .qsf and outputs the data based 
on the values given by the "-name" option.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Assignment name>} {<Assignment value>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the registered source files
## using the foreach_in_collection method
set file_asgn_col [get_all_global_assignments -name SOURCE_FILE]
foreach_in_collection file_asgn $file_asgn_col {

    ## Each element in the collection has the following
    ## format: {} {SOURCE_FILE} {<file_name>}
    puts [lindex $file_asgn 2]
}

# Using wildcards
get_all_global_assignments -name SOURCE*

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_global_assignments>

<remove_all_global_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_global_assignments [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Removes all matching global assignments.

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads the global assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignments data found in the .qsf and removes the data
based on the values specified by the "-name" option.

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
remove the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

Assignments removed by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Remove all the registered source files

remove_all_global_assignments -name SOURCE_FILE

# Using wildcards
remove_all_global_assignments -name SOURCE*

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> global assignment(s) were removed
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_global_assignments>

<set_instance_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_instance_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] [-fall] [-from <source>] -name <name> [-remove] [-rise] [-section_id <section id>] [-to <destination>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -entity <entity_name>: Entity to which to add assignment
        -fall: Option applies to falling edge
        -from <source>: Source of assignment
        -name <name>: Assignment name
        -remove: Option to remove assignment
        -rise: Option applies to rising edge
        -section_id <section id>: Section id
        -to <destination>: Destination of assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Sets or removes an instance assignment.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If the "-entity" 
option is not specified, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify a TSU_REQUIREMENT of 2ns from mypin to any register
set_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT 2ns

## Remove the TSU_REQUIREMENT from mypin to all registers
set_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT -remove

## Specify the entity to which the assignment is added, 
## use the -entity option
## This is needed if the top-level entity name is other than
## that of the project name
## The following command generates a top_level entity
set_instance_assignment -from "mypin" -to * -entity top_level -name TSU_REQUIREMENT 2ns

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> cannot be removed -- it has multiple values. Specify one value to remove or use the "<string>" command to remove all values for the assignment.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_instance_assignment>

<get_instance_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_instance_assignment [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] [-front] -name <name> [-section_id <section id>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of assignment
        -front: Option to return the first assignment if there is more than one assignment found
        -name <name>: Assignment name
        -section_id <section id>: Section id
        -to <destination>: Destination of assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns the value of the instance assignment.

The "-name" option is not case sensitive.
The "-entity", "-to", and "-from" options are case sensitive.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the TSU_REQUIREMENT from mypin to any register
set value [get_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT]
puts "TSU_REQUIREMENT(mypin->*) = $value"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> has multiple values. Use the "<string>" command to get all values or use the "<string> -front" command to get the first value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_instance_assignment>

<get_all_instance_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_instance_assignments [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] -name <name> [-section_id <section id>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of assignment (string pattern is matched using Tcl string matching)
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -to <destination>: Destination of assignment (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns a filtered output collection of all matching instance
assignment values. To access each element of this output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

The "-name" option is not case sensitive.
The "-to" and "-from" options are case sensitive.

These options can take string patterns containing special 
characters from the set "*?\[]" as values. The values are 
matched using Tcl string matching. Note that bus names are
automatically detected and do not need to be escaped. Bus
names have the following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
get_all_instance_assignments -name LOCATION -to a[0]

# To match all indices of bus "a", type:
get_all_instance_assignments -name LOCATION -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

get_all_instance_assignments -name LOCATION -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

This Tcl command reads in the instance assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignments data found in the .qsf and outputs the 
data based on the values specified by the "-name", "-from", 
and "-to" options.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Source>} {<Destination>} {<Assignment name>} {<Assignment value>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the timing requirements
## using the foreach_in_collection method
## Use wildcards to catch TSU_REQUIREMENT, TCO_REQUIREMENT,
## and others
set asgn_col [get_all_instance_assignments -name *_REQUIREMENT]
foreach_in_collection asgn $asgn_col {

    ## Each element in the collection has the following
    ## format: { {} {<Source>} {<Destination>} {<Assignment name>} {<Assignment value>} }
    set from  [lindex $asgn 1]
    set to    [lindex $asgn 2]
    set name  [lindex $asgn 3]
    set value [lindex $asgn 4]
    puts "$name ($from -> $to) = $value"
}

## Print out all the location assignments with
## the destination bus name "timeo".
set bus_name "timeo"
get_all_instance_assignments -name LOCATION -to $bus_name[*]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_instance_assignments>

<remove_all_instance_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_instance_assignments [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] -name <name> [-section_id <section id>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of the assignment (string pattern is matched using Tcl string matching)
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -to <destination>: Destination of the assignment (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Removes all matching instance assignment values.

The "-name" option is not case sensitive.
The "-to" and "-from" options are case sensitive.

These options can take string patterns containing special 
characters from the set "*?\[]" as values. The values are 
matched using Tcl string matching. Note that bus names are
automatically detected and do not need to be escaped. Bus
names have the following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
remove_all_instance_assignments -name LOCATION -to a[0]

# To match all indices of bus "a", type:
remove_all_instance_assignments -name LOCATION -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

remove_all_instance_assignments -name LOCATION -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

This Tcl command reads the instance assignments found in
the Quartus II Settings File (.qsf) and removes this data based 
on the values specified by the "-name", "-from", and "-to"
options.

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
remove the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

Assignments removed by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Remove all the timing requirements
## Use wildcards to catch TSU_REQUIREMENT, TCO_REQUIREMENT,
## and others
remove_all_instance_assignments -name *_REQUIREMENT

## Remove all the location assignments with
## the destination bus name "timeo".
set bus_name "timeo"
remove_all_instance_assignments -name LOCATION -to $bus_name[*]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> instance assignment(s) were removed
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_instance_assignments>

<set_location_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_location_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-remove] -to <destination> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -remove: Option to remove assignment
        -to <destination>: Destination of assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Sets or removes a location assignment.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

set_location_assignment -to dst LOC

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_location_assignment>

<get_location_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_location_assignment [-h | -help] [-long_help] -to <destination>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -to <destination>: Destination of assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns the value of a location assignment.

The "-chip" option is not case sensitive.
The "-to" option is case sensitive.
<<<long_help_section>>>

--------------
Example Usage:
--------------

get_location_assignment -to dst		

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_location_assignment>

<create_base_clock>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_base_clock [-h | -help] [-long_help] [-comment <comment>] [-disable] [-duty_cycle <integer>] [-entity <entity>] -fmax <fmax> [-no_target] [-target <name>] [-virtual] <clock_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -duty_cycle <integer>: Duty cycle
        -entity <entity>: Entity to which to add clock assignment
        -fmax <fmax>: Clock frequency
        -no_target: Option to not assign clock to node
        -target <name>: Clock node name
        -virtual: Option to specify the clock as a virtual clock
        <clock_name>: Clock name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Creates the base clock. The base clock is an absolute clock.

The "-fmax" option can take the format:

<floating point time value><time unit>

For example, if the fmax is 10.55ns, "10.55" is the
<floating point time value> and "ns" is the <time unit>.

The following table displays possible time units:

Time Unit                 Description
---------                 --------------
s                         second(s)
ms                        millisecond(s)
us                        microsecond(s)
ns                        nanosecond(s)
ps                        picosecond(s)
fs                        femtosecond(s)
Hz                        hertz
KHz                       kilohertz
MHz                       megahertz
GHz                       gigahertz

If you specify the "-virtual" option, the base clock
is not assigned to any node in the timing netlist. You cannot
specify the "-virtual" option and the "-target" option 
at the same time.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If you do not specify
the "-entity" option, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Specify a clock named "clk50" with
# a 50ns period
# The command specifies a CLOCK section
# in the active project with the 50ns
# specification, and adds a
# "clk50 : CLOCK_SETTING=clk50" assignment
# to the current entity
create_base_clock -fmax 50ns clk50

# Specify the same clk50 to a pin with
# a different name (myclkpin)
create_base_clock -fmax 50ns -target myclkpin clk50

# Specify the entity name to which the clock
# is added, using the -entity option
# This is needed if the top-level entity name 
# is other than that of the project
# The following command generates a "top_level" entity.
create_base_clock -fmax 50ns -entity top_level clk50

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: The option "-<string>" was ignored because it is no longer supported. No action is required.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Options are mutually exclusive: <string> and <string>. Specify only one of the two options.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_base_clock>

<create_relative_clock>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_relative_clock [-h | -help] [-long_help] -base_clock <Base clock> [-comment <comment>] [-disable] [-divide <integer>] [-duty_cycle <integer>] [-entity <entity>] [-invert] [-multiply <integer>] [-no_target] [-offset <offset>] [-phase_shift <integer>] [-target <name>] [-virtual] <clock_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -base_clock <Base clock>: Base clock name
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -divide <integer>: Base clock division factor
        -duty_cycle <integer>: Duty cycle
        -entity <entity>: Entity to which to add clock assignment
        -invert: Option to invert base clock
        -multiply <integer>: Base clock multiplication factor
        -no_target: Option to not assign clock to node
        -offset <offset>: Offset from base clock
        -phase_shift <integer>: Phase shift from base clock
        -target <name>: Clock node name
        -virtual: Option to specify the clock as a virtual clock
        <clock_name>: Clock name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Creates a relative clock that derived from the absolute clock.

The "-offset" option can take the format:

<floating point time value><time unit>

For example, if the offset is 10.55ns, "10.55" is the
<floating point time value> and "ns" is the <time unit>.

The following table displays possible time units:

Time Unit                 Description
---------                 --------------
s                         second(s)
ms                        millisecond(s)
us                        microsecond(s)
ns                        nanosecond(s)
ps                        picosecond(s)
fs                        femtosecond(s)

The "-phase_shift" option takes an integer that represents
degrees of phase shift from the base clock period. For example, 
if a base clock has a period of 10ns and clk2 is a relative
clock derived from the base clock. A phase shift value of 45
applies a 45 degree phase shift to clk2, producing an offset
of 1.25ns from the base clock. For a given relative clock,
you may specify a phase shift, an offset, or both. If both
are specified, they are additive.

If you specify the "-virtual" option, the relative clock
is not assigned to any node in the timing netlist. You cannot
specify the "-virtual" option and the "-target" option 
at the same time.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If you do not specify
the "-entity" option, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify a base clock of 10ns
create_base_clock -fmax 10ns clk10

## Specify a relative clock with 2/3 the period
create_relative_clock -base_clock clk10 -multiply 2 -divide 3 clk2_3

## Specify a relative clock with a phase shift of 45 degrees
create_relative_clock -base_clock clk10 -phase_shift 45 clk_45
## or, equivalently, with an offset of 1.25ns
create_relative_clock -base_clock clk10 -offset 1.25ns clk_45

## Specify the entity name to which the clock
## is added, using the -entity option
## This is needed if the top-level entity name is 
## other than that of the project
## The following command generates a "top_level" entity
create_relative_clock -base_clock clk10 -entity top_level -multiply 2 -divide 3 clk2_3

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Options are mutually exclusive: <string> and <string>. Specify only one of the two options.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_relative_clock>

<get_clocks>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_clocks [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns a list of lists consisting of node name and clock 
setting name. The output has the following format:

{{<node name #1> <clock setting name #1>}
 {<node name #2> <clock setting name #2>}
 ...
 {<node name #N> <clock setting name #N>}}

If <node name> is empty, <clock setting name> was not assigned 
to any node. If <clock setting name> is empty, <node name> 
was assigned to an undefined <clock setting name>.

You can create <clock setting name> using the 
"create_base_clock" or "create_relative_clock" commands. You 
can create node names using the following command:

set_instance_assignment -name CLOCK_SETTINGS -to <clock setting name> <node name>
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Search for all pairs of node names and clock setting names
# and print the information

set clock_lists [get_clocks]

foreach clock_asgn $clock_lists {
     set node_name [lindex $clock_asgn 0]
     set clock_setting_name [lindex $clock_asgn 1]

     if { $node_name == "" } {
          puts "No node uses the clock \"$clock_setting_name\""
     } elseif {$clock_setting_name == ""} {
          puts "The node \"$node_name\" uses an undefined clock setting";
     } else {
          puts "The node \"$node_name\" uses the clock \"$clock_setting_name\""
     }
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_clocks>

<timegroup>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: timegroup [-h | -help] [-long_help] [-add_exception <name>] [-add_member <name>] [-comment <comment>] [-disable] [-get_exceptions] [-get_members] [-overwrite] [-remove] [-remove_exception <name>] [-remove_member <name>] <group_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -add_exception <name>: Tcl list of exception names to add
        -add_member <name>: Tcl list of member names to add
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -get_exceptions: Option to get collection of timegroup exceptions
        -get_members: Option to get collection of timegroup members
        -overwrite: Option to overwrite existing timegroup with the same group name
        -remove: Option to remove timegroup
        -remove_exception <name>: Tcl list of exception names to remove
        -remove_member <name>: Tcl list of member names to remove
        <group_name>: Group name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Adds, removes, gets members of, or gets exceptions to a 
timegroup.

A timegroup is a custom group of registers and pins. You can 
use the "-add_member" option to specify register or pin names 
you want to include in the timegroup. You can use the 
"-add_exception" option to specify names you want to exclude 
from the timegroup.

You can specify the names using wildcards, that is, using "?" 
or "*". For example, to add all registers and pins that start 
with a "b" except those that start with "b|c|" to a particular
timegroup named "group_b", type:

timegroup "group_b" -add_member "b*" -add_exception "b|c|*"

To remove members or exceptions from a timegroup, use the 
"-remove_member" or "-remove_exception" options respectively.

The "-get_members" option returns a collection of members in 
the timegroup. The "-get_exceptions" option returns a collection 
of exceptions to the timegroup. To access each element of the 
collection, use the Tcl command "foreach_in_collection". To see 
example usage, type "timegroup -long_help" or
"foreach_in_collection -long_help".

Specifying registers and pins in terms of a timegroup allows 
you to set timing constraints easily. For example, to make a 
multicycle assignment from nodes "a1" and "a2" to nodes "b1", 
"b2", and "b3", type the following:

timegroup "group_a" -add_member [list "a1" "a2"]
timegroup "group_b" -add_member [list "b1" "b2" "b3"]

set_multicycle_assignment -from "group_a" -to "group_b" 2

This command sets a multicycle assignment from every member of 
"group_a" to every member of "group_b". Quartus(R) II timing 
analysis is optimized to use timegroups in handling timing 
constraints.

To disable timegroup assignments for the entire group,
use the "-disable" option, for example:

timegroup "group_a" -disable

To disable a particular timegroup assignment, use the
"-disable" option with the "-add_member" or "-add_exception"
options, for example:

timegroup "group_a" -add_member "m1" -disable
timegroup "group_a" -add_exception "e1" -disable

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Make timing cut assignment from nodes starting
# with "r" except those starting with "r|s|"
# and except those starting with "r|t|"
# to nodes "t1", "t2", and "t3"
timegroup "tg1" -add_member "r*" -add_exception "r|s|*"
timegroup "tg1" -add_exception "r|t|*"

timegroup "tg2" -add_member [list "t1" "t2" "t3"]

set_timing_cut_assignment -from "group_a" -to "group_b" 2

# Remove the "t1" from a particular timegroup named "tg2"
timegroup "tg2" -remove_member "t1"

# Display the members of a particular timegroup named "tg1"
foreach_in_collection member [timegroup "tg1" -get_members] {

	# Print the name of the member
	puts $member
}

# Display the exceptions to a particular timegroup named "tg1"
foreach_in_collection exception [timegroup "tg1" -get_exceptions] {

	# Print the name of the exception
	puts $exception
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</timegroup>

<set_input_delay>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_input_delay [-h | -help] [-long_help] [-clk_ref <clock>] [-clock_fall] [-comment <comment>] [-disable] [-max] [-min] [-remove] -to <input_pin> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -clk_ref <clock>: Reference clock name
        -clock_fall: Option to specify that delay is relative to falling edge of reference clock
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -max: Option to set maximum delay
        -min: Option to set minimum delay
        -remove: Option to remove input delay requirement
        -to <input_pin>: Input pin name or input timegroup
        <value>: Input delay value after rise of reference clock
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Specifies the required minimum or maximum delay on the input 
pin or input timegroup as specified by the "-to" option. 
The Quartus II(R) timing analysis propagates this delay and 
checks it against the actual delay. For more information 
about timegroups, type "timegroup -h".

If both "-min" and "-max" options are not used, then the
assignment is set for both minimum and maximum delay.

The "-clock_fall" option specifies that the input delay is 
relative to the falling edge of the reference clock. The 
rising edge of the reference clock is the default.

The <value> is the input delay after the rise or fall of the 
reference clock. If you do not specify the "-clk_ref" option, 
all clocks are assumed to be reference clocks by default.

The format of <value> is "<numerical value><time unit>", 
for example, "7.55ns". 

The following table shows the available time units:

Time Unit                  Description
----------------------     ------------------
s                          second(s)
ms                         millisecond(s)
us                         microsecond(s)
ns                         nanosecond(s)
ps                         picosecond(s)
fs                         femtosecond(s)
Hz                         hertz
KHz                        kilohertz
MHz                        megahertz
GHz                        gigahertz

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify the required minimum and maximum input
## delays on the input pin named "ipin" relative to
## the rising edge of the reference clock named "clk1"
set_input_delay 2ns -to "ipin" -clk_ref "clk1"
## Or, equivalently,
set_input_delay 2ns -to "ipin" -clk_ref "clk1" -min -max

## Specify the required minimum input delay on 
## the input pin named "ipin" relative to the
## falling edge of the reference clock named "clk1"
set_input_delay 2ns -to "ipin" -clk_ref "clk1" -min -clock_fall

## Specify the required maximum input delay on
## input pins with names that start with "i"
## except those that start with "ibus"
timegroup "input_pins" -add_member "i*" -add_exception "ibus*"
set_input_delay 2ns -to "input_pins" -max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_input_delay>

<set_output_delay>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_output_delay [-h | -help] [-long_help] [-clk_ref <clock>] [-clock_fall] [-comment <comment>] [-disable] [-max] [-min] [-remove] -to <output_pin> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -clk_ref <clock>: Reference clock name
        -clock_fall: Option to specify that delay is relative to falling edge of reference clock
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -max: Option to set maximum delay
        -min: Option to set minimum delay
        -remove: Option to remove output delay requirement
        -to <output_pin>: Output pin name or output timegroup
        <value>: Delay value after rise of reference clock
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Specifies the required minimum or maximum delay on the output 
pin or output timegroup as specified by the "-to" option. 
The Quartus II(R) timing analysis propagates this delay and 
checks it against the actual delay. For more information 
about timegroups, type "timegroup -h".

If both "-min" and "-max" options are not used, then the
assignment is set for both minimum and maximum delay.

The "-clock_fall" option specifies that the output delay is 
relative to the falling edge of the reference clock. The 
rising edge of the reference clock is the default.

The <value> is the output delay after the rise or fall of the 
reference clock. If you do not specify the "-clk_ref" option, 
all clocks are assumed to be reference clocks by default.

The format of <value> is "<numerical value><time unit>", 
for example, "7.55ns".

The following table displays available time units:

Time Unit                  Description
----------------------     ------------------
s                          second(s)
ms                         millisecond(s)
us                         microsecond(s)
ns                         nanosecond(s)
ps                         picosecond(s)
fs                         femtosecond(s)
Hz                         hertz
KHz                        kilohertz
MHz                        megahertz
GHz                        gigahertz

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify the required minimum and maximum output
## delays on the output pin named "opin" relative to
## the rising edge of the reference clock named "clk1"
set_output_delay 2ns -to "opin" -clk_ref "clk1"
## Or, equivalently,
set_output_delay 2ns -to "opin" -clk_ref "clk1" -min -max

## Specify the required minimum output delay on 
## the output pin named "opin" relative to the
## falling edge of the reference clock named "clk1"
set_output_delay 2ns -to "opin" -clk_ref "clk1" -min -clock_fall

## Specify the required maximum output delay on
## output pins with names that start with "o"
## except those that start with "obus"
timegroup "output_pins" -add_member "o*" -add_exception "obus*"
set_output_delay 2ns -to "output_pins" -max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_output_delay>

<set_multicycle_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_multicycle_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-end] [-from <from_list>] [-hold] [-remove] [-setup] [-start] [-to <to_list>] <path_multiplier>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable multicycle assignment
        -end: Option to indicate that destination clock cycles should be considered for path multiplier
        -from <from_list>: List of clock names, node names, and/or timegroup names that represent start or source points of multicycle path, for example, {node1 node2 ...}
        -hold: Option to indicate that path multiplier is meant for hold
        -remove: Option to remove multicycle assignment
        -setup: Option to indicate that path multiplier is meant for setup
        -start: Option to indicate that source clock cycles must be considered for path multiplier
        -to <to_list>: List of clock names, node names, and/or timegroup names that represent end or destination points of multicycle path, for example, {node1 node2 ...}
        <path_multiplier>: Multicycle path multiplier
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Specifies that the given timing paths have multicycle setup 
or hold delays with the number of cycles specified by the 
"-path_multiplier" option. 

If neither the "-setup" nor "-hold" options are used, the 
"-setup" option is the default option. If neither the "-start" 
nor "-end" options are used, the "-end" option is the default 
option.

You must use either the "-from <from_list>" or "-to <to_list>" 
option.

Note that Quartus(R) II timing analysis is optimized to use
timegroups for timing constraints instead of a list of nodes.
Of the following two methods to make multicycle assignments, 
method (1) is the optimal method.

(1) timegroup "src_group" -add_member "s1"
    timegroup "src_group" -add_member "s2"
    timegroup "src_group" -add_member "s3"
    timegroup "dst_group" -add_member "d1"
    timegroup "dst_group" -add_member "d2"
    set_multicycle_assignment -from "src_group" -to "dst_group"

(2) set_multicycle_assignment -from {s1 s2 s3} -to {d1 d2}

For more information about timegroups, type "timegroup -h".

The meaning of multicycle hold differs between the Quartus II 
software timing analysis and the Synopsys PrimeTime software 
timing analysis. Refer to the online Help of each software for 
more information.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Multicycle "setup" from reg1 and reg2 to any destination points
timegroup "src_group" -add_member reg1
timegroup "src_group" -add_member reg2
set_multicycle_assignment 2 -setup -from "src_group"

## or
timegroup "src_group" -add_member reg1
timegroup "src_group" -add_member reg2
timegroup "dst_group" -add_member *
set_multicycle_assignment 2 -setup -from "src_group" -to "dst_group"

## Source multicycle "setup" to reg1 and reg2 from any source points 
timegroup "dst_group" -add_member reg1
timegroup "dst_group" -add_member reg2
set_multicycle_assignment 2 -setup -start -to "dst_group"

## or
timegroup "dst_group" -add_member reg1
timegroup "dst_group" -add_member reg2
timegroup "src_group" -add_member *
set_multicycle_assignment 2 -setup -start -from "src_group" -to "dst_group"

## Source multicycle "hold" from src1 to dst1 and dst2 and
## from src2 to dst1 and dst2
timegroup "src_group" -add_member src1
timegroup "src_group" -add_member src2
timegroup "dst_group" -add_member dst1
timegroup "dst_group" -add_member dst2
set_multicycle_assignment 2 -hold -from "src_group" -to "dst_group"

## Source multicycle "hold" from registers clocked by clk1
## to registers clocked by clk2
## Timegroups are useful for making assignments to
## more than one node. Timegroups are not necessary 
## for making an assignment from only one clock node  
## to another clock 
set_multicycle_assignment 2 -hold -start -from clk1 -to clk2

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Invalid path multiplier value: <string>.  Specify a positive integer value.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_multicycle_assignment>

<set_timing_cut_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_timing_cut_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-from <from_pin_list>] [-remove] [-to <to_pin_list>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -from <from_pin_list>: List of start or source node names and/or timegroup names for timing path, for example, {node1 node2 ...}
        -remove: Option to remove timing cut assignment
        -to <to_pin_list>: List of end node names and/or timegroup names for timing path, for example, {node1 node2 ...}
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Specifies that the timing paths that start from the designated 
<from_pin_list> and end in the designated <to_pin_list> are 
false paths.

Nodes for the <from_pin_list> can be input pins, internal nodes, 
clock pins, or timegroups. Nodes for the <to_pin_list> can be
output pins, internal nodes, clock pins, or timegroups.

You must use either the "-from <from_pin_list>" or the 
"-to <to_pin_list>" option.

Note that Quartus(R) II timing analysis is optimized to use
timegroups for timing constraints instead of a list of nodes.
Of the following two methods to make timing cut assignments, 
method (1) is the optimal method.

(1) timegroup "src_group" -add_member "s1"
    timegroup "src_group" -add_member "s2"
    timegroup "src_group" -add_member "s3"
    timegroup "dst_group" -add_member "d1"
    timegroup "dst_group" -add_member "d2"
    set_timing_cut_assignment -from "src_group" -to "dst_group"

(2) set_timing_cut_assignment -from {s1 s2 s3} -to {d1 d2}

For more information about timegroups, type "timegroup -h".

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set timing cut from any source points to dst1 and dst2
timegroup "dst_group" -add_member dst1
timegroup "dst_group" -add_member dst2
set_timing_cut_assignment -to "dst_group"

## or
timegroup "src_group" -add_member *
timegroup "dst_group" -add_member dst1
timegroup "dst_group" -add_member dst2
set_timing_cut_assignment -from "src_group" -to "dst_group"

## Set timing cut from src1 and src2 to any end points
timegroup "src_group" -add_member src1
timegroup "src_group" -add_member src2
set_timing_cut_assignment -from "src_group"

## or
timegroup "src_group" -add_member src1
timegroup "src_group" -add_member src2
timegroup "dst_group" -add_member *
set_timing_cut_assignment -from "src_group" -to "dst_group"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_timing_cut_assignment>

<project_new>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_new [-h | -help] [-long_help] [-family <family>] [-overwrite] [-part <part>] [-revision <revision_name>] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -family <family>: Family name
        -overwrite: Option to overwrite existing project and revision
        -part <part>: Part name
        -revision <revision_name>: Revision name
        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Creates and opens a new project with the specified project name.

If the "-revision" option is not specified, the project name 
is used to create the revision.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create project "chiptrip" and revision "chiptrip"
project_new chiptrip

## Create project "chiptrip" and revision "auto_max"
project_new -revision auto_max chiptrip

## Create project "chiptrip" and revision "chiptrip"
## Overwrite any Quartus II Settings File (.qsf) if it exists
project_new chiptrip -overwrite

## Create project "chiptrip" and revision "chiptrip"
## Set the FAMILY assignment to Stratix
project_new chiptrip -family Stratix

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: The "-<string>" option must also be used when you use the "-<string>" option. Specify both options.
TCL_ERROR	1   	ERROR: Can't create project: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name using the "-<string>" option.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name.
TCL_ERROR	1   	ERROR: Can't create settings files for project: <string>. Make sure the .psf, .csf, and .ssf files are writeable.
TCL_ERROR	1   	ERROR: Can't open project: <string>
TCL_ERROR	1   	ERROR: Can't remove Quartus II Settings File: <string>. Make sure the file is writeable.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Project already exists: <string>. Specify a different project name or use the "-overwrite" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_new>

<project_open>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_open [-h | -help] [-long_help] [-current_revision] [-error_on_incompatible_database] [-revision <revision_name>] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -current_revision: Option to open the current revision automatically
        -error_on_incompatible_database: Option not to open the project and issue and error if the database version is incompatible
        -revision <revision_name>: Revision name
        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Opens an existing project. To create a new project, use the 
"project_new" command.

If the "-revision" option is not specified, the project name
is used to open the revision.

By default, opening the project overwrites the database
created in a different version of the Quartus II software.
However, if the "-error_on_incompatible_database" option is
specified, instead of opening the project, an error is issued 
when the database version differs from the current version of the 
Quartus II software.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Open project "chiptrip" and revision "chiptrip"
project_open chiptrip

## Open project "chiptrip" and revision "auto_max"
project_open -revision auto_max chiptrip

## Get the current revision before opening
## the project with the current revision
set project_name chiptrip
set current_revision [get_current_revision $project_name]
project_open -revision $current_revision $project_name
puts [get_global_assignment -name FAMILY]
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Project is already open: <string>
TCL_ERROR	1   	ERROR: Can't open project: <string>. First close the currently open project: <string>.
TCL_ERROR	1   	ERROR: Can't open project: <string>
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Cannot open project: <string>. The project is not compatible with the installed version of the Quartus II software. Opening the project will overwrite the old project database. If you wish to overwrite the old project database, make sure to specify the -<string> option.
TCL_ERROR	1   	ERROR: Can't open revision: <string> (project: <string>). The revision is not compatible with the installed version of the Quartus II software. Opening the revision will overwrite the old revision database. If you wish to overwrite the old revision database, make sure to specify the -<string> option.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_open>

<set_current_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_current_revision [-h | -help] [-long_help] [-force] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -force: Option to open the revision and overwrite the compilation database if the database version is incompatible.
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Sets the specified revision name as the current revision.

In 8.1 or later versions of Quartus II software, set_current_revision
gives an error when the compilation database version is not
compatible with the current version of Quartus II software.
You may specify the "-force" option to avoid the error
and overwrite the database.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Sets "auto_max" as the current revision 
set_current_revision auto_max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Revision is already the current revision: <string>. No action is required.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision file does not exist: <string>.qsf. Use "delete_revision" to delete the revision from the current project. Then use "create_revision" to create the revision and its .qsf before setting <string> as the current revision.
TCL_ERROR	1   	ERROR: Revision is not included in the current project: <string> . Use the "create_revision" command to create the revision.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_current_revision>

<get_current_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_current_revision [-h | -help] [-long_help] [<project_name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns the name of the current revision for the specified 
project. If the project name is not specified, the current 
project name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the current revision name for
# the currently open project "chiptrip"
project_open chiptrip
set revision_name [get_current_revision]
project_close

# Get the current revision name for
# a project that is not currently open
set revision_name [get_current_revision chiptrip]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_current_revision>

<create_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_revision [-h | -help] [-long_help] [-based_on <revision_name>] [-copy_results] [-set_current] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -based_on <revision_name>: Revision name on which new revision bases its settings
        -copy_results: Option to copy results from "based_on" revision
        -set_current: Option to set new revision as current revision
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Creates the specified revision. If the revision is not 
included in the current project, a new revision is 
created in the project with default settings. 

If you specify the "-set_current" option, this command 
sets the newly created revision as the current revision.

If you specify the "-based_on" option, the command creates 
a new revision in the project based on the settings of the 
based-on revision specified by the option.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create a new revision called "tmp"
create_revision tmp

## Create a new revision called "tmp"
## and set it as the current revision
create_revision tmp -set_current
## This method is the same as 
create_revision tmp
set_current_revision tmp

## Create a new revision called "speed_ch"
## with settings based on "chiptrip"
## and set it as the current revision
create_revision speed_ch -based_on chiptrip -set_current

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Revision is already the current revision: <string>. No action is required.
TCL_ERROR	1   	ERROR: Based-on revision is not included in the current project: <string>. Make sure the based-on revision name is spelled correctly and included in the current project.
TCL_ERROR	1   	ERROR: Can't create revision because the current project uses the device family: <string>. Change the device family or create the revision in another project that uses a different device family.
TCL_ERROR	1   	ERROR: Can't create file: <string>. Make sure you have permission to write to the specified file.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name.
TCL_ERROR	1   	ERROR: Can't remove file: <string>. Make sure the file is not read-only and you have permission to write to the specified file.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Didn't create revision because it is already included in current project: <string>. If you want a new revision, specify a different revision name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_revision>

<delete_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: delete_revision [-h | -help] [-long_help] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Deletes the specified revision from the current project. The corresponding
<revision name>.qsf file is deleted as well.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Delete the revision called "tmp"
delete_revision tmp

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't delete the current revision: <string>. Specify a different revision name.
TCL_ERROR	1   	ERROR: Can't delete revision  because it is not included in the current project: <string> . Specify a revision name that is included in the project.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</delete_revision>

<revision_exists>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: revision_exists [-h | -help] [-long_help] [-project <project_name>] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -project <project_name>: Project name
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Checks whether the revision exists for the specified project
or currently open project. 

Returns 1, if the revision exists; returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Check if the specified revision exists
## in the specified project
if [revision_exists -ARG(project) chiptrip speed_ch] {
	puts "Revision exists"
} else {
	puts "Revision does not exist"
}

## Create revision for the currently open 
## project if it does not exist
## Set the current revision otherwise
project_open chiptrip
if [revision_exists speed_ch] {
	set_current_revision speed_ch
} else {
	create_revision speed_ch
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</revision_exists>

<get_project_revisions>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_project_revisions [-h | -help] [-long_help] [<project_name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns a list of revisions included in the specified project.
If the project name is not specified, the current project name
is used by default.

The first element in the list of revisions is the current
revision and is the same as the return value for the
"get_current_revision" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Set the device family assignment to Stratix 
# for all revisions
project_open chiptrip
set original_revision [get_current_revision]

foreach revision [get_project_revisions] {
	puts "$revision"
	set_current_revision $revision
	set_global_assignment -name FAMILY Stratix
	export_assignments
}

set_current_revision $original_revision
project_close

# Open the project with the first available revision 
# and set the device family assignment to Stratix
set revision [lindex [get_project_revisions chiptrip] 0]
open_project -revision $revision chiptrip
set_global_assignment -name FAMILY Stratix
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_project_revisions>

<export_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: export_assignments [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Exports assignments for the current revision to the Quartus II 
Settings File (.qsf).

Assignments created or modified during an open project are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## The most common use of export_assignments is to
## call it before doing a system call
## to call a compiler command-line executable
project_open $project_name
set_global_assignment -name FAMILY Stratix

## Before calling quartus_map, 
## write out the FAMILY assignment
export_assignments

## Now, call quartus_map
qexec "[file join $::quartus(binpath) quartus_map] $project_name"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</export_assignments>

<get_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_names [-h | -help] [-long_help] -filter <wildcard> [-node_type <all|comb|reg|pin|input|output|bidir|hierarchy|mem|bus|qsf>] [-observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -filter <wildcard>: Option to specify the node's full path name and/or wildcard character(s)
        -node_type <all|comb|reg|pin|input|output|bidir|hierarchy|mem|bus|qsf>: Option to filter based on the specified node type.
        -observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>: Option to filter based on the specified observable type
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns a filtered output collection of all matching
node name IDs found in a compiled Quartus(R) II project. 

To access each element of the output collection, use the Tcl 
command "foreach_in_collection". To see example usage, type 
"get_names -long_help" or "foreach_in_collection -long_help".

If the "-node_type" option is not specified, the default
value is "all". Similarly, if the "-observable_type" option
is not specified, the default value is "all".

The node type "pin" includes "input", "output", and "bidir".
The node type "qsf" include names from qsf settings file.
The node type "all" includes all node types.
 
The value for "-observable_type" option can be one of 
the following:

Observable Type      Description
---------------      -----------------------------------
all                  Use post-Fitter information. If it is
                     not available, post-Synthesis
                     information is used. Otherwise,
                     pre-synthesis information is used if it
                     exists.
pre_synthesis        Use pre-synthesis information.
post_synthesis       Use post-synthesis information.
post_fitter          Use post-Fitter information.
post_asm             Use post-Assembler information. The
                     post-Assembler information is only supported
                     for designs using the HardCopy II device family.
stp_pre_synthesis    Use SignalTap II pre-synthesis information.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Search for a single post-Fitter pin with the name accel and 
# make assignments
set accel_name_id [get_names -filter accel -node_type pin -observable_type post_fitter]
foreach_in_collection name_id $accel_name_id {

	# Get the full path name of the node
	set target [get_name_info -info full_path $name_id]

	# Set multicycle assignment
	set_multicycle_assignment -to $target 2

	# Set location assignment
	set_location_assignment -to $target Pin_E22
}
# Search for nodes of any post-Fitter node type with name length <= 5
# The default node type is "all"
set name_ids [get_names -filter ????? -observable_type post_fitter]
foreach_in_collection name_id $name_ids {

	# Print the name id
	puts $name_id

	# Print the node type
	puts [get_name_info -info node_type $name_id]

	# Print the full path (which excludes the current
	# focus entity from the path)
	puts [get_name_info -info full_path $name_id]
}
# Search for nodes of any post-Fitter node type that end in "eed".
# The default node type is "all"
set name_ids [get_names -filter *eed -observable_type post_fitter]
foreach_in_collection name_id $name_ids {

	# Print the name id
	puts $name_id

	# Print the node type
	puts [get_name_info -info node_type $name_id]

	# Print the full path (which excludes the current
	# focus entity from the path)
	puts [get_name_info -info full_path $name_id]
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Illegal node type: <string>.  Specify "all", "comb", "reg", "pin", "hierarchy", or "bus".
TCL_ERROR	1   	ERROR: Illegal observable type: <string>.  Specify "all", "pre_synthesis", "post_synthesis", or "post_fitter".
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Post-Assembler compiler database does not exist for revision name: <string>. Run Assembler (quartus_asm) with the specified revision name before using this Tcl command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_names>

<get_name_info>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_name_info [-h | -help] [-long_help] [-get_synonyms] [-info <parent_name_id|base_name|entity_name|instance_name|full_path|short_full_path|node_type|creator|signaltapii|file_location>] [-observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>] [-use_cached_database] <name_id>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -get_synonyms: Option to get a Tcl list of synonym name ids. This is an advanced Quartus II Tcl option.
        -info <parent_name_id|base_name|entity_name|instance_name|full_path|short_full_path|node_type|creator|signaltapii|file_location>: Option to specify the type of information to display.
        -observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>: Option to specify the observable type of the name ID
        -use_cached_database: Option not to check the compilation database for updates. Use this option only if you do not compile the project after getting the name IDs from "get_names" command. If you compile the project, you must re-run "get_names" command again to refresh the cached database information before using this option. This is an advanced Quartus II Tcl option.
        <name_id>: Option to specify the node name ID
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Displays the specified type of information for the specified node 
name id. Type "get_names -long_help" to view how to get a collection 
of node name IDs.

If the "-observable_type" option is not specified, the default 
value is "all". The specified observable type must have the same 
observable type as specified in the "get_names" Tcl command which 
returned the currently specified node name id.

The value for "-observable_type" option can be one of 
the following:

Observable Type      Description
---------------      -----------------------------------
all                  Use post-Fitter information. If it is
                     not available, post-synthesis
                     information is used. Otherwise,
                     pre-synthesis information is used if it
                     exists.
pre_synthesis        Use pre-synthesis information.
post_synthesis       Use post-synthesis information.
post_fitter          Use post-Fitter information.
post_asm             Use post-Assembler information. The
                     post-Assembler information is only supported
                     for designs using the HardCopy II device family.
stp_pre_synthesis    Use SignalTap II pre-synthesis information.


The info type for the "-info" option can be one of 
the following:

Info Type            Description
--------------       -----------------------------------
parent_name_id       The name id for the node's parent.
base_name            The node name, which consists of an 
                     entity name and/or an instance name 
                     separated by a colon if necessary.
entity_name          The entity name.
instance_name        The instance name.
full_path            The full hierarchy path name, which 
                     consists of entity name(s) and/or the 
                     instance name(s). This path name 
                     excludes the current focus entity.
                     If there is nothing shown, the
                     name id is the current focus entity's 
                     name id.
short_full_path      The short full hierarchy path name, 
                     which consists of the instance name(s).
                     This path name excludes the current 
                     focus entity. If nothing is 
                     shown, the name id is the
                     current focus entity's name id.
node_type            The node type, which can be one of 
                     the types supported by "get_names",
                     namely, "input", "output", "bidirectional",
                     "register", "combinational",
                     "hierarchy", "memory", or "bus".
                     If "pin" type was specified for 
                     "get_names" command, the node type shown
                     here is expanded to be "input", "output", or
                     "bidirectional".
                     Node type value of "qsf" indicates name 
                     originates from qsf settings file.
creator              The creator of the node, which is either
                     "user_entered" or "compiler_generated".
signaltapii          If this node can be connected to a
                     SignalTap(R) II embedded logic analyzer, 
                     1 is shown. Otherwise, 0 is shown.
file_location        The source file location. For example,
                     the source file location for the entity
                     chiptrip is "chiptrip.v". To get the full
                     path to the source file, use the command
                     "resolve_file_path" which exists only in
                     version 4.0 or later of ::quartus::project
                     package.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the name id of the current focus entity
set current_focus_entity_id [get_top_level_entity]

# The full path name of the current focus entity
# is empty because the full path excludes the 
# current focus entity
set msg "Full path of the current focus entity => ("
append msg [get_name_info -info full_path $current_focus_entity_id]
append msg ")"
puts $msg
puts ""

# Get the node type of the current focus entity
# The node type should be a hierarchy type
set msg "Node type of the current focus entity => ("
append msg [get_name_info -info node_type $current_focus_entity_id]
append msg ")"
puts $msg

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Illegal info type: <string>.  Specify "parent_name_id", "base_name", "entity_name", "instance_name", "full_path", "short_full_path", "node_type", "creator", or "signaltapii".
TCL_ERROR	1   	ERROR: Illegal name id: <string>.  Specify a name id that exists in a compiled Quartus II project.
TCL_ERROR	1   	ERROR: Invalid name id: <string>.  Specify an integer greater than or equal to zero.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Post-Assembler compiler database does not exist for revision name: <string>. Run Assembler (quartus_asm) with the specified revision name before using this Tcl command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_name_info>

<get_top_level_entity>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_top_level_entity [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns the name id for the current focus entity.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the name id of the current focus entity
set current_focus_entity_id [get_top_level_entity]

# Print out the entity name of the current focus entity
set msg "Entity name of the current focus entity => ("
append msg [get_name_info -info entity_name $current_focus_entity_id]
append msg ")"
puts ""
puts $msg

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_top_level_entity>

<get_all_assignment_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_assignment_names [-h | -help] [-long_help] [-family <family>] [-module <all|map|fit|tan|asm|eda|drc|generic>] [-type <all|global|instance>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -family <family>: Option to filter based on the specified device family. Defaults to all families.
        -module <all|map|fit|tan|asm|eda|drc|generic>: Option to filter based on the specified flow module. Defaults to all.
        -type <all|global|instance>: Option to filter based on the specified assignment type. Defaults to all.
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns a filtered output list of all available, matching
assignment names.

The module option takes one of the following values:

Module           Description
--------         -------------------------------------
map              Analysis & Synthesis assignment names
fit              Fitter assignment names
tan              Classic Timing Analyzer assignment names
asm              Assembler assignment names
eda              EDA Netlist Writer assignment names
drc              Design Assistant assignment names
generic          Other assignment names not included in any 
                 of the above flow modules
all              All assignment names
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all available global assignments
foreach i [get_all_assignment_names -type global] {
    puts $i
}

## Print out all available global assignments
## for the Stratix family
foreach i [get_all_assignment_names -type global -family Stratix] {
    puts $i
}

## Print out all available global assignments
## for the Stratix family required
## by the Analysis & Synthesis module
foreach i [get_all_assignment_names -type global -family Stratix -module map] {
    puts $i
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal flow module: <string>.  Specify "<string>", "<string>", "<string>", "<string>", "<string>", "<string>", "<string>", or "<string>".
TCL_ERROR	1   	ERROR: Illegal type: <string>.  Specify "<string>", "<string>", or "<string>".
TCL_ERROR	1   	ERROR: Illegal device family: <string>.  Specify a legal device family.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_assignment_names>

<set_user_option>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_user_option [-h | -help] [-long_help] -name <name> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name
        <value>: User option value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Sets the user option value for the name specified by
the "-name" option. The user option is written to
the quartus2.ini file.

To get a list of all available user option names, use
the "get_all_user_option_names" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set TALKBACK_ENABLED to "on"
set_user_option -name TALKBACK_ENABLED on

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal user option name: <string>. Specify a legal user option name. To get a list of legal names, use the "get_all_user_option_names" command.
TCL_ERROR	1   	ERROR: Illegal user option value: <string>. Specify a legal user option value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_user_option>

<get_user_option>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_user_option [-h | -help] [-long_help] -name <name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns the user option value for the name specified by
the "-name" option.

To get a list of all available user option names, use
the "get_all_user_option_names" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the value for the user option
## "TALKBACK_ENABLED"
set value [get_user_option -name TALKBACK_ENABLED]
puts "TALKBACK_ENABLED = $value"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal user option name: <string>. Specify a legal user option name. To get a list of legal names, use the "get_all_user_option_names" command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_user_option>

<get_all_user_option_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_user_option_names [-h | -help] [-long_help] [-name <name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Returns a filtered output list of all available, matching
user option names.

If the "-name" option is not specified, all available user
option names are returned. Otherwise, only the matching
user option names are returned.

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all available user option names
foreach i [get_all_user_option_names] {
    puts $i
}

## Display all user option names that contain
## the word "talkback" and also display the 
## value for each of the user option names
foreach i [get_all_user_option_names -name *talkback*] {
	set name $i
	set value [get_user_option -name $i]
    puts "$name = $value"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_user_option_names>

<set_clock_uncertainty>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_clock_uncertainty [-h | -help] [-long_help] [-comment <comment>] [-disable] [-from <src_clock_name>] [-hold] [-remove] [-setup] -to <dst_clock_name> <value>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -from <src_clock_name>: Source clock name
        -hold: Option to specify hold time uncertainty
        -remove: Option to remove assignment
        -setup: Option to specify setup time uncertainty
        -to <dst_clock_name>: Destination clock name
        <value>: Amount of expected clock jitter
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 3.0

------------
Description:
------------

Specifies simple or interlock clock uncertainty (or clock
jitter) used during setup and/or hold time analysis. The optional
source clock <src_clock_name> is specified for interlock
uncertainty and is not specified for simple uncertainty.

You may specify the -setup option, the -hold option, or 
neither. If neither is specified, then the command applies 
to both setup and hold.

The <value> is the expected amount of clock jitter.
The format of <value> is "<numerical value><time unit>", 
for example, "0.5ns". 

The following table displays available time units:

Time Unit                  Description
----------------------     ------------------
s                          second(s)
ms                         millisecond(s)
us                         microsecond(s)
ns                         nanosecond(s)
ps                         picosecond(s)
fs                         femtosecond(s)
Hz                         hertz
KHz                        kilohertz
MHz                        megahertz
GHz                        gigahertz

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify a simple setup uncertainty of .3ns
## and a simple hold uncertainty of .1ns
set_clock_uncertainty 0.3ns -to clk -setup
set_clock_uncertainty 0.1ns -to clk -hold

## Both of the following commands specify a
## simple setup and hold uncertainty of .3ns
set_clock_uncertainty 0.3ns -to clk
## or
set_clock_uncertainty 0.3ns -to clk -setup -hold

## Specify an interlock setup uncertainty of .3ns
## and an interlock hold uncertainty of .1ns
set_clock_uncertainty 0.3ns -to clk -from src_clk -setup
set_clock_uncertainty 0.1ns -to clk -from src_clk -hold

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal value: <string> -- Specify a positive time value.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_clock_uncertainty>

<<<</3.0>>>>
<<<<4.0>>>>
<is_project_open>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: is_project_open [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Checks whether a project is currently open. Returns 1, if a 
project is currently open; returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Close the project if open
if [is_project_open] {
   project_close
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</is_project_open>

<project_close>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_close [-h | -help] [-long_help] [-dont_export_assignments]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -dont_export_assignments: Do not export assignments to file
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Closes an open project.

The assignments created or modified during an open project
are committed to the Quartus II Settings File (.qsf) during a 
"project_close", unless you use the "-dont_export_assignments"
option.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Close the project if open
if [is_project_open] {
   project_close
}
## Close the project if open
## and do not export the assignments
if [is_project_open] {
   project_close -dont_export_assignments
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_close>

<project_exists>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_exists [-h | -help] [-long_help] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Checks whether a project exists. Returns 1, if a project exists; 
returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create project if one does not exist.
## Open existing project otherwise.
if [project_exists chiptrip] {
	project_open chiptrip
} else {
	project_new chiptrip
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_exists>

<project_archive>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_archive [-h | -help] [-long_help] [-all_revisions] [-include_libraries] [-include_outputs] [-overwrite] [-use_file_set <file_set>] [-version_compatible_database] <archive_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -all_revisions: Option to archive all revisions
        -include_libraries: Option to include related system libraries
        -include_outputs: Option to include output files in archive
        -overwrite: Option to overwrite any currently existing archive file
        -use_file_set <file_set>: Option to create the archive using the specified file set
        -version_compatible_database: Option to include version-compatible database if supported
        <archive_name>: Archive file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Archives an open project and its related files into a
Quartus II Archive File (.qar).

The description of operations is as follows:

Option        Description
------        -------------------------
use_file_set  

              Creates the archive using the specified
              file set. By default, the 'basic'
              file set is used. For more information
              about file sets, type:

                 quartus_sh --archive -list_file_sets

all_revisions

              Archives all revisions.

overwrite

              Overwrites existing archive file.

include_outputs

              Includes output files in archive.

include_libraries

              Includes related Megafunction and
              IP library files.

version_compatible_database

              Includes version-compatible database
              if supported.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Default mode: Archive current revisions without output files or libraries
project_archive chiptrip.qar

## Archive all revisions without output files or libraries
project_archive chiptrip.qar -all_revisions

## Archive current revision with version-compatible database if supported
project_archive chiptrip.qar -version_compatible_database

## Same as first one, but overwrite any existing archive file
project_archive chiptrip.qar -overwrite

## Include outut files and libraries
project_archive chiptrip.qar -include_outputs -include_libraries

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Error(s) found while archiving the project. See error message(s) for details.
TCL_ERROR	1   	ERROR: Project archive failed. Some files could not be processed. Refer to the Quartus II Archive Log File (<archive_name>.qarlog).
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_archive>

<project_restore>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_restore [-h | -help] [-long_help] [-destination <directory>] [-overwrite] [-update_included_file_info] <archive_file>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -destination <directory>: Directory where restored files are placed
        -overwrite: Option to overwrite files in destination directory
        -update_included_file_info: Option to update included file information
        <archive_file>: Archive file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Restores a Quartus II Archive File (.qar) that contains 
the project and its related files.

By default, the archive is restored into the current
directory. Use the "-destination" option to restore the 
files into a new directory.

By default, the command fails if the archive already 
contains files in the destination directory. Use the 
"-overwrite" option to overwrite any existing files 
in the destination directory.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Restore archive and expand files into current directory
project_restore chiptrip.qar
## or
project_restore chiptrip.qar -destination 

## Restore archive. Expand files into current directory, 
## but overwrite any existing files in "."
project_restore chiptrip.qar -destination . -overwrite

## Restore project into a "restored" subdirectory
project_restore chiptrip.qar -destination "restored" -overwrite

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Error(s) found while restoring the archive. See error message(s) for details.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_restore>

<get_all_quartus_defaults>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_quartus_defaults [-h | -help] [-long_help] [-name <name>] [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns a filtered output collection of all matching default
assignment values. To access each element of the output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads in the default assignments found inside
the Quartus II Default Settings File (.qdf). It filters the 
assignments data found inside the .qdf and outputs the data 
based on the values specified by the "-name" option.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Assignment name>} {<Assignment value>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the default assignments using
## the foreach_in_collection method

set default_asgns_col [get_all_quartus_defaults]
foreach_in_collection default $default_asgns_col {
	set sect_id [lindex $default 0]
	set name [lindex $default 1]
	set value [lindex $default 2]

	## Now, display the content of the assignment
	puts "Section ID ($sect_id)"
	puts "Assignment Name ($name)"
	puts "Assignment Value ($value)"
}

## Using wildcards
set default_asgns_col [get_all_quartus_defaults -name *]
foreach_in_collection default $default_asgns_col {
	set sect_id [lindex $default 0]
	set name [lindex $default 1]
	set value [lindex $default 2]

	## Now, display the content of the assignment
	puts "Section ID ($sect_id)"
	puts "Assignment Name ($name)"
	puts "Assignment Value ($value)"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_quartus_defaults>

<set_parameter>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_parameter [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] -name <name> [-remove] [-to <destination>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable parameter
        -entity <entity_name>: Entity to which to add parameter
        -name <name>: Parameter name
        -remove: Option to remove parameter
        -to <destination>: Destination of parameter
        <value>: Parameter value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Sets or removes the specified parameter name.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

The parameters created or modified by using this Tcl command are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.

Use the "-entity" option to force the parameter to the specified
entity. If the "-entity" option is not specified, the value for 
the FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

A parameter is an attribute of a megafunction, macrofunction,
or certain primitives that determines the logic created or used
to implement the function. The parameter information can be 
used to determine the actual primitives and other subdesigns 
needed to implement the logic of the function.

The following general guidelines apply to parameters:

*  All logic options can be assigned as parameters for individual
   instances of megafunctions or macrofunctions. For a given 
   logic OPTION the precedence for parameters is:

      1) Instance specific logic option settings
      2) Instance specific parameter settings
      3) Project-wide default parameter settings

*  You cannot assign a value to the predefined Altera(R) 
   parameter DEVICE_FAMILY, which represents the device family 
   assigned for the project. However, you can use the parameter 
   value in comparisons.

*  The predefined Altera LPM_PIPELINE and LATENCY parameters 
   can be assigned to an instance of a megafunction or 
   macrofunction. However, the parameter applies only to that 
   instance, and is not inherited by the subdesigns of that 
   instance.

*  All logic options can be assigned as parameters for individual
   megafunctions or macrofunctions. However, logic options cannot 
   be assigned global, project-wide default parameter values.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set project-wide, default WIDTH parameter value
set_parameter -name WIDTH 8

## Set entity-specific SIZE parameter value
## to "my_ram" entity
set_parameter -entity my_ram -name SIZE 16

## Specify the same parameter to my_ram
## but inside "top_level" entity
set_parameter -entity top_level -to my_ram -name SIZE 16

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Removed parameter: <string>
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Parameter does not exist and cannot be removed: <string>. Specify an existing parameter name.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_parameter>

<get_parameter>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_parameter [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name
        -to <destination>: Destination of parameter
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns the value of the parameter.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function returns the 
parameter value for the current entity. The value is retrieved 
from the PARAMETERS section of the entity. Otherwise, the 
function returns the project-wide default parameter value
obtained from the DEFAULT_PARAMETERS section.

Use the "-entity" option to retrieve the parameter from the 
specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get project-wide, default parameter value
get_parameter -name WIDTH

## Get entity-specific parameter value
get_parameter -name inst1 -to SIZE

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_parameter>

<get_all_parameters>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_parameters [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name (string pattern is matched using Tcl string matching)
        -to <destination>: Destination of the parameter (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns a filtered output collection of all matching parameter 
values. To access each element of this output collection, use 
the Tcl command "foreach_in_collection". To see example usage, 
type "foreach_in_collection -long_help".

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function returns 
the parameter values for the current entity. The values are 
retrieved from the PARAMETERS section of the entity. Otherwise,
the function returns the project-wide default parameter values
obtained from the DEFAULT_PARAMETERS section.

This Tcl command filters the parameter data found in the
Quartus II Settings File (.qsf) and outputs the data based on
the values specified by the "-name" and "-to" options. These
options can take string patterns containing special characters
from the set "*?\[]" as values. The values are matched using
Tcl string matching. Note that bus names are automatically
detected and do not need to be escaped. Bus names have the
following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
get_all_parameters -name * -to a[0]

# To match all indices of bus "a", type:
get_all_parameters -name * -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

get_all_parameters -name * -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

Each element of the collection is a list with the following 
format:
{ {<Destination>} {<Parameter name>} {<Parameter value>} }

Use the "-entity" option to retrieve the parameter values from
the specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Display all project-wide default parameter values
foreach_in_collection parameter [get_all_parameters -name *] {

	set name [lindex $parameter 1]
	set value [lindex $parameter 2]

	## Now, display the content of the parameter
	puts "Parameter Name ($name)"
	puts "Parameter Value ($value)"
}

## Display all entity-specific parameter values
foreach_in_collection parameter [get_all_parameters -name * -to *] {

	set dest [lindex $parameter 0]
	set name [lindex $parameter 1]
	set value [lindex $parameter 2]

	## Now, display the content of the parameter
	puts "Destination ($dest)"
	puts "Parameter Name ($name)"
	puts "Parameter Value ($value)"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_parameters>

<remove_all_parameters>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_parameters [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name (string pattern is matched using Tcl string matching)
        -to <destination>: Destination of the parameter (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Removes all matching parameters.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function removes 
the parameters from the current entity. The parameters are 
removed from the PARAMETERS section of the entity. Otherwise,
the function removes the project-wide default parameters
obtained from the DEFAULT_PARAMETERS section.

This Tcl command filters the parameter data found in the
Quartus II Settings File (.qsf) and removes the data based on
the values specified by the "-name" and "-to" options. These
options can take string patterns containing special characters
from the set "*?\[]" as values. The values are matched using
Tcl string matching. Note that bus names are automatically
detected and do not need to be escaped. Bus names have the
following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
remove_all_parameters -name * -to a[0]

# To match all indices of bus "a", type:
remove_all_parameters -name * -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

remove_all_parameters -name * -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

Use the "-entity" option to remove the parameters from the 
specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.

The parameters removed by using this Tcl command are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## The following 3 examples remove project-wide,
## default parameter values
remove_all_parameters -name WIDTH
remove_all_parameters -name *ID*
remove_all_parameters -name *

## The following 3 examples remove entity-specific
## parameter values
remove_all_parameters -name inst1 -to SIZE
remove_all_parameters -name inst1 -to *IZ*
remove_all_parameters -name inst1 -to *

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> parameter(s) were removed
TCL_OK   	0   	INFO: Removed parameter: <string>
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Parameter does not exist and cannot be removed: <string>. Specify an existing parameter name.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_parameters>

<set_global_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_global_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] -name <name> [-remove] [-section_id <section id>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -entity <entity_name>: Entity to which to add assignment
        -name <name>: Assignment name
        -remove: Option to remove assignment
        -section_id <section id>: Section id
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Sets or removes a global assignment.

Assignments created or modified by using this Tcl command are not
saved to the Quartus II Settings File (.qsf) unless you explicitly
call one of the following two Tcl commands (from the
::quartus::project Tcl package):

1) export_assignments 
2) project_close (unless -dont_export_assignments is specified as an
argument to project_close)

You must save assignment changes before you run Quartus(R) II
command-line executables. Note, however, that the Tcl commands
execute_flow and execute_module (from the ::quartus::flow Tcl
package) call "export_assignments" before they run
command-line executables.

For entity-specific assignments, use the -entity option to force the
assignment to specified entity. If the -entity option is not
specified, the value for the FOCUS_ENTITY_NAME assignment is used. If
the FOCUS_ENTITY_NAME value is not found, the revision name is used.

If the Quartus II Settings File contains a USER_LIBRARIES assignment
and you call set_global_assignment to set a SEARCH_PATH or
USER_LIBRARIES assignment, the existing USER_LIBRARIES assignment
expands into one or more SEARCH_PATH assignments.

Note that values that begin with a dash ("-") should be enclosed in a
backslash followed by a quote. In the following example, -02 is
enclosed by \" at the beginning and the end.

set_global_assignment -name ARM_CPP_COMMAND_LINE \"-O2\"
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify Stratix as the family to use when compiling
set_global_assignment -name FAMILY Stratix

## If the family name has empty spaces, use quotes
set_global_assignment -name FAMILY "Stratix GX"

## or remove any empty space
set_global_assignment -name FAMILY StratixGX

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: File name "<string>" exceeds maximum of <string> characters. Specify a file name with fewer characters.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> cannot be removed -- it has multiple values. Specify one value to remove or use the "<string>" command to remove all values for the assignment.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_global_assignment>

<get_global_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_global_assignment [-h | -help] [-long_help] [-entity <entity_name>] [-front] -name <name> [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -front: Option to return the first assignment if there is more than one assignment found
        -name <name>: Assignment name
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns the value of the global assignment.

The "-name" option is not case sensitive.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the value of the FAMILY assignment
get_global_assignment -name FAMILY

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> has multiple values. Use the "<string>" command to get all values or use the "<string> -front" command to get the first value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_global_assignment>

<get_all_global_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_global_assignments [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns a filtered output collection of all matching global
assignment values. To access each element of the output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads the global assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignment data in the .qsf and outputs the data based 
on the values given by the "-name" option.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Assignment name>} {<Assignment value>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the registered source files
## using the foreach_in_collection method
set file_asgn_col [get_all_global_assignments -name SOURCE_FILE]
foreach_in_collection file_asgn $file_asgn_col {

    ## Each element in the collection has the following
    ## format: {} {SOURCE_FILE} {<file_name>}
    puts [lindex $file_asgn 2]
}

# Using wildcards
get_all_global_assignments -name SOURCE*

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_global_assignments>

<remove_all_global_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_global_assignments [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Removes all matching global assignments.

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads the global assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignments data found in the .qsf and removes the data
based on the values specified by the "-name" option.

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
remove the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

Assignments removed by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Remove all the registered source files

remove_all_global_assignments -name SOURCE_FILE

# Using wildcards
remove_all_global_assignments -name SOURCE*

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> global assignment(s) were removed
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_global_assignments>

<set_instance_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_instance_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] [-fall] [-from <source>] -name <name> [-remove] [-rise] [-section_id <section id>] [-to <destination>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -entity <entity_name>: Entity to which to add assignment
        -fall: Option applies to falling edge
        -from <source>: Source of assignment
        -name <name>: Assignment name
        -remove: Option to remove assignment
        -rise: Option applies to rising edge
        -section_id <section id>: Section id
        -to <destination>: Destination of assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Sets or removes an instance assignment.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If the "-entity" 
option is not specified, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify a TSU_REQUIREMENT of 2ns from mypin to any register
set_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT 2ns

## Remove the TSU_REQUIREMENT from mypin to all registers
set_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT -remove

## Specify the entity to which the assignment is added, 
## use the -entity option
## This is needed if the top-level entity name is other than
## that of the project name
## The following command generates a top_level entity
set_instance_assignment -from "mypin" -to * -entity top_level -name TSU_REQUIREMENT 2ns

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> cannot be removed -- it has multiple values. Specify one value to remove or use the "<string>" command to remove all values for the assignment.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_instance_assignment>

<get_instance_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_instance_assignment [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] [-front] -name <name> [-section_id <section id>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of assignment
        -front: Option to return the first assignment if there is more than one assignment found
        -name <name>: Assignment name
        -section_id <section id>: Section id
        -to <destination>: Destination of assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns the value of the instance assignment.

The "-name" option is not case sensitive.
The "-entity", "-to", and "-from" options are case sensitive.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the TSU_REQUIREMENT from mypin to any register
set value [get_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT]
puts "TSU_REQUIREMENT(mypin->*) = $value"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> has multiple values. Use the "<string>" command to get all values or use the "<string> -front" command to get the first value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_instance_assignment>

<get_all_instance_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_instance_assignments [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] -name <name> [-section_id <section id>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of assignment (string pattern is matched using Tcl string matching)
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -to <destination>: Destination of assignment (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns a filtered output collection of all matching instance
assignment values. To access each element of this output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

The "-name" option is not case sensitive.
The "-to" and "-from" options are case sensitive.

These options can take string patterns containing special 
characters from the set "*?\[]" as values. The values are 
matched using Tcl string matching. Note that bus names are
automatically detected and do not need to be escaped. Bus
names have the following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
get_all_instance_assignments -name LOCATION -to a[0]

# To match all indices of bus "a", type:
get_all_instance_assignments -name LOCATION -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

get_all_instance_assignments -name LOCATION -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

This Tcl command reads in the instance assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignments data found in the .qsf and outputs the 
data based on the values specified by the "-name", "-from", 
and "-to" options.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Source>} {<Destination>} {<Assignment name>} {<Assignment value>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the timing requirements
## using the foreach_in_collection method
## Use wildcards to catch TSU_REQUIREMENT, TCO_REQUIREMENT,
## and others
set asgn_col [get_all_instance_assignments -name *_REQUIREMENT]
foreach_in_collection asgn $asgn_col {

    ## Each element in the collection has the following
    ## format: { {} {<Source>} {<Destination>} {<Assignment name>} {<Assignment value>} }
    set from  [lindex $asgn 1]
    set to    [lindex $asgn 2]
    set name  [lindex $asgn 3]
    set value [lindex $asgn 4]
    puts "$name ($from -> $to) = $value"
}

## Print out all the location assignments with
## the destination bus name "timeo".
set bus_name "timeo"
get_all_instance_assignments -name LOCATION -to $bus_name[*]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_instance_assignments>

<remove_all_instance_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_instance_assignments [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] -name <name> [-section_id <section id>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of the assignment (string pattern is matched using Tcl string matching)
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -to <destination>: Destination of the assignment (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Removes all matching instance assignment values.

The "-name" option is not case sensitive.
The "-to" and "-from" options are case sensitive.

These options can take string patterns containing special 
characters from the set "*?\[]" as values. The values are 
matched using Tcl string matching. Note that bus names are
automatically detected and do not need to be escaped. Bus
names have the following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
remove_all_instance_assignments -name LOCATION -to a[0]

# To match all indices of bus "a", type:
remove_all_instance_assignments -name LOCATION -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

remove_all_instance_assignments -name LOCATION -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

This Tcl command reads the instance assignments found in
the Quartus II Settings File (.qsf) and removes this data based 
on the values specified by the "-name", "-from", and "-to"
options.

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
remove the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

Assignments removed by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Remove all the timing requirements
## Use wildcards to catch TSU_REQUIREMENT, TCO_REQUIREMENT,
## and others
remove_all_instance_assignments -name *_REQUIREMENT

## Remove all the location assignments with
## the destination bus name "timeo".
set bus_name "timeo"
remove_all_instance_assignments -name LOCATION -to $bus_name[*]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> instance assignment(s) were removed
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_instance_assignments>

<set_location_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_location_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-remove] -to <destination> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -remove: Option to remove assignment
        -to <destination>: Destination of assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Sets or removes a location assignment.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

set_location_assignment -to dst LOC

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_location_assignment>

<get_location_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_location_assignment [-h | -help] [-long_help] -to <destination>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -to <destination>: Destination of assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns the value of a location assignment.

The "-chip" option is not case sensitive.
The "-to" option is case sensitive.
<<<long_help_section>>>

--------------
Example Usage:
--------------

get_location_assignment -to dst		

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_location_assignment>

<create_base_clock>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_base_clock [-h | -help] [-long_help] [-comment <comment>] [-disable] [-duty_cycle <integer>] [-entity <entity>] -fmax <fmax> [-no_target] [-target <name>] [-virtual] <clock_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -duty_cycle <integer>: Duty cycle
        -entity <entity>: Entity to which to add clock assignment
        -fmax <fmax>: Clock frequency
        -no_target: Option to not assign clock to node
        -target <name>: Clock node name
        -virtual: Option to specify the clock as a virtual clock
        <clock_name>: Clock name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Creates the base clock. The base clock is an absolute clock.

The "-fmax" option can take the format:

<floating point time value><time unit>

For example, if the fmax is 10.55ns, "10.55" is the
<floating point time value> and "ns" is the <time unit>.

The following table displays possible time units:

Time Unit                 Description
---------                 --------------
s                         second(s)
ms                        millisecond(s)
us                        microsecond(s)
ns                        nanosecond(s)
ps                        picosecond(s)
fs                        femtosecond(s)
Hz                        hertz
KHz                       kilohertz
MHz                       megahertz
GHz                       gigahertz

If you specify the "-virtual" option, the base clock
is not assigned to any node in the timing netlist. You cannot
specify the "-virtual" option and the "-target" option 
at the same time.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If you do not specify
the "-entity" option, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Specify a clock named "clk50" with
# a 50ns period
# The command specifies a CLOCK section
# in the active project with the 50ns
# specification, and adds a
# "clk50 : CLOCK_SETTING=clk50" assignment
# to the current entity
create_base_clock -fmax 50ns clk50

# Specify the same clk50 to a pin with
# a different name (myclkpin)
create_base_clock -fmax 50ns -target myclkpin clk50

# Specify the entity name to which the clock
# is added, using the -entity option
# This is needed if the top-level entity name 
# is other than that of the project
# The following command generates a "top_level" entity.
create_base_clock -fmax 50ns -entity top_level clk50

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: The option "-<string>" was ignored because it is no longer supported. No action is required.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Options are mutually exclusive: <string> and <string>. Specify only one of the two options.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_base_clock>

<create_relative_clock>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_relative_clock [-h | -help] [-long_help] -base_clock <Base clock> [-comment <comment>] [-disable] [-divide <integer>] [-duty_cycle <integer>] [-entity <entity>] [-invert] [-multiply <integer>] [-no_target] [-offset <offset>] [-phase_shift <integer>] [-target <name>] [-virtual] <clock_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -base_clock <Base clock>: Base clock name
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -divide <integer>: Base clock division factor
        -duty_cycle <integer>: Duty cycle
        -entity <entity>: Entity to which to add clock assignment
        -invert: Option to invert base clock
        -multiply <integer>: Base clock multiplication factor
        -no_target: Option to not assign clock to node
        -offset <offset>: Offset from base clock
        -phase_shift <integer>: Phase shift from base clock
        -target <name>: Clock node name
        -virtual: Option to specify the clock as a virtual clock
        <clock_name>: Clock name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Creates a relative clock that derived from the absolute clock.

The "-offset" option can take the format:

<floating point time value><time unit>

For example, if the offset is 10.55ns, "10.55" is the
<floating point time value> and "ns" is the <time unit>.

The following table displays possible time units:

Time Unit                 Description
---------                 --------------
s                         second(s)
ms                        millisecond(s)
us                        microsecond(s)
ns                        nanosecond(s)
ps                        picosecond(s)
fs                        femtosecond(s)

The "-phase_shift" option takes an integer that represents
degrees of phase shift from the base clock period. For example, 
if a base clock has a period of 10ns and clk2 is a relative
clock derived from the base clock. A phase shift value of 45
applies a 45 degree phase shift to clk2, producing an offset
of 1.25ns from the base clock. For a given relative clock,
you may specify a phase shift, an offset, or both. If both
are specified, they are additive.

If you specify the "-virtual" option, the relative clock
is not assigned to any node in the timing netlist. You cannot
specify the "-virtual" option and the "-target" option 
at the same time.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If you do not specify
the "-entity" option, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify a base clock of 10ns
create_base_clock -fmax 10ns clk10

## Specify a relative clock with 2/3 the period
create_relative_clock -base_clock clk10 -multiply 2 -divide 3 clk2_3

## Specify a relative clock with a phase shift of 45 degrees
create_relative_clock -base_clock clk10 -phase_shift 45 clk_45
## or, equivalently, with an offset of 1.25ns
create_relative_clock -base_clock clk10 -offset 1.25ns clk_45

## Specify the entity name to which the clock
## is added, using the -entity option
## This is needed if the top-level entity name is 
## other than that of the project
## The following command generates a "top_level" entity
create_relative_clock -base_clock clk10 -entity top_level -multiply 2 -divide 3 clk2_3

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Options are mutually exclusive: <string> and <string>. Specify only one of the two options.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_relative_clock>

<get_clocks>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_clocks [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns a list of lists consisting of node name and clock 
setting name. The output has the following format:

{{<node name #1> <clock setting name #1>}
 {<node name #2> <clock setting name #2>}
 ...
 {<node name #N> <clock setting name #N>}}

If <node name> is empty, <clock setting name> was not assigned 
to any node. If <clock setting name> is empty, <node name> 
was assigned to an undefined <clock setting name>.

You can create <clock setting name> using the 
"create_base_clock" or "create_relative_clock" commands. You 
can create node names using the following command:

set_instance_assignment -name CLOCK_SETTINGS -to <clock setting name> <node name>
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Search for all pairs of node names and clock setting names
# and print the information

set clock_lists [get_clocks]

foreach clock_asgn $clock_lists {
     set node_name [lindex $clock_asgn 0]
     set clock_setting_name [lindex $clock_asgn 1]

     if { $node_name == "" } {
          puts "No node uses the clock \"$clock_setting_name\""
     } elseif {$clock_setting_name == ""} {
          puts "The node \"$node_name\" uses an undefined clock setting";
     } else {
          puts "The node \"$node_name\" uses the clock \"$clock_setting_name\""
     }
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_clocks>

<timegroup>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: timegroup [-h | -help] [-long_help] [-add_exception <name>] [-add_member <name>] [-comment <comment>] [-disable] [-get_exceptions] [-get_members] [-overwrite] [-remove] [-remove_exception <name>] [-remove_member <name>] <group_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -add_exception <name>: Tcl list of exception names to add
        -add_member <name>: Tcl list of member names to add
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -get_exceptions: Option to get collection of timegroup exceptions
        -get_members: Option to get collection of timegroup members
        -overwrite: Option to overwrite existing timegroup with the same group name
        -remove: Option to remove timegroup
        -remove_exception <name>: Tcl list of exception names to remove
        -remove_member <name>: Tcl list of member names to remove
        <group_name>: Group name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Adds, removes, gets members of, or gets exceptions to a 
timegroup.

A timegroup is a custom group of registers and pins. You can 
use the "-add_member" option to specify register or pin names 
you want to include in the timegroup. You can use the 
"-add_exception" option to specify names you want to exclude 
from the timegroup.

You can specify the names using wildcards, that is, using "?" 
or "*". For example, to add all registers and pins that start 
with a "b" except those that start with "b|c|" to a particular
timegroup named "group_b", type:

timegroup "group_b" -add_member "b*" -add_exception "b|c|*"

To remove members or exceptions from a timegroup, use the 
"-remove_member" or "-remove_exception" options respectively.

The "-get_members" option returns a collection of members in 
the timegroup. The "-get_exceptions" option returns a collection 
of exceptions to the timegroup. To access each element of the 
collection, use the Tcl command "foreach_in_collection". To see 
example usage, type "timegroup -long_help" or
"foreach_in_collection -long_help".

Specifying registers and pins in terms of a timegroup allows 
you to set timing constraints easily. For example, to make a 
multicycle assignment from nodes "a1" and "a2" to nodes "b1", 
"b2", and "b3", type the following:

timegroup "group_a" -add_member [list "a1" "a2"]
timegroup "group_b" -add_member [list "b1" "b2" "b3"]

set_multicycle_assignment -from "group_a" -to "group_b" 2

This command sets a multicycle assignment from every member of 
"group_a" to every member of "group_b". Quartus(R) II timing 
analysis is optimized to use timegroups in handling timing 
constraints.

To disable timegroup assignments for the entire group,
use the "-disable" option, for example:

timegroup "group_a" -disable

To disable a particular timegroup assignment, use the
"-disable" option with the "-add_member" or "-add_exception"
options, for example:

timegroup "group_a" -add_member "m1" -disable
timegroup "group_a" -add_exception "e1" -disable

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Make timing cut assignment from nodes starting
# with "r" except those starting with "r|s|"
# and except those starting with "r|t|"
# to nodes "t1", "t2", and "t3"
timegroup "tg1" -add_member "r*" -add_exception "r|s|*"
timegroup "tg1" -add_exception "r|t|*"

timegroup "tg2" -add_member [list "t1" "t2" "t3"]

set_timing_cut_assignment -from "group_a" -to "group_b" 2

# Remove the "t1" from a particular timegroup named "tg2"
timegroup "tg2" -remove_member "t1"

# Display the members of a particular timegroup named "tg1"
foreach_in_collection member [timegroup "tg1" -get_members] {

	# Print the name of the member
	puts $member
}

# Display the exceptions to a particular timegroup named "tg1"
foreach_in_collection exception [timegroup "tg1" -get_exceptions] {

	# Print the name of the exception
	puts $exception
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</timegroup>

<set_input_delay>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_input_delay [-h | -help] [-long_help] [-clk_ref <clock>] [-clock_fall] [-comment <comment>] [-disable] [-max] [-min] [-remove] -to <input_pin> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -clk_ref <clock>: Reference clock name
        -clock_fall: Option to specify that delay is relative to falling edge of reference clock
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -max: Option to set maximum delay
        -min: Option to set minimum delay
        -remove: Option to remove input delay requirement
        -to <input_pin>: Input pin name or input timegroup
        <value>: Input delay value after rise of reference clock
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Specifies the required minimum or maximum delay on the input 
pin or input timegroup as specified by the "-to" option. 
The Quartus II(R) timing analysis propagates this delay and 
checks it against the actual delay. For more information 
about timegroups, type "timegroup -h".

If both "-min" and "-max" options are not used, then the
assignment is set for both minimum and maximum delay.

The "-clock_fall" option specifies that the input delay is 
relative to the falling edge of the reference clock. The 
rising edge of the reference clock is the default.

The <value> is the input delay after the rise or fall of the 
reference clock. If you do not specify the "-clk_ref" option, 
all clocks are assumed to be reference clocks by default.

The format of <value> is "<numerical value><time unit>", 
for example, "7.55ns". 

The following table shows the available time units:

Time Unit                  Description
----------------------     ------------------
s                          second(s)
ms                         millisecond(s)
us                         microsecond(s)
ns                         nanosecond(s)
ps                         picosecond(s)
fs                         femtosecond(s)
Hz                         hertz
KHz                        kilohertz
MHz                        megahertz
GHz                        gigahertz

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify the required minimum and maximum input
## delays on the input pin named "ipin" relative to
## the rising edge of the reference clock named "clk1"
set_input_delay 2ns -to "ipin" -clk_ref "clk1"
## Or, equivalently,
set_input_delay 2ns -to "ipin" -clk_ref "clk1" -min -max

## Specify the required minimum input delay on 
## the input pin named "ipin" relative to the
## falling edge of the reference clock named "clk1"
set_input_delay 2ns -to "ipin" -clk_ref "clk1" -min -clock_fall

## Specify the required maximum input delay on
## input pins with names that start with "i"
## except those that start with "ibus"
timegroup "input_pins" -add_member "i*" -add_exception "ibus*"
set_input_delay 2ns -to "input_pins" -max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_input_delay>

<set_output_delay>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_output_delay [-h | -help] [-long_help] [-clk_ref <clock>] [-clock_fall] [-comment <comment>] [-disable] [-max] [-min] [-remove] -to <output_pin> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -clk_ref <clock>: Reference clock name
        -clock_fall: Option to specify that delay is relative to falling edge of reference clock
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -max: Option to set maximum delay
        -min: Option to set minimum delay
        -remove: Option to remove output delay requirement
        -to <output_pin>: Output pin name or output timegroup
        <value>: Delay value after rise of reference clock
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Specifies the required minimum or maximum delay on the output 
pin or output timegroup as specified by the "-to" option. 
The Quartus II(R) timing analysis propagates this delay and 
checks it against the actual delay. For more information 
about timegroups, type "timegroup -h".

If both "-min" and "-max" options are not used, then the
assignment is set for both minimum and maximum delay.

The "-clock_fall" option specifies that the output delay is 
relative to the falling edge of the reference clock. The 
rising edge of the reference clock is the default.

The <value> is the output delay after the rise or fall of the 
reference clock. If you do not specify the "-clk_ref" option, 
all clocks are assumed to be reference clocks by default.

The format of <value> is "<numerical value><time unit>", 
for example, "7.55ns".

The following table displays available time units:

Time Unit                  Description
----------------------     ------------------
s                          second(s)
ms                         millisecond(s)
us                         microsecond(s)
ns                         nanosecond(s)
ps                         picosecond(s)
fs                         femtosecond(s)
Hz                         hertz
KHz                        kilohertz
MHz                        megahertz
GHz                        gigahertz

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify the required minimum and maximum output
## delays on the output pin named "opin" relative to
## the rising edge of the reference clock named "clk1"
set_output_delay 2ns -to "opin" -clk_ref "clk1"
## Or, equivalently,
set_output_delay 2ns -to "opin" -clk_ref "clk1" -min -max

## Specify the required minimum output delay on 
## the output pin named "opin" relative to the
## falling edge of the reference clock named "clk1"
set_output_delay 2ns -to "opin" -clk_ref "clk1" -min -clock_fall

## Specify the required maximum output delay on
## output pins with names that start with "o"
## except those that start with "obus"
timegroup "output_pins" -add_member "o*" -add_exception "obus*"
set_output_delay 2ns -to "output_pins" -max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_output_delay>

<set_multicycle_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_multicycle_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-end] [-from <from_list>] [-hold] [-remove] [-setup] [-start] [-to <to_list>] <path_multiplier>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable multicycle assignment
        -end: Option to indicate that destination clock cycles should be considered for path multiplier
        -from <from_list>: List of clock names, node names, and/or timegroup names that represent start or source points of multicycle path, for example, {node1 node2 ...}
        -hold: Option to indicate that path multiplier is meant for hold
        -remove: Option to remove multicycle assignment
        -setup: Option to indicate that path multiplier is meant for setup
        -start: Option to indicate that source clock cycles must be considered for path multiplier
        -to <to_list>: List of clock names, node names, and/or timegroup names that represent end or destination points of multicycle path, for example, {node1 node2 ...}
        <path_multiplier>: Multicycle path multiplier
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Specifies that the given timing paths have multicycle setup 
or hold delays with the number of cycles specified by the 
"-path_multiplier" option. 

If neither the "-setup" nor "-hold" options are used, the 
"-setup" option is the default option. If neither the "-start" 
nor "-end" options are used, the "-end" option is the default 
option.

You must use either the "-from <from_list>" or "-to <to_list>" 
option.

Note that Quartus(R) II timing analysis is optimized to use
timegroups for timing constraints instead of a list of nodes.
Of the following two methods to make multicycle assignments, 
method (1) is the optimal method.

(1) timegroup "src_group" -add_member "s1"
    timegroup "src_group" -add_member "s2"
    timegroup "src_group" -add_member "s3"
    timegroup "dst_group" -add_member "d1"
    timegroup "dst_group" -add_member "d2"
    set_multicycle_assignment -from "src_group" -to "dst_group"

(2) set_multicycle_assignment -from {s1 s2 s3} -to {d1 d2}

For more information about timegroups, type "timegroup -h".

The meaning of multicycle hold differs between the Quartus II 
software timing analysis and the Synopsys PrimeTime software 
timing analysis. Refer to the online Help of each software for 
more information.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Multicycle "setup" from reg1 and reg2 to any destination points
timegroup "src_group" -add_member reg1
timegroup "src_group" -add_member reg2
set_multicycle_assignment 2 -setup -from "src_group"

## or
timegroup "src_group" -add_member reg1
timegroup "src_group" -add_member reg2
timegroup "dst_group" -add_member *
set_multicycle_assignment 2 -setup -from "src_group" -to "dst_group"

## Source multicycle "setup" to reg1 and reg2 from any source points 
timegroup "dst_group" -add_member reg1
timegroup "dst_group" -add_member reg2
set_multicycle_assignment 2 -setup -start -to "dst_group"

## or
timegroup "dst_group" -add_member reg1
timegroup "dst_group" -add_member reg2
timegroup "src_group" -add_member *
set_multicycle_assignment 2 -setup -start -from "src_group" -to "dst_group"

## Source multicycle "hold" from src1 to dst1 and dst2 and
## from src2 to dst1 and dst2
timegroup "src_group" -add_member src1
timegroup "src_group" -add_member src2
timegroup "dst_group" -add_member dst1
timegroup "dst_group" -add_member dst2
set_multicycle_assignment 2 -hold -from "src_group" -to "dst_group"

## Source multicycle "hold" from registers clocked by clk1
## to registers clocked by clk2
## Timegroups are useful for making assignments to
## more than one node. Timegroups are not necessary 
## for making an assignment from only one clock node  
## to another clock 
set_multicycle_assignment 2 -hold -start -from clk1 -to clk2

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Invalid path multiplier value: <string>.  Specify a positive integer value.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_multicycle_assignment>

<set_timing_cut_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_timing_cut_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-from <from_pin_list>] [-remove] [-to <to_pin_list>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -from <from_pin_list>: List of start or source node names and/or timegroup names for timing path, for example, {node1 node2 ...}
        -remove: Option to remove timing cut assignment
        -to <to_pin_list>: List of end node names and/or timegroup names for timing path, for example, {node1 node2 ...}
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Specifies that the timing paths that start from the designated 
<from_pin_list> and end in the designated <to_pin_list> are 
false paths.

Nodes for the <from_pin_list> can be input pins, internal nodes, 
clock pins, or timegroups. Nodes for the <to_pin_list> can be
output pins, internal nodes, clock pins, or timegroups.

You must use either the "-from <from_pin_list>" or the 
"-to <to_pin_list>" option.

Note that Quartus(R) II timing analysis is optimized to use
timegroups for timing constraints instead of a list of nodes.
Of the following two methods to make timing cut assignments, 
method (1) is the optimal method.

(1) timegroup "src_group" -add_member "s1"
    timegroup "src_group" -add_member "s2"
    timegroup "src_group" -add_member "s3"
    timegroup "dst_group" -add_member "d1"
    timegroup "dst_group" -add_member "d2"
    set_timing_cut_assignment -from "src_group" -to "dst_group"

(2) set_timing_cut_assignment -from {s1 s2 s3} -to {d1 d2}

For more information about timegroups, type "timegroup -h".

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set timing cut from any source points to dst1 and dst2
timegroup "dst_group" -add_member dst1
timegroup "dst_group" -add_member dst2
set_timing_cut_assignment -to "dst_group"

## or
timegroup "src_group" -add_member *
timegroup "dst_group" -add_member dst1
timegroup "dst_group" -add_member dst2
set_timing_cut_assignment -from "src_group" -to "dst_group"

## Set timing cut from src1 and src2 to any end points
timegroup "src_group" -add_member src1
timegroup "src_group" -add_member src2
set_timing_cut_assignment -from "src_group"

## or
timegroup "src_group" -add_member src1
timegroup "src_group" -add_member src2
timegroup "dst_group" -add_member *
set_timing_cut_assignment -from "src_group" -to "dst_group"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_timing_cut_assignment>

<project_new>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_new [-h | -help] [-long_help] [-family <family>] [-overwrite] [-part <part>] [-revision <revision_name>] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -family <family>: Family name
        -overwrite: Option to overwrite existing project and revision
        -part <part>: Part name
        -revision <revision_name>: Revision name
        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Creates and opens a new project with the specified project name.

If the "-revision" option is not specified, the project name 
is used to create the revision.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create project "chiptrip" and revision "chiptrip"
project_new chiptrip

## Create project "chiptrip" and revision "auto_max"
project_new -revision auto_max chiptrip

## Create project "chiptrip" and revision "chiptrip"
## Overwrite any Quartus II Settings File (.qsf) if it exists
project_new chiptrip -overwrite

## Create project "chiptrip" and revision "chiptrip"
## Set the FAMILY assignment to Stratix
project_new chiptrip -family Stratix

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: The "-<string>" option must also be used when you use the "-<string>" option. Specify both options.
TCL_ERROR	1   	ERROR: Can't create project: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name using the "-<string>" option.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name.
TCL_ERROR	1   	ERROR: Can't create settings files for project: <string>. Make sure the .psf, .csf, and .ssf files are writeable.
TCL_ERROR	1   	ERROR: Can't open project: <string>
TCL_ERROR	1   	ERROR: Can't remove Quartus II Settings File: <string>. Make sure the file is writeable.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Project already exists: <string>. Specify a different project name or use the "-overwrite" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_new>

<project_open>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_open [-h | -help] [-long_help] [-current_revision] [-error_on_incompatible_database] [-revision <revision_name>] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -current_revision: Option to open the current revision automatically
        -error_on_incompatible_database: Option not to open the project and issue and error if the database version is incompatible
        -revision <revision_name>: Revision name
        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Opens an existing project. To create a new project, use the 
"project_new" command.

If the "-revision" option is not specified, the project name
is used to open the revision.

By default, opening the project overwrites the database
created in a different version of the Quartus II software.
However, if the "-error_on_incompatible_database" option is
specified, instead of opening the project, an error is issued 
when the database version differs from the current version of the 
Quartus II software.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Open project "chiptrip" and revision "chiptrip"
project_open chiptrip

## Open project "chiptrip" and revision "auto_max"
project_open -revision auto_max chiptrip

## Get the current revision before opening
## the project with the current revision
set project_name chiptrip
set current_revision [get_current_revision $project_name]
project_open -revision $current_revision $project_name
puts [get_global_assignment -name FAMILY]
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Project is already open: <string>
TCL_ERROR	1   	ERROR: Can't open project: <string>. First close the currently open project: <string>.
TCL_ERROR	1   	ERROR: Can't open project: <string>
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Cannot open project: <string>. The project is not compatible with the installed version of the Quartus II software. Opening the project will overwrite the old project database. If you wish to overwrite the old project database, make sure to specify the -<string> option.
TCL_ERROR	1   	ERROR: Can't open revision: <string> (project: <string>). The revision is not compatible with the installed version of the Quartus II software. Opening the revision will overwrite the old revision database. If you wish to overwrite the old revision database, make sure to specify the -<string> option.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_open>

<set_current_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_current_revision [-h | -help] [-long_help] [-force] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -force: Option to open the revision and overwrite the compilation database if the database version is incompatible.
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Sets the specified revision name as the current revision.

In 8.1 or later versions of Quartus II software, set_current_revision
gives an error when the compilation database version is not
compatible with the current version of Quartus II software.
You may specify the "-force" option to avoid the error
and overwrite the database.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Sets "auto_max" as the current revision 
set_current_revision auto_max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Revision is already the current revision: <string>. No action is required.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision file does not exist: <string>.qsf. Use "delete_revision" to delete the revision from the current project. Then use "create_revision" to create the revision and its .qsf before setting <string> as the current revision.
TCL_ERROR	1   	ERROR: Revision is not included in the current project: <string> . Use the "create_revision" command to create the revision.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_current_revision>

<get_current_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_current_revision [-h | -help] [-long_help] [<project_name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns the name of the current revision for the specified 
project. If the project name is not specified, the current 
project name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the current revision name for
# the currently open project "chiptrip"
project_open chiptrip
set revision_name [get_current_revision]
project_close

# Get the current revision name for
# a project that is not currently open
set revision_name [get_current_revision chiptrip]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_current_revision>

<create_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_revision [-h | -help] [-long_help] [-based_on <revision_name>] [-copy_results] [-set_current] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -based_on <revision_name>: Revision name on which new revision bases its settings
        -copy_results: Option to copy results from "based_on" revision
        -set_current: Option to set new revision as current revision
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Creates the specified revision. If the revision is not 
included in the current project, a new revision is 
created in the project with default settings. 

If you specify the "-set_current" option, this command 
sets the newly created revision as the current revision.

If you specify the "-based_on" option, the command creates 
a new revision in the project based on the settings of the 
based-on revision specified by the option.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create a new revision called "tmp"
create_revision tmp

## Create a new revision called "tmp"
## and set it as the current revision
create_revision tmp -set_current
## This method is the same as 
create_revision tmp
set_current_revision tmp

## Create a new revision called "speed_ch"
## with settings based on "chiptrip"
## and set it as the current revision
create_revision speed_ch -based_on chiptrip -set_current

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Revision is already the current revision: <string>. No action is required.
TCL_ERROR	1   	ERROR: Based-on revision is not included in the current project: <string>. Make sure the based-on revision name is spelled correctly and included in the current project.
TCL_ERROR	1   	ERROR: Can't create revision because the current project uses the device family: <string>. Change the device family or create the revision in another project that uses a different device family.
TCL_ERROR	1   	ERROR: Can't create file: <string>. Make sure you have permission to write to the specified file.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name.
TCL_ERROR	1   	ERROR: Can't remove file: <string>. Make sure the file is not read-only and you have permission to write to the specified file.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Didn't create revision because it is already included in current project: <string>. If you want a new revision, specify a different revision name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_revision>

<delete_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: delete_revision [-h | -help] [-long_help] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Deletes the specified revision from the current project. The corresponding
<revision name>.qsf file is deleted as well.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Delete the revision called "tmp"
delete_revision tmp

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't delete the current revision: <string>. Specify a different revision name.
TCL_ERROR	1   	ERROR: Can't delete revision  because it is not included in the current project: <string> . Specify a revision name that is included in the project.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</delete_revision>

<revision_exists>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: revision_exists [-h | -help] [-long_help] [-project <project_name>] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -project <project_name>: Project name
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Checks whether the revision exists for the specified project
or currently open project. 

Returns 1, if the revision exists; returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Check if the specified revision exists
## in the specified project
if [revision_exists -ARG(project) chiptrip speed_ch] {
	puts "Revision exists"
} else {
	puts "Revision does not exist"
}

## Create revision for the currently open 
## project if it does not exist
## Set the current revision otherwise
project_open chiptrip
if [revision_exists speed_ch] {
	set_current_revision speed_ch
} else {
	create_revision speed_ch
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</revision_exists>

<get_project_revisions>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_project_revisions [-h | -help] [-long_help] [<project_name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns a list of revisions included in the specified project.
If the project name is not specified, the current project name
is used by default.

The first element in the list of revisions is the current
revision and is the same as the return value for the
"get_current_revision" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Set the device family assignment to Stratix 
# for all revisions
project_open chiptrip
set original_revision [get_current_revision]

foreach revision [get_project_revisions] {
	puts "$revision"
	set_current_revision $revision
	set_global_assignment -name FAMILY Stratix
	export_assignments
}

set_current_revision $original_revision
project_close

# Open the project with the first available revision 
# and set the device family assignment to Stratix
set revision [lindex [get_project_revisions chiptrip] 0]
open_project -revision $revision chiptrip
set_global_assignment -name FAMILY Stratix
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_project_revisions>

<export_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: export_assignments [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Exports assignments for the current revision to the Quartus II 
Settings File (.qsf).

Assignments created or modified during an open project are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## The most common use of export_assignments is to
## call it before doing a system call
## to call a compiler command-line executable
project_open $project_name
set_global_assignment -name FAMILY Stratix

## Before calling quartus_map, 
## write out the FAMILY assignment
export_assignments

## Now, call quartus_map
qexec "[file join $::quartus(binpath) quartus_map] $project_name"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</export_assignments>

<get_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_names [-h | -help] [-long_help] -filter <wildcard> [-node_type <all|comb|reg|pin|input|output|bidir|hierarchy|mem|bus|qsf>] [-observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -filter <wildcard>: Option to specify the node's full path name and/or wildcard character(s)
        -node_type <all|comb|reg|pin|input|output|bidir|hierarchy|mem|bus|qsf>: Option to filter based on the specified node type.
        -observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>: Option to filter based on the specified observable type
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns a filtered output collection of all matching
node name IDs found in a compiled Quartus(R) II project. 

To access each element of the output collection, use the Tcl 
command "foreach_in_collection". To see example usage, type 
"get_names -long_help" or "foreach_in_collection -long_help".

If the "-node_type" option is not specified, the default
value is "all". Similarly, if the "-observable_type" option
is not specified, the default value is "all".

The node type "pin" includes "input", "output", and "bidir".
The node type "qsf" include names from qsf settings file.
The node type "all" includes all node types.
 
The value for "-observable_type" option can be one of 
the following:

Observable Type      Description
---------------      -----------------------------------
all                  Use post-Fitter information. If it is
                     not available, post-Synthesis
                     information is used. Otherwise,
                     pre-synthesis information is used if it
                     exists.
pre_synthesis        Use pre-synthesis information.
post_synthesis       Use post-synthesis information.
post_fitter          Use post-Fitter information.
post_asm             Use post-Assembler information. The
                     post-Assembler information is only supported
                     for designs using the HardCopy II device family.
stp_pre_synthesis    Use SignalTap II pre-synthesis information.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Search for a single post-Fitter pin with the name accel and 
# make assignments
set accel_name_id [get_names -filter accel -node_type pin -observable_type post_fitter]
foreach_in_collection name_id $accel_name_id {

	# Get the full path name of the node
	set target [get_name_info -info full_path $name_id]

	# Set multicycle assignment
	set_multicycle_assignment -to $target 2

	# Set location assignment
	set_location_assignment -to $target Pin_E22
}
# Search for nodes of any post-Fitter node type with name length <= 5
# The default node type is "all"
set name_ids [get_names -filter ????? -observable_type post_fitter]
foreach_in_collection name_id $name_ids {

	# Print the name id
	puts $name_id

	# Print the node type
	puts [get_name_info -info node_type $name_id]

	# Print the full path (which excludes the current
	# focus entity from the path)
	puts [get_name_info -info full_path $name_id]
}
# Search for nodes of any post-Fitter node type that end in "eed".
# The default node type is "all"
set name_ids [get_names -filter *eed -observable_type post_fitter]
foreach_in_collection name_id $name_ids {

	# Print the name id
	puts $name_id

	# Print the node type
	puts [get_name_info -info node_type $name_id]

	# Print the full path (which excludes the current
	# focus entity from the path)
	puts [get_name_info -info full_path $name_id]
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Illegal node type: <string>.  Specify "all", "comb", "reg", "pin", "hierarchy", or "bus".
TCL_ERROR	1   	ERROR: Illegal observable type: <string>.  Specify "all", "pre_synthesis", "post_synthesis", or "post_fitter".
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Post-Assembler compiler database does not exist for revision name: <string>. Run Assembler (quartus_asm) with the specified revision name before using this Tcl command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_names>

<get_name_info>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_name_info [-h | -help] [-long_help] [-get_synonyms] [-info <parent_name_id|base_name|entity_name|instance_name|full_path|short_full_path|node_type|creator|signaltapii|file_location>] [-observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>] [-use_cached_database] <name_id>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -get_synonyms: Option to get a Tcl list of synonym name ids. This is an advanced Quartus II Tcl option.
        -info <parent_name_id|base_name|entity_name|instance_name|full_path|short_full_path|node_type|creator|signaltapii|file_location>: Option to specify the type of information to display.
        -observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>: Option to specify the observable type of the name ID
        -use_cached_database: Option not to check the compilation database for updates. Use this option only if you do not compile the project after getting the name IDs from "get_names" command. If you compile the project, you must re-run "get_names" command again to refresh the cached database information before using this option. This is an advanced Quartus II Tcl option.
        <name_id>: Option to specify the node name ID
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Displays the specified type of information for the specified node 
name id. Type "get_names -long_help" to view how to get a collection 
of node name IDs.

If the "-observable_type" option is not specified, the default 
value is "all". The specified observable type must have the same 
observable type as specified in the "get_names" Tcl command which 
returned the currently specified node name id.

The value for "-observable_type" option can be one of 
the following:

Observable Type      Description
---------------      -----------------------------------
all                  Use post-Fitter information. If it is
                     not available, post-synthesis
                     information is used. Otherwise,
                     pre-synthesis information is used if it
                     exists.
pre_synthesis        Use pre-synthesis information.
post_synthesis       Use post-synthesis information.
post_fitter          Use post-Fitter information.
post_asm             Use post-Assembler information. The
                     post-Assembler information is only supported
                     for designs using the HardCopy II device family.
stp_pre_synthesis    Use SignalTap II pre-synthesis information.


The info type for the "-info" option can be one of 
the following:

Info Type            Description
--------------       -----------------------------------
parent_name_id       The name id for the node's parent.
base_name            The node name, which consists of an 
                     entity name and/or an instance name 
                     separated by a colon if necessary.
entity_name          The entity name.
instance_name        The instance name.
full_path            The full hierarchy path name, which 
                     consists of entity name(s) and/or the 
                     instance name(s). This path name 
                     excludes the current focus entity.
                     If there is nothing shown, the
                     name id is the current focus entity's 
                     name id.
short_full_path      The short full hierarchy path name, 
                     which consists of the instance name(s).
                     This path name excludes the current 
                     focus entity. If nothing is 
                     shown, the name id is the
                     current focus entity's name id.
node_type            The node type, which can be one of 
                     the types supported by "get_names",
                     namely, "input", "output", "bidirectional",
                     "register", "combinational",
                     "hierarchy", "memory", or "bus".
                     If "pin" type was specified for 
                     "get_names" command, the node type shown
                     here is expanded to be "input", "output", or
                     "bidirectional".
                     Node type value of "qsf" indicates name 
                     originates from qsf settings file.
creator              The creator of the node, which is either
                     "user_entered" or "compiler_generated".
signaltapii          If this node can be connected to a
                     SignalTap(R) II embedded logic analyzer, 
                     1 is shown. Otherwise, 0 is shown.
file_location        The source file location. For example,
                     the source file location for the entity
                     chiptrip is "chiptrip.v". To get the full
                     path to the source file, use the command
                     "resolve_file_path" which exists only in
                     version 4.0 or later of ::quartus::project
                     package.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the name id of the current focus entity
set current_focus_entity_id [get_top_level_entity]

# The full path name of the current focus entity
# is empty because the full path excludes the 
# current focus entity
set msg "Full path of the current focus entity => ("
append msg [get_name_info -info full_path $current_focus_entity_id]
append msg ")"
puts $msg
puts ""

# Get the node type of the current focus entity
# The node type should be a hierarchy type
set msg "Node type of the current focus entity => ("
append msg [get_name_info -info node_type $current_focus_entity_id]
append msg ")"
puts $msg

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Illegal info type: <string>.  Specify "parent_name_id", "base_name", "entity_name", "instance_name", "full_path", "short_full_path", "node_type", "creator", or "signaltapii".
TCL_ERROR	1   	ERROR: Illegal name id: <string>.  Specify a name id that exists in a compiled Quartus II project.
TCL_ERROR	1   	ERROR: Invalid name id: <string>.  Specify an integer greater than or equal to zero.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Post-Assembler compiler database does not exist for revision name: <string>. Run Assembler (quartus_asm) with the specified revision name before using this Tcl command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_name_info>

<get_top_level_entity>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_top_level_entity [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns the name id for the current focus entity.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the name id of the current focus entity
set current_focus_entity_id [get_top_level_entity]

# Print out the entity name of the current focus entity
set msg "Entity name of the current focus entity => ("
append msg [get_name_info -info entity_name $current_focus_entity_id]
append msg ")"
puts ""
puts $msg

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_top_level_entity>

<get_all_assignment_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_assignment_names [-h | -help] [-long_help] [-family <family>] [-module <all|map|fit|tan|asm|eda|drc|generic>] [-type <all|global|instance>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -family <family>: Option to filter based on the specified device family. Defaults to all families.
        -module <all|map|fit|tan|asm|eda|drc|generic>: Option to filter based on the specified flow module. Defaults to all.
        -type <all|global|instance>: Option to filter based on the specified assignment type. Defaults to all.
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns a filtered output list of all available, matching
assignment names.

The module option takes one of the following values:

Module           Description
--------         -------------------------------------
map              Analysis & Synthesis assignment names
fit              Fitter assignment names
tan              Classic Timing Analyzer assignment names
asm              Assembler assignment names
eda              EDA Netlist Writer assignment names
drc              Design Assistant assignment names
generic          Other assignment names not included in any 
                 of the above flow modules
all              All assignment names
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all available global assignments
foreach i [get_all_assignment_names -type global] {
    puts $i
}

## Print out all available global assignments
## for the Stratix family
foreach i [get_all_assignment_names -type global -family Stratix] {
    puts $i
}

## Print out all available global assignments
## for the Stratix family required
## by the Analysis & Synthesis module
foreach i [get_all_assignment_names -type global -family Stratix -module map] {
    puts $i
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal flow module: <string>.  Specify "<string>", "<string>", "<string>", "<string>", "<string>", "<string>", "<string>", or "<string>".
TCL_ERROR	1   	ERROR: Illegal type: <string>.  Specify "<string>", "<string>", or "<string>".
TCL_ERROR	1   	ERROR: Illegal device family: <string>.  Specify a legal device family.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_assignment_names>

<set_user_option>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_user_option [-h | -help] [-long_help] -name <name> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name
        <value>: User option value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Sets the user option value for the name specified by
the "-name" option. The user option is written to
the quartus2.ini file.

To get a list of all available user option names, use
the "get_all_user_option_names" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set TALKBACK_ENABLED to "on"
set_user_option -name TALKBACK_ENABLED on

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal user option name: <string>. Specify a legal user option name. To get a list of legal names, use the "get_all_user_option_names" command.
TCL_ERROR	1   	ERROR: Illegal user option value: <string>. Specify a legal user option value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_user_option>

<get_user_option>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_user_option [-h | -help] [-long_help] -name <name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns the user option value for the name specified by
the "-name" option.

To get a list of all available user option names, use
the "get_all_user_option_names" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the value for the user option
## "TALKBACK_ENABLED"
set value [get_user_option -name TALKBACK_ENABLED]
puts "TALKBACK_ENABLED = $value"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal user option name: <string>. Specify a legal user option name. To get a list of legal names, use the "get_all_user_option_names" command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_user_option>

<get_all_user_option_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_user_option_names [-h | -help] [-long_help] [-name <name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns a filtered output list of all available, matching
user option names.

If the "-name" option is not specified, all available user
option names are returned. Otherwise, only the matching
user option names are returned.

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all available user option names
foreach i [get_all_user_option_names] {
    puts $i
}

## Display all user option names that contain
## the word "talkback" and also display the 
## value for each of the user option names
foreach i [get_all_user_option_names -name *talkback*] {
	set name $i
	set value [get_user_option -name $i]
    puts "$name = $value"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_user_option_names>

<set_clock_uncertainty>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_clock_uncertainty [-h | -help] [-long_help] [-comment <comment>] [-disable] [-from <src_clock_name>] [-hold] [-remove] [-setup] -to <dst_clock_name> <value>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -from <src_clock_name>: Source clock name
        -hold: Option to specify hold time uncertainty
        -remove: Option to remove assignment
        -setup: Option to specify setup time uncertainty
        -to <dst_clock_name>: Destination clock name
        <value>: Amount of expected clock jitter
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Specifies simple or interlock clock uncertainty (or clock
jitter) used during setup and/or hold time analysis. The optional
source clock <src_clock_name> is specified for interlock
uncertainty and is not specified for simple uncertainty.

You may specify the -setup option, the -hold option, or 
neither. If neither is specified, then the command applies 
to both setup and hold.

The <value> is the expected amount of clock jitter.
The format of <value> is "<numerical value><time unit>", 
for example, "0.5ns". 

The following table displays available time units:

Time Unit                  Description
----------------------     ------------------
s                          second(s)
ms                         millisecond(s)
us                         microsecond(s)
ns                         nanosecond(s)
ps                         picosecond(s)
fs                         femtosecond(s)
Hz                         hertz
KHz                        kilohertz
MHz                        megahertz
GHz                        gigahertz

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify a simple setup uncertainty of .3ns
## and a simple hold uncertainty of .1ns
set_clock_uncertainty 0.3ns -to clk -setup
set_clock_uncertainty 0.1ns -to clk -hold

## Both of the following commands specify a
## simple setup and hold uncertainty of .3ns
set_clock_uncertainty 0.3ns -to clk
## or
set_clock_uncertainty 0.3ns -to clk -setup -hold

## Specify an interlock setup uncertainty of .3ns
## and an interlock hold uncertainty of .1ns
set_clock_uncertainty 0.3ns -to clk -from src_clk -setup
set_clock_uncertainty 0.1ns -to clk -from src_clk -hold

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal value: <string> -- Specify a positive time value.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_clock_uncertainty>

<resolve_file_path>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: resolve_file_path [-h | -help] [-long_help] <file_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <file_name>: Option to specify the file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Returns the resolved full path of the specified file name.
If the file does not exist, the original file name is 
returned.

The Quartus II software resolves relative paths by searching
for the file in the following directories in the following
order:

1) Project directory, which is the directory where the
   Quartus II Settings File (.qsf) is found.
2) Project database directory, which is the "db" directory
   found under the project directory.
3) Project library directories, which are the directories
   containing the user-specified libraries that are used 
   only by the current project.
4) User library directories, which are the directories
   containing the user-specified libraries that are
   used by all Quartus II projects.
5) Quartus II library directory, which is the directory
   containing Quartus II libraries.
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_new chiptrip -overwrite

# Set one Verilog source file assignment
set_global_assignment -name VERILOG_FILE chiptrip.v

# Display the resolved full path of the Verilog
# source file assignment
set filename [get_global_assignment -name VERILOG_FILE]
set resolved_fullpath [resolve_file_path $filename]

puts "Full Path: $resolved_fullpath"

# Set more Verilog source file assignments
set_global_assignment -name VERILOG_FILE auto_max.v
set_global_assignment -name VERILOG_FILE speed_ch.v
set_global_assignment -name VERILOG_FILE tick_cnt.v
set_global_assignment -name VERILOG_FILE time_cnt.v

# Display the resolved full path of all the Verilog
# source file assignments
set file_asgns [get_all_global_assignments -name VERILOG_FILE]
foreach_in_collection file_asgn $file_asgns {

    ## Each element in the collection has the following
    ## format: {} {VERILOG_FILE} {<file_name>}

    set filename [lindex $file_asgn 2]
    set resolved_fullpath [resolve_file_path $filename]

    puts "Full Path: $resolved_fullpath"
}

project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</resolve_file_path>

<test_assignment_trait>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: test_assignment_trait [-h | -help] [-long_help] -name <name> -trait <trait_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: Assignment name
        -trait <trait_name>: Trait name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 4.0

------------
Description:
------------

Checks whether the assignment name has the specified trait.
Returns 1, if the assignment name has the trait;
returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Test if the assignment name is case-sensitive
if {[test_assignment_trait -name VHDL_FILE -trait CASE_SENSITIVE]} {
	puts "VHDL_FILE assignment is case-sensitive."
} else {
	puts "VHDL_FILE assignment is not case-sensitive."
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Illegal trait: <string>. Specify a legal trait name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</test_assignment_trait>

<<<</4.0>>>>
<<<<5.0>>>>
<is_project_open>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: is_project_open [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Checks whether a project is currently open. Returns 1, if a 
project is currently open; returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Close the project if open
if [is_project_open] {
   project_close
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</is_project_open>

<project_close>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_close [-h | -help] [-long_help] [-dont_export_assignments]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -dont_export_assignments: Do not export assignments to file
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Closes an open project.

The assignments created or modified during an open project
are committed to the Quartus II Settings File (.qsf) during a 
"project_close", unless you use the "-dont_export_assignments"
option.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Close the project if open
if [is_project_open] {
   project_close
}
## Close the project if open
## and do not export the assignments
if [is_project_open] {
   project_close -dont_export_assignments
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_close>

<project_exists>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_exists [-h | -help] [-long_help] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Checks whether a project exists. Returns 1, if a project exists; 
returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create project if one does not exist.
## Open existing project otherwise.
if [project_exists chiptrip] {
	project_open chiptrip
} else {
	project_new chiptrip
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_exists>

<project_archive>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_archive [-h | -help] [-long_help] [-all_revisions] [-include_libraries] [-include_outputs] [-overwrite] [-use_file_set <file_set>] [-version_compatible_database] <archive_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -all_revisions: Option to archive all revisions
        -include_libraries: Option to include related system libraries
        -include_outputs: Option to include output files in archive
        -overwrite: Option to overwrite any currently existing archive file
        -use_file_set <file_set>: Option to create the archive using the specified file set
        -version_compatible_database: Option to include version-compatible database if supported
        <archive_name>: Archive file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Archives an open project and its related files into a
Quartus II Archive File (.qar).

The description of operations is as follows:

Option        Description
------        -------------------------
use_file_set  

              Creates the archive using the specified
              file set. By default, the 'basic'
              file set is used. For more information
              about file sets, type:

                 quartus_sh --archive -list_file_sets

all_revisions

              Archives all revisions.

overwrite

              Overwrites existing archive file.

include_outputs

              Includes output files in archive.

include_libraries

              Includes related Megafunction and
              IP library files.

version_compatible_database

              Includes version-compatible database
              if supported.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Default mode: Archive current revisions without output files or libraries
project_archive chiptrip.qar

## Archive all revisions without output files or libraries
project_archive chiptrip.qar -all_revisions

## Archive current revision with version-compatible database if supported
project_archive chiptrip.qar -version_compatible_database

## Same as first one, but overwrite any existing archive file
project_archive chiptrip.qar -overwrite

## Include outut files and libraries
project_archive chiptrip.qar -include_outputs -include_libraries

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Error(s) found while archiving the project. See error message(s) for details.
TCL_ERROR	1   	ERROR: Project archive failed. Some files could not be processed. Refer to the Quartus II Archive Log File (<archive_name>.qarlog).
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_archive>

<project_restore>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_restore [-h | -help] [-long_help] [-destination <directory>] [-overwrite] [-update_included_file_info] <archive_file>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -destination <directory>: Directory where restored files are placed
        -overwrite: Option to overwrite files in destination directory
        -update_included_file_info: Option to update included file information
        <archive_file>: Archive file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Restores a Quartus II Archive File (.qar) that contains 
the project and its related files.

By default, the archive is restored into the current
directory. Use the "-destination" option to restore the 
files into a new directory.

By default, the command fails if the archive already 
contains files in the destination directory. Use the 
"-overwrite" option to overwrite any existing files 
in the destination directory.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Restore archive and expand files into current directory
project_restore chiptrip.qar
## or
project_restore chiptrip.qar -destination 

## Restore archive. Expand files into current directory, 
## but overwrite any existing files in "."
project_restore chiptrip.qar -destination . -overwrite

## Restore project into a "restored" subdirectory
project_restore chiptrip.qar -destination "restored" -overwrite

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Error(s) found while restoring the archive. See error message(s) for details.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_restore>

<project_new>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_new [-h | -help] [-long_help] [-family <family>] [-overwrite] [-part <part>] [-revision <revision_name>] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -family <family>: Family name
        -overwrite: Option to overwrite existing project and revision
        -part <part>: Part name
        -revision <revision_name>: Revision name
        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Creates and opens a new project with the specified project name.

If the "-revision" option is not specified, the project name 
is used to create the revision.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create project "chiptrip" and revision "chiptrip"
project_new chiptrip

## Create project "chiptrip" and revision "auto_max"
project_new -revision auto_max chiptrip

## Create project "chiptrip" and revision "chiptrip"
## Overwrite any Quartus II Settings File (.qsf) if it exists
project_new chiptrip -overwrite

## Create project "chiptrip" and revision "chiptrip"
## Set the FAMILY assignment to Stratix
project_new chiptrip -family Stratix

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: The "-<string>" option must also be used when you use the "-<string>" option. Specify both options.
TCL_ERROR	1   	ERROR: Can't create project: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name using the "-<string>" option.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name.
TCL_ERROR	1   	ERROR: Can't create settings files for project: <string>. Make sure the .psf, .csf, and .ssf files are writeable.
TCL_ERROR	1   	ERROR: Can't open project: <string>
TCL_ERROR	1   	ERROR: Can't remove Quartus II Settings File: <string>. Make sure the file is writeable.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Project already exists: <string>. Specify a different project name or use the "-overwrite" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_new>

<project_open>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_open [-h | -help] [-long_help] [-current_revision] [-error_on_incompatible_database] [-revision <revision_name>] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -current_revision: Option to open the current revision automatically
        -error_on_incompatible_database: Option not to open the project and issue and error if the database version is incompatible
        -revision <revision_name>: Revision name
        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Opens an existing project. To create a new project, use the 
"project_new" command.

If the "-revision" option is not specified, the project name
is used to open the revision.

By default, opening the project overwrites the database
created in a different version of the Quartus II software.
However, if the "-error_on_incompatible_database" option is
specified, instead of opening the project, an error is issued 
when the database version differs from the current version of the 
Quartus II software.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Open project "chiptrip" and revision "chiptrip"
project_open chiptrip

## Open project "chiptrip" and revision "auto_max"
project_open -revision auto_max chiptrip

## Get the current revision before opening
## the project with the current revision
set project_name chiptrip
set current_revision [get_current_revision $project_name]
project_open -revision $current_revision $project_name
puts [get_global_assignment -name FAMILY]
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Project is already open: <string>
TCL_ERROR	1   	ERROR: Can't open project: <string>. First close the currently open project: <string>.
TCL_ERROR	1   	ERROR: Can't open project: <string>
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Cannot open project: <string>. The project is not compatible with the installed version of the Quartus II software. Opening the project will overwrite the old project database. If you wish to overwrite the old project database, make sure to specify the -<string> option.
TCL_ERROR	1   	ERROR: Can't open revision: <string> (project: <string>). The revision is not compatible with the installed version of the Quartus II software. Opening the revision will overwrite the old revision database. If you wish to overwrite the old revision database, make sure to specify the -<string> option.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_open>

<set_current_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_current_revision [-h | -help] [-long_help] [-force] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -force: Option to open the revision and overwrite the compilation database if the database version is incompatible.
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Sets the specified revision name as the current revision.

In 8.1 or later versions of Quartus II software, set_current_revision
gives an error when the compilation database version is not
compatible with the current version of Quartus II software.
You may specify the "-force" option to avoid the error
and overwrite the database.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Sets "auto_max" as the current revision 
set_current_revision auto_max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Revision is already the current revision: <string>. No action is required.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision file does not exist: <string>.qsf. Use "delete_revision" to delete the revision from the current project. Then use "create_revision" to create the revision and its .qsf before setting <string> as the current revision.
TCL_ERROR	1   	ERROR: Revision is not included in the current project: <string> . Use the "create_revision" command to create the revision.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_current_revision>

<get_current_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_current_revision [-h | -help] [-long_help] [<project_name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns the name of the current revision for the specified 
project. If the project name is not specified, the current 
project name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the current revision name for
# the currently open project "chiptrip"
project_open chiptrip
set revision_name [get_current_revision]
project_close

# Get the current revision name for
# a project that is not currently open
set revision_name [get_current_revision chiptrip]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_current_revision>

<create_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_revision [-h | -help] [-long_help] [-based_on <revision_name>] [-copy_results] [-set_current] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -based_on <revision_name>: Revision name on which new revision bases its settings
        -copy_results: Option to copy results from "based_on" revision
        -set_current: Option to set new revision as current revision
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Creates the specified revision. If the revision is not 
included in the current project, a new revision is 
created in the project with default settings. 

If you specify the "-set_current" option, this command 
sets the newly created revision as the current revision.

If you specify the "-based_on" option, the command creates 
a new revision in the project based on the settings of the 
based-on revision specified by the option.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create a new revision called "tmp"
create_revision tmp

## Create a new revision called "tmp"
## and set it as the current revision
create_revision tmp -set_current
## This method is the same as 
create_revision tmp
set_current_revision tmp

## Create a new revision called "speed_ch"
## with settings based on "chiptrip"
## and set it as the current revision
create_revision speed_ch -based_on chiptrip -set_current

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Revision is already the current revision: <string>. No action is required.
TCL_ERROR	1   	ERROR: Based-on revision is not included in the current project: <string>. Make sure the based-on revision name is spelled correctly and included in the current project.
TCL_ERROR	1   	ERROR: Can't create revision because the current project uses the device family: <string>. Change the device family or create the revision in another project that uses a different device family.
TCL_ERROR	1   	ERROR: Can't create file: <string>. Make sure you have permission to write to the specified file.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name.
TCL_ERROR	1   	ERROR: Can't remove file: <string>. Make sure the file is not read-only and you have permission to write to the specified file.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Didn't create revision because it is already included in current project: <string>. If you want a new revision, specify a different revision name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_revision>

<delete_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: delete_revision [-h | -help] [-long_help] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Deletes the specified revision from the current project. The corresponding
<revision name>.qsf file is deleted as well.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Delete the revision called "tmp"
delete_revision tmp

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't delete the current revision: <string>. Specify a different revision name.
TCL_ERROR	1   	ERROR: Can't delete revision  because it is not included in the current project: <string> . Specify a revision name that is included in the project.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</delete_revision>

<revision_exists>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: revision_exists [-h | -help] [-long_help] [-project <project_name>] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -project <project_name>: Project name
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Checks whether the revision exists for the specified project
or currently open project. 

Returns 1, if the revision exists; returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Check if the specified revision exists
## in the specified project
if [revision_exists -ARG(project) chiptrip speed_ch] {
	puts "Revision exists"
} else {
	puts "Revision does not exist"
}

## Create revision for the currently open 
## project if it does not exist
## Set the current revision otherwise
project_open chiptrip
if [revision_exists speed_ch] {
	set_current_revision speed_ch
} else {
	create_revision speed_ch
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</revision_exists>

<get_project_revisions>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_project_revisions [-h | -help] [-long_help] [<project_name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns a list of revisions included in the specified project.
If the project name is not specified, the current project name
is used by default.

The first element in the list of revisions is the current
revision and is the same as the return value for the
"get_current_revision" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Set the device family assignment to Stratix 
# for all revisions
project_open chiptrip
set original_revision [get_current_revision]

foreach revision [get_project_revisions] {
	puts "$revision"
	set_current_revision $revision
	set_global_assignment -name FAMILY Stratix
	export_assignments
}

set_current_revision $original_revision
project_close

# Open the project with the first available revision 
# and set the device family assignment to Stratix
set revision [lindex [get_project_revisions chiptrip] 0]
open_project -revision $revision chiptrip
set_global_assignment -name FAMILY Stratix
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_project_revisions>

<export_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: export_assignments [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Exports assignments for the current revision to the Quartus II 
Settings File (.qsf).

Assignments created or modified during an open project are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## The most common use of export_assignments is to
## call it before doing a system call
## to call a compiler command-line executable
project_open $project_name
set_global_assignment -name FAMILY Stratix

## Before calling quartus_map, 
## write out the FAMILY assignment
export_assignments

## Now, call quartus_map
qexec "[file join $::quartus(binpath) quartus_map] $project_name"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</export_assignments>

<get_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_names [-h | -help] [-long_help] -filter <wildcard> [-node_type <all|comb|reg|pin|input|output|bidir|hierarchy|mem|bus|qsf>] [-observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -filter <wildcard>: Option to specify the node's full path name and/or wildcard character(s)
        -node_type <all|comb|reg|pin|input|output|bidir|hierarchy|mem|bus|qsf>: Option to filter based on the specified node type.
        -observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>: Option to filter based on the specified observable type
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns a filtered output collection of all matching
node name IDs found in a compiled Quartus(R) II project. 

To access each element of the output collection, use the Tcl 
command "foreach_in_collection". To see example usage, type 
"get_names -long_help" or "foreach_in_collection -long_help".

If the "-node_type" option is not specified, the default
value is "all". Similarly, if the "-observable_type" option
is not specified, the default value is "all".

The node type "pin" includes "input", "output", and "bidir".
The node type "qsf" include names from qsf settings file.
The node type "all" includes all node types.
 
The value for "-observable_type" option can be one of 
the following:

Observable Type      Description
---------------      -----------------------------------
all                  Use post-Fitter information. If it is
                     not available, post-Synthesis
                     information is used. Otherwise,
                     pre-synthesis information is used if it
                     exists.
pre_synthesis        Use pre-synthesis information.
post_synthesis       Use post-synthesis information.
post_fitter          Use post-Fitter information.
post_asm             Use post-Assembler information. The
                     post-Assembler information is only supported
                     for designs using the HardCopy II device family.
stp_pre_synthesis    Use SignalTap II pre-synthesis information.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Search for a single post-Fitter pin with the name accel and 
# make assignments
set accel_name_id [get_names -filter accel -node_type pin -observable_type post_fitter]
foreach_in_collection name_id $accel_name_id {

	# Get the full path name of the node
	set target [get_name_info -info full_path $name_id]

	# Set multicycle assignment
	set_multicycle_assignment -to $target 2

	# Set location assignment
	set_location_assignment -to $target Pin_E22
}
# Search for nodes of any post-Fitter node type with name length <= 5
# The default node type is "all"
set name_ids [get_names -filter ????? -observable_type post_fitter]
foreach_in_collection name_id $name_ids {

	# Print the name id
	puts $name_id

	# Print the node type
	puts [get_name_info -info node_type $name_id]

	# Print the full path (which excludes the current
	# focus entity from the path)
	puts [get_name_info -info full_path $name_id]
}
# Search for nodes of any post-Fitter node type that end in "eed".
# The default node type is "all"
set name_ids [get_names -filter *eed -observable_type post_fitter]
foreach_in_collection name_id $name_ids {

	# Print the name id
	puts $name_id

	# Print the node type
	puts [get_name_info -info node_type $name_id]

	# Print the full path (which excludes the current
	# focus entity from the path)
	puts [get_name_info -info full_path $name_id]
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Illegal node type: <string>.  Specify "all", "comb", "reg", "pin", "hierarchy", or "bus".
TCL_ERROR	1   	ERROR: Illegal observable type: <string>.  Specify "all", "pre_synthesis", "post_synthesis", or "post_fitter".
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Post-Assembler compiler database does not exist for revision name: <string>. Run Assembler (quartus_asm) with the specified revision name before using this Tcl command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_names>

<get_name_info>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_name_info [-h | -help] [-long_help] [-get_synonyms] [-info <parent_name_id|base_name|entity_name|instance_name|full_path|short_full_path|node_type|creator|signaltapii|file_location>] [-observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>] [-use_cached_database] <name_id>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -get_synonyms: Option to get a Tcl list of synonym name ids. This is an advanced Quartus II Tcl option.
        -info <parent_name_id|base_name|entity_name|instance_name|full_path|short_full_path|node_type|creator|signaltapii|file_location>: Option to specify the type of information to display.
        -observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>: Option to specify the observable type of the name ID
        -use_cached_database: Option not to check the compilation database for updates. Use this option only if you do not compile the project after getting the name IDs from "get_names" command. If you compile the project, you must re-run "get_names" command again to refresh the cached database information before using this option. This is an advanced Quartus II Tcl option.
        <name_id>: Option to specify the node name ID
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Displays the specified type of information for the specified node 
name id. Type "get_names -long_help" to view how to get a collection 
of node name IDs.

If the "-observable_type" option is not specified, the default 
value is "all". The specified observable type must have the same 
observable type as specified in the "get_names" Tcl command which 
returned the currently specified node name id.

The value for "-observable_type" option can be one of 
the following:

Observable Type      Description
---------------      -----------------------------------
all                  Use post-Fitter information. If it is
                     not available, post-synthesis
                     information is used. Otherwise,
                     pre-synthesis information is used if it
                     exists.
pre_synthesis        Use pre-synthesis information.
post_synthesis       Use post-synthesis information.
post_fitter          Use post-Fitter information.
post_asm             Use post-Assembler information. The
                     post-Assembler information is only supported
                     for designs using the HardCopy II device family.
stp_pre_synthesis    Use SignalTap II pre-synthesis information.


The info type for the "-info" option can be one of 
the following:

Info Type            Description
--------------       -----------------------------------
parent_name_id       The name id for the node's parent.
base_name            The node name, which consists of an 
                     entity name and/or an instance name 
                     separated by a colon if necessary.
entity_name          The entity name.
instance_name        The instance name.
full_path            The full hierarchy path name, which 
                     consists of entity name(s) and/or the 
                     instance name(s). This path name 
                     excludes the current focus entity.
                     If there is nothing shown, the
                     name id is the current focus entity's 
                     name id.
short_full_path      The short full hierarchy path name, 
                     which consists of the instance name(s).
                     This path name excludes the current 
                     focus entity. If nothing is 
                     shown, the name id is the
                     current focus entity's name id.
node_type            The node type, which can be one of 
                     the types supported by "get_names",
                     namely, "input", "output", "bidirectional",
                     "register", "combinational",
                     "hierarchy", "memory", or "bus".
                     If "pin" type was specified for 
                     "get_names" command, the node type shown
                     here is expanded to be "input", "output", or
                     "bidirectional".
                     Node type value of "qsf" indicates name 
                     originates from qsf settings file.
creator              The creator of the node, which is either
                     "user_entered" or "compiler_generated".
signaltapii          If this node can be connected to a
                     SignalTap(R) II embedded logic analyzer, 
                     1 is shown. Otherwise, 0 is shown.
file_location        The source file location. For example,
                     the source file location for the entity
                     chiptrip is "chiptrip.v". To get the full
                     path to the source file, use the command
                     "resolve_file_path" which exists only in
                     version 4.0 or later of ::quartus::project
                     package.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the name id of the current focus entity
set current_focus_entity_id [get_top_level_entity]

# The full path name of the current focus entity
# is empty because the full path excludes the 
# current focus entity
set msg "Full path of the current focus entity => ("
append msg [get_name_info -info full_path $current_focus_entity_id]
append msg ")"
puts $msg
puts ""

# Get the node type of the current focus entity
# The node type should be a hierarchy type
set msg "Node type of the current focus entity => ("
append msg [get_name_info -info node_type $current_focus_entity_id]
append msg ")"
puts $msg

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Illegal info type: <string>.  Specify "parent_name_id", "base_name", "entity_name", "instance_name", "full_path", "short_full_path", "node_type", "creator", or "signaltapii".
TCL_ERROR	1   	ERROR: Illegal name id: <string>.  Specify a name id that exists in a compiled Quartus II project.
TCL_ERROR	1   	ERROR: Invalid name id: <string>.  Specify an integer greater than or equal to zero.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Post-Assembler compiler database does not exist for revision name: <string>. Run Assembler (quartus_asm) with the specified revision name before using this Tcl command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_name_info>

<get_top_level_entity>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_top_level_entity [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns the name id for the current focus entity.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the name id of the current focus entity
set current_focus_entity_id [get_top_level_entity]

# Print out the entity name of the current focus entity
set msg "Entity name of the current focus entity => ("
append msg [get_name_info -info entity_name $current_focus_entity_id]
append msg ")"
puts ""
puts $msg

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_top_level_entity>

<get_all_assignment_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_assignment_names [-h | -help] [-long_help] [-family <family>] [-module <all|map|fit|tan|asm|eda|drc|generic>] [-type <all|global|instance>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -family <family>: Option to filter based on the specified device family. Defaults to all families.
        -module <all|map|fit|tan|asm|eda|drc|generic>: Option to filter based on the specified flow module. Defaults to all.
        -type <all|global|instance>: Option to filter based on the specified assignment type. Defaults to all.
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns a filtered output list of all available, matching
assignment names.

The module option takes one of the following values:

Module           Description
--------         -------------------------------------
map              Analysis & Synthesis assignment names
fit              Fitter assignment names
tan              Classic Timing Analyzer assignment names
asm              Assembler assignment names
eda              EDA Netlist Writer assignment names
drc              Design Assistant assignment names
generic          Other assignment names not included in any 
                 of the above flow modules
all              All assignment names
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all available global assignments
foreach i [get_all_assignment_names -type global] {
    puts $i
}

## Print out all available global assignments
## for the Stratix family
foreach i [get_all_assignment_names -type global -family Stratix] {
    puts $i
}

## Print out all available global assignments
## for the Stratix family required
## by the Analysis & Synthesis module
foreach i [get_all_assignment_names -type global -family Stratix -module map] {
    puts $i
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal flow module: <string>.  Specify "<string>", "<string>", "<string>", "<string>", "<string>", "<string>", "<string>", or "<string>".
TCL_ERROR	1   	ERROR: Illegal type: <string>.  Specify "<string>", "<string>", or "<string>".
TCL_ERROR	1   	ERROR: Illegal device family: <string>.  Specify a legal device family.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_assignment_names>

<set_user_option>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_user_option [-h | -help] [-long_help] -name <name> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name
        <value>: User option value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Sets the user option value for the name specified by
the "-name" option. The user option is written to
the quartus2.ini file.

To get a list of all available user option names, use
the "get_all_user_option_names" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set TALKBACK_ENABLED to "on"
set_user_option -name TALKBACK_ENABLED on

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal user option name: <string>. Specify a legal user option name. To get a list of legal names, use the "get_all_user_option_names" command.
TCL_ERROR	1   	ERROR: Illegal user option value: <string>. Specify a legal user option value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_user_option>

<get_user_option>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_user_option [-h | -help] [-long_help] -name <name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns the user option value for the name specified by
the "-name" option.

To get a list of all available user option names, use
the "get_all_user_option_names" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the value for the user option
## "TALKBACK_ENABLED"
set value [get_user_option -name TALKBACK_ENABLED]
puts "TALKBACK_ENABLED = $value"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal user option name: <string>. Specify a legal user option name. To get a list of legal names, use the "get_all_user_option_names" command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_user_option>

<get_all_user_option_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_user_option_names [-h | -help] [-long_help] [-name <name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns a filtered output list of all available, matching
user option names.

If the "-name" option is not specified, all available user
option names are returned. Otherwise, only the matching
user option names are returned.

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all available user option names
foreach i [get_all_user_option_names] {
    puts $i
}

## Display all user option names that contain
## the word "talkback" and also display the 
## value for each of the user option names
foreach i [get_all_user_option_names -name *talkback*] {
	set name $i
	set value [get_user_option -name $i]
    puts "$name = $value"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_user_option_names>

<resolve_file_path>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: resolve_file_path [-h | -help] [-long_help] <file_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <file_name>: Option to specify the file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns the resolved full path of the specified file name.
If the file does not exist, the original file name is 
returned.

The Quartus II software resolves relative paths by searching
for the file in the following directories in the following
order:

1) Project directory, which is the directory where the
   Quartus II Settings File (.qsf) is found.
2) Project database directory, which is the "db" directory
   found under the project directory.
3) Project library directories, which are the directories
   containing the user-specified libraries that are used 
   only by the current project.
4) User library directories, which are the directories
   containing the user-specified libraries that are
   used by all Quartus II projects.
5) Quartus II library directory, which is the directory
   containing Quartus II libraries.
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_new chiptrip -overwrite

# Set one Verilog source file assignment
set_global_assignment -name VERILOG_FILE chiptrip.v

# Display the resolved full path of the Verilog
# source file assignment
set filename [get_global_assignment -name VERILOG_FILE]
set resolved_fullpath [resolve_file_path $filename]

puts "Full Path: $resolved_fullpath"

# Set more Verilog source file assignments
set_global_assignment -name VERILOG_FILE auto_max.v
set_global_assignment -name VERILOG_FILE speed_ch.v
set_global_assignment -name VERILOG_FILE tick_cnt.v
set_global_assignment -name VERILOG_FILE time_cnt.v

# Display the resolved full path of all the Verilog
# source file assignments
set file_asgns [get_all_global_assignments -name VERILOG_FILE]
foreach_in_collection file_asgn $file_asgns {

    ## Each element in the collection has the following
    ## format: {} {VERILOG_FILE} {<file_name>}

    set filename [lindex $file_asgn 2]
    set resolved_fullpath [resolve_file_path $filename]

    puts "Full Path: $resolved_fullpath"
}

project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</resolve_file_path>

<test_assignment_trait>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: test_assignment_trait [-h | -help] [-long_help] -name <name> -trait <trait_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: Assignment name
        -trait <trait_name>: Trait name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Checks whether the assignment name has the specified trait.
Returns 1, if the assignment name has the trait;
returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Test if the assignment name is case-sensitive
if {[test_assignment_trait -name VHDL_FILE -trait CASE_SENSITIVE]} {
	puts "VHDL_FILE assignment is case-sensitive."
} else {
	puts "VHDL_FILE assignment is not case-sensitive."
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Illegal trait: <string>. Specify a legal trait name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</test_assignment_trait>

<get_assignment_info>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_assignment_info [-h | -help] [-long_help] [-entity] [-from] [-get_tcl_command] [-name] [-section_id] [-tag] [-to] [-value] <asgn_id>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity: Option to get the assignment entity
        -from: Option to get the assignment source
        -get_tcl_command: Option to get the tcl command that sets the assignment
        -name: Option to get the assignment name
        -section_id: Option to get the assignment section id
        -tag: Option to get the assignment tag
        -to: Option to get the assignment destination
        -value: Option to get the assignment value
        <asgn_id>: Assignment id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns information for the assignment id based on the
specified option.

The assignment id is obtained from the "get_all_assignments"
Tcl command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

    ## View all the instance assignments
foreach_in_collection asgn_id [get_all_assignments -type instance -name *] {

    set from   [get_assignment_info $asgn_id -from]
    set to     [get_assignment_info $asgn_id -to]
    set name   [get_assignment_info $asgn_id -name]
    set value  [get_assignment_info $asgn_id -value]
    set entity [get_assignment_info $asgn_id -entity]
    set tag    [get_assignment_info $asgn_id -tag]

    puts "$entity: $name ($from -> $to) = $value"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal assignment id: <string>. Specify a legal assignment id that was retrieved from the Tcl command "get_all_assignments".
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_assignment_info>

<get_all_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_assignments [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] -name <name> [-section_id <section id>] [-tag <data>] [-to <destination>] -type <global|instance|parameter|default>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity name
        -from <source>: Source name (string pattern is matched using Tcl string matching)
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination name (string pattern is matched using Tcl string matching)
        -type <global|instance|parameter|default>: Option to specify the type of assignments to return
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns a collection of all matching global, instance, parameter,
or default assignment ids. To iterate through each assignment id
in this collection, use the Tcl command "foreach_in_collection".

To view details for the assignment that is associated with the
assignment id, use the Tcl command "get_assignment_info".

The "get_all_assignments" command is easier to use than the
deprecated commands listed in Table 1.


* Table 1. The -type Option

Value for
-type Option  Deprecated Tcl command        Description
------------  ----------------------        -----------
default       get_all_quartus_defaults      Returns only default assignments.

global        get_all_global_assignments    Returns only global assignments.

instance      get_all_instance_assignments  Returns only instance assignments.

parameter      get_all_parameters            Returns only parameter assignments.


The "-name" option is not case sensitive.
The "-to" and "-from" options are case sensitive.

These options can take string patterns containing special 
characters from the set "*?\[]" as values. The values are 
matched using Tcl string matching. Note that bus names are
automatically detected and do not need to be escaped. Bus
names have the following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
get_all_assignments -type instance -name LOCATION -to a[0]

# To match all indices of bus "a", type:
get_all_assignments -type instance -name LOCATION -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

get_all_assignments -type instance LOCATION -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

This Tcl command reads in the global, instance, and parameter
assignments found in the Quartus II Settings File (.qsf) and
reads in the default assignments found inside the
Quartus II Default Settings File (.qdf).

If you tagged data by making assignments with the -tag option,
then the information can be searched using the -tag option.

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one clock section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, use the -section_id option.

For entity-specific assignments, use the "-entity" option to 
retrieve assignments from a specific entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

    ## View all the timing requirements using wildcards
    ## to match TSU_REQUIREMENT, TCO_REQUIREMENT,
    ## and others.
foreach_in_collection asgn_id [get_all_assignments -type instance -name *_REQUIREMENT] {

    set from   [get_assignment_info $asgn_id -from]
    set to     [get_assignment_info $asgn_id -to]
    set name   [get_assignment_info $asgn_id -name]
    set value  [get_assignment_info $asgn_id -value]
    set entity [get_assignment_info $asgn_id -entity]
    set sid    [get_assignment_info $asgn_id -section_id]
    set tag    [get_assignment_info $asgn_id -tag]

    puts "$entity: $name ($from -> $to) = $value"
}

    ## View all global assignments
foreach_in_collection asgn_id [get_all_assignments -type global -name *] {

    set name   [get_assignment_info $asgn_id -name]
    set value  [get_assignment_info $asgn_id -value]
    set entity [get_assignment_info $asgn_id -entity]
    set sid    [get_assignment_info $asgn_id -section_id]
    set tag    [get_assignment_info $asgn_id -tag]

    puts "$entity: $name = $value"
}

    ## View all project-wide default parameter values
foreach_in_collection asgn_id [get_all_assignments -type parameter -name *] {

    set name  [get_assignment_info $asgn_id -name]
    set value [get_assignment_info $asgn_id -value]
    set tag    [get_assignment_info $asgn_id -tag]

    puts "$name = $value"
}

    ## View all entity-specific parameter values
foreach_in_collection asgn_id [get_all_assignments -type parameter -name * -to *] {

    set dest  [get_assignment_info $asgn_id -to]
    set name  [get_assignment_info $asgn_id -name]
    set value [get_assignment_info $asgn_id -value]
    set tag    [get_assignment_info $asgn_id -tag]

    puts "$name (-> $dest) = $value"
}

    ## View all default assignments
foreach_in_collection asgn_id [get_all_assignments -type default -name * -to *] {

    set name    [get_assignment_info $asgn_id -name]
    set value   [get_assignment_info $asgn_id -value]

    puts "$name = $value"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Illegal assignment type: <string>. Specify "<string>", "<string>", "<string>", or "<string>".
TCL_ERROR	1   	ERROR: Illegal option "<string>". The specified option is illegal for <string> assignments.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_assignments>

<get_clocks>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_clocks [-h | -help] [-long_help] [-tag <data>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -tag <data>: Option to tag data to this assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns a list of lists consisting of node name and clock 
setting name. The output has the following format:

{{<node name #1> <clock setting name #1>}
 {<node name #2> <clock setting name #2>}
 ...
 {<node name #N> <clock setting name #N>}}

If <node name> is empty, <clock setting name> was not assigned 
to any node. If <clock setting name> is empty, <node name> 
was assigned to an undefined <clock setting name>.

You can create <clock setting name> using the 
"create_base_clock" or "create_relative_clock" commands. You 
can create node names using the following command:

set_instance_assignment -name CLOCK_SETTINGS -to <clock setting name> <node name>
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Search for all pairs of node names and clock setting names
# and print the information

set clock_lists [get_clocks]

foreach clock_asgn $clock_lists {
     set node_name [lindex $clock_asgn 0]
     set clock_setting_name [lindex $clock_asgn 1]

     if { $node_name == "" } {
          puts "No node uses the clock \"$clock_setting_name\""
     } elseif {$clock_setting_name == ""} {
          puts "The node \"$node_name\" uses an undefined clock setting";
     } else {
          puts "The node \"$node_name\" uses the clock \"$clock_setting_name\""
     }
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_clocks>

<create_relative_clock>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_relative_clock [-h | -help] [-long_help] -base_clock <Base clock> [-comment <comment>] [-disable] [-divide <integer>] [-duty_cycle <integer>] [-entity <entity>] [-invert] [-multiply <integer>] [-no_target] [-offset <offset>] [-phase_shift <integer>] [-tag <data>] [-target <name>] [-virtual] <clock_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -base_clock <Base clock>: Base clock name
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -divide <integer>: Base clock division factor
        -duty_cycle <integer>: Duty cycle
        -entity <entity>: Entity to which to add clock assignment
        -invert: Option to invert base clock
        -multiply <integer>: Base clock multiplication factor
        -no_target: Option to not assign clock to node
        -offset <offset>: Offset from base clock
        -phase_shift <integer>: Phase shift from base clock
        -tag <data>: Option to tag data to this assignment
        -target <name>: Clock node name
        -virtual: Option to specify the clock as a virtual clock
        <clock_name>: Clock name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Creates a relative clock that derived from the absolute clock.

The "-offset" option can take the format:

<floating point time value><time unit>

For example, if the offset is 10.55ns, "10.55" is the
<floating point time value> and "ns" is the <time unit>.

The following table displays possible time units:

Time Unit                 Description
---------                 --------------
s                         second(s)
ms                        millisecond(s)
us                        microsecond(s)
ns                        nanosecond(s)
ps                        picosecond(s)
fs                        femtosecond(s)

The "-phase_shift" option takes an integer that represents
degrees of phase shift from the base clock period. For example, 
if a base clock has a period of 10ns and clk2 is a relative
clock derived from the base clock. A phase shift value of 45
applies a 45 degree phase shift to clk2, producing an offset
of 1.25ns from the base clock. For a given relative clock,
you may specify a phase shift, an offset, or both. If both
are specified, they are additive.

If you specify the "-virtual" option, the relative clock
is not assigned to any node in the timing netlist. You cannot
specify the "-virtual" option and the "-target" option 
at the same time.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If you do not specify
the "-entity" option, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify a base clock of 10ns
create_base_clock -fmax 10ns clk10

## Specify a relative clock with 2/3 the period
create_relative_clock -base_clock clk10 -multiply 2 -divide 3 clk2_3

## Specify a relative clock with a phase shift of 45 degrees
create_relative_clock -base_clock clk10 -phase_shift 45 clk_45
## or, equivalently, with an offset of 1.25ns
create_relative_clock -base_clock clk10 -offset 1.25ns clk_45

## Specify the entity name to which the clock
## is added, using the -entity option
## This is needed if the top-level entity name is 
## other than that of the project
## The following command generates a "top_level" entity
create_relative_clock -base_clock clk10 -entity top_level -multiply 2 -divide 3 clk2_3

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Options are mutually exclusive: <string> and <string>. Specify only one of the two options.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_relative_clock>

<create_base_clock>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_base_clock [-h | -help] [-long_help] [-comment <comment>] [-disable] [-duty_cycle <integer>] [-entity <entity>] -fmax <fmax> [-no_target] [-tag <data>] [-target <name>] [-virtual] <clock_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -duty_cycle <integer>: Duty cycle
        -entity <entity>: Entity to which to add clock assignment
        -fmax <fmax>: Clock frequency
        -no_target: Option to not assign clock to node
        -tag <data>: Option to tag data to this assignment
        -target <name>: Clock node name
        -virtual: Option to specify the clock as a virtual clock
        <clock_name>: Clock name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Creates the base clock. The base clock is an absolute clock.

The "-fmax" option can take the format:

<floating point time value><time unit>

For example, if the fmax is 10.55ns, "10.55" is the
<floating point time value> and "ns" is the <time unit>.

The following table displays possible time units:

Time Unit                 Description
---------                 --------------
s                         second(s)
ms                        millisecond(s)
us                        microsecond(s)
ns                        nanosecond(s)
ps                        picosecond(s)
fs                        femtosecond(s)
Hz                        hertz
KHz                       kilohertz
MHz                       megahertz
GHz                       gigahertz

If you specify the "-virtual" option, the base clock
is not assigned to any node in the timing netlist. You cannot
specify the "-virtual" option and the "-target" option 
at the same time.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If you do not specify
the "-entity" option, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Specify a clock named "clk50" with
# a 50ns period
# The command specifies a CLOCK section
# in the active project with the 50ns
# specification, and adds a
# "clk50 : CLOCK_SETTING=clk50" assignment
# to the current entity
create_base_clock -fmax 50ns clk50

# Specify the same clk50 to a pin with
# a different name (myclkpin)
create_base_clock -fmax 50ns -target myclkpin clk50

# Specify the entity name to which the clock
# is added, using the -entity option
# This is needed if the top-level entity name 
# is other than that of the project
# The following command generates a "top_level" entity.
create_base_clock -fmax 50ns -entity top_level clk50

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: The option "-<string>" was ignored because it is no longer supported. No action is required.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Options are mutually exclusive: <string> and <string>. Specify only one of the two options.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_base_clock>

<get_location_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_location_assignment [-h | -help] [-long_help] [-tag <data>] -to <destination>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns the value of a location assignment.

The "-chip" option is not case sensitive.
The "-to" option is case sensitive.
<<<long_help_section>>>

--------------
Example Usage:
--------------

get_location_assignment -to dst		

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_location_assignment>

<set_location_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_location_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-remove] [-tag <data>] -to <destination> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -remove: Option to remove assignment
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Sets or removes a location assignment.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

set_location_assignment -to dst LOC

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_location_assignment>

<remove_all_instance_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_instance_assignments [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] -name <name> [-section_id <section id>] [-tag <data>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of the assignment (string pattern is matched using Tcl string matching)
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of the assignment (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Removes all matching instance assignment values.

The "-name" option is not case sensitive.
The "-to" and "-from" options are case sensitive.

These options can take string patterns containing special 
characters from the set "*?\[]" as values. The values are 
matched using Tcl string matching. Note that bus names are
automatically detected and do not need to be escaped. Bus
names have the following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
remove_all_instance_assignments -name LOCATION -to a[0]

# To match all indices of bus "a", type:
remove_all_instance_assignments -name LOCATION -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

remove_all_instance_assignments -name LOCATION -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

This Tcl command reads the instance assignments found in
the Quartus II Settings File (.qsf) and removes this data based 
on the values specified by the "-name", "-from", and "-to"
options.

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
remove the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

Assignments removed by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Remove all the timing requirements
## Use wildcards to catch TSU_REQUIREMENT, TCO_REQUIREMENT,
## and others
remove_all_instance_assignments -name *_REQUIREMENT

## Remove all the location assignments with
## the destination bus name "timeo".
set bus_name "timeo"
remove_all_instance_assignments -name LOCATION -to $bus_name[*]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> instance assignment(s) were removed
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_instance_assignments>

<get_all_instance_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_instance_assignments [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] -name <name> [-section_id <section id>] [-tag <data>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of assignment (string pattern is matched using Tcl string matching)
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of assignment (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns a filtered output collection of all matching instance
assignment values. To access each element of this output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

In version 5.0 of the ::quartus::project package, two new
Tcl commands "get_all_assignments" and "get_assignment_info"
have been introduced to replace the "get_all_instance_assignments"
command. These two new commands simplify the interface to retrieve
information about Quartus II Settings File (.qsf) assignments.
The "get_all_instance_assignments" command is still supported 
for backward compatibility. 

The "-name" option is not case sensitive.
The "-to" and "-from" options are case sensitive.

These options can take string patterns containing special 
characters from the set "*?\[]" as values. The values are 
matched using Tcl string matching. Note that bus names are
automatically detected and do not need to be escaped. Bus
names have the following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
get_all_instance_assignments -name LOCATION -to a[0]

# To match all indices of bus "a", type:
get_all_instance_assignments -name LOCATION -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

get_all_instance_assignments -name LOCATION -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

This Tcl command reads in the instance assignments found in
the Quartus II Settings File (.qsf). The command filters
the assignments data found in the .qsf and outputs the 
data based on the values specified by the "-name", "-from", 
and "-to" options.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Source>} {<Destination>} {<Assignment name>} {<Assignment value>} {<Entity name>} {<Tag data>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

If you tagged data by making assignments with the -tag option,
then the information will be displayed in the <Tag data> field.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the timing requirements
## using the foreach_in_collection method.
## Use wildcards to catch TSU_REQUIREMENT, TCO_REQUIREMENT,
## and others.
set asgn_col [get_all_instance_assignments -name *_REQUIREMENT]

foreach_in_collection asgn $asgn_col {

    ## Each element in the collection has the following
    ## format: { {} {<Source>} {<Destination>} {<Assignment name>} {<Assignment value>} {<Entity name>} {<Tag data>} }
    set from   [lindex $asgn 1]
    set to     [lindex $asgn 2]
    set name   [lindex $asgn 3]
    set value  [lindex $asgn 4]
    set entity [lindex $asgn 5]
    set tag    [lindex $asgn 6]

    puts "$entity: $name ($from -> $to) = $value"
}

## Get all the location assignments with
## the destination bus name "timeo".
set bus_name "timeo"
set location_asgns [get_all_instance_assignments -name LOCATION -to $bus_name[*]]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_instance_assignments>

<get_instance_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_instance_assignment [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] [-front] -name <name> [-section_id <section id>] [-tag <data>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of assignment
        -front: Option to return the first assignment if there is more than one assignment found
        -name <name>: Assignment name
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns the value of the instance assignment.

The "-name" option is not case sensitive.
The "-entity", "-to", and "-from" options are case sensitive.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the TSU_REQUIREMENT from mypin to any register
set value [get_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT]
puts "TSU_REQUIREMENT(mypin->*) = $value"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> has multiple values. Use the "<string>" command to get all values or use the "<string> -front" command to get the first value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_instance_assignment>

<set_instance_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_instance_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] [-fall] [-from <source>] -name <name> [-remove] [-rise] [-section_id <section id>] [-tag <data>] [-to <destination>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -entity <entity_name>: Entity to which to add assignment
        -fall: Option applies to falling edge
        -from <source>: Source of assignment
        -name <name>: Assignment name
        -remove: Option to remove assignment
        -rise: Option applies to rising edge
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Sets or removes an instance assignment.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If the "-entity" 
option is not specified, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify a TSU_REQUIREMENT of 2ns from mypin to any register
set_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT 2ns

## Remove the TSU_REQUIREMENT from mypin to all registers
set_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT -remove

## Specify the entity to which the assignment is added, 
## use the -entity option
## This is needed if the top-level entity name is other than
## that of the project name
## The following command generates a top_level entity
set_instance_assignment -from "mypin" -to * -entity top_level -name TSU_REQUIREMENT 2ns

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> cannot be removed -- it has multiple values. Specify one value to remove or use the "<string>" command to remove all values for the assignment.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_instance_assignment>

<remove_all_global_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_global_assignments [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-section_id <section id>] [-tag <data>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Removes all matching global assignments.

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads the global assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignments data found in the .qsf and removes the data
based on the values specified by the "-name" option.

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
remove the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

Assignments removed by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Remove all the registered source files

remove_all_global_assignments -name SOURCE_FILE

# Using wildcards
remove_all_global_assignments -name SOURCE*

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> global assignment(s) were removed
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_global_assignments>

<get_all_global_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_global_assignments [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-section_id <section id>] [-tag <data>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns a filtered output collection of all matching global
assignment values. To access each element of the output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

In version 5.0 of the ::quartus::project package, two new
Tcl commands "get_all_assignments" and "get_assignment_info"
have been introduced to replace the "get_all_global_assignments"
command. These two new commands simplify the interface to retrieve
information about Quartus II Settings File (.qsf) assignments.
The "get_all_global_assignments" command is still supported for 
backward compatibility. 

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads the global assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignment data in the .qsf and outputs the data based 
on the values given by the "-name" option.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Assignment name>} {<Assignment value>} {<Entity name>} {<Tag data>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

If you tagged data by making assignments with the -tag option,
then the information will be displayed in the <Tag data> field.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the registered source files
## using the foreach_in_collection method
set file_asgn_col [get_all_global_assignments -name SOURCE_FILE]
foreach_in_collection file_asgn $file_asgn_col {

    ## Each element in the collection has the following
    ## format: {} {SOURCE_FILE} {<file_name>} {} {}
    puts [lindex $file_asgn 2]
}

## Print out all global assignments
set asgn_col [get_all_global_assignments -name *]

foreach_in_collection asgn $asgn_col {

    ## Each element in the collection has the following
    ## format: { {} {<Assignment name>} {<Assignment value>} {<Entity name>} {<Tag data>} }
    set name   [lindex $asgn 1]
    set value  [lindex $asgn 2]
    set entity [lindex $asgn 3]
    set tag    [lindex $asgn 4]

    puts "$entity: $name = $value"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_global_assignments>

<get_global_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_global_assignment [-h | -help] [-long_help] [-entity <entity_name>] [-front] -name <name> [-section_id <section id>] [-tag <data>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -front: Option to return the first assignment if there is more than one assignment found
        -name <name>: Assignment name
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns the value of the global assignment.

The "-name" option is not case sensitive.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the value of the FAMILY assignment
get_global_assignment -name FAMILY

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> has multiple values. Use the "<string>" command to get all values or use the "<string> -front" command to get the first value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_global_assignment>

<set_global_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_global_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] -name <name> [-remove] [-section_id <section id>] [-tag <data>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -entity <entity_name>: Entity to which to add assignment
        -name <name>: Assignment name
        -remove: Option to remove assignment
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Sets or removes a global assignment.

Assignments created or modified by using this Tcl command are not
saved to the Quartus II Settings File (.qsf) unless you explicitly
call one of the following two Tcl commands (from the
::quartus::project Tcl package):

1) export_assignments 
2) project_close (unless -dont_export_assignments is specified as an
argument to project_close)

You must save assignment changes before you run Quartus(R) II
command-line executables. Note, however, that the Tcl commands
execute_flow and execute_module (from the ::quartus::flow Tcl
package) call "export_assignments" before they run
command-line executables.

For entity-specific assignments, use the -entity option to force the
assignment to specified entity. If the -entity option is not
specified, the value for the FOCUS_ENTITY_NAME assignment is used. If
the FOCUS_ENTITY_NAME value is not found, the revision name is used.

If the Quartus II Settings File contains a USER_LIBRARIES assignment
and you call set_global_assignment to set a SEARCH_PATH or
USER_LIBRARIES assignment, the existing USER_LIBRARIES assignment
expands into one or more SEARCH_PATH assignments.

Note that values that begin with a dash ("-") should be enclosed in a
backslash followed by a quote. In the following example, -02 is
enclosed by \" at the beginning and the end.

set_global_assignment -name ARM_CPP_COMMAND_LINE \"-O2\"
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify Stratix as the family to use when compiling
set_global_assignment -name FAMILY Stratix

## If the family name has empty spaces, use quotes
set_global_assignment -name FAMILY "Stratix GX"

## or remove any empty space
set_global_assignment -name FAMILY StratixGX

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: File name "<string>" exceeds maximum of <string> characters. Specify a file name with fewer characters.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> cannot be removed -- it has multiple values. Specify one value to remove or use the "<string>" command to remove all values for the assignment.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_global_assignment>

<assignment_group>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: assignment_group [-h | -help] [-long_help] [-add_exception <name>] [-add_member <name>] [-comment <comment>] [-disable] [-get_exceptions] [-get_members] [-overwrite] [-remove] [-remove_exception <name>] [-remove_member <name>] [-tag <data>] <group_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -add_exception <name>: Tcl list of exception names to add
        -add_member <name>: Tcl list of member names to add
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -get_exceptions: Option to get collection of assignment group exceptions
        -get_members: Option to get collection of assignment group members
        -overwrite: Option to overwrite existing assignment group with the same group name
        -remove: Option to remove assignment group
        -remove_exception <name>: Tcl list of exception names to remove
        -remove_member <name>: Tcl list of member names to remove
        -tag <data>: Option to tag data to this assignment
        <group_name>: Assignment group name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Adds, removes, gets members of, or gets exceptions to an
assignment group.

The "assignment_group" command replaces the deprecated
"timegroup" command.

An assignment group is a custom group of registers and pins. You can 
use the "-add_member" option to specify register or pin names 
you want to include in the assignment group. You can use the 
"-add_exception" option to specify names you want to exclude 
from the assignment group.

You can specify the names using wildcards, that is, using "?" 
or "*". For example, to add all registers and pins that start 
with a "b" except those that start with "b|c|" to a particular
assignment group named "group_b", type:

assignment_group "group_b" -add_member "b*" -add_exception "b|c|*"

To remove members or exceptions from a assignment group, use the 
"-remove_member" or "-remove_exception" options respectively.

The "-get_members" option returns a collection of members in 
the assignment group. The "-get_exceptions" option returns a collection 
of exceptions to the assignment group. To access each element of the 
collection, use the Tcl command "foreach_in_collection". To see 
example usage, type "assignment_group -long_help" or
"foreach_in_collection -long_help".

Specifying registers and pins in terms of an assignment group
allows you to set timing constraints easily. For example, to make
a multicycle assignment from nodes "a1" and "a2" to nodes "b1", 
"b2", and "b3", type the following:

assignment_group "group_a" -add_member [list "a1" "a2"]
assignment_group "group_b" -add_member [list "b1" "b2" "b3"]

set_multicycle_assignment -from "group_a" -to "group_b" 2

This command sets a multicycle assignment from every member of 
"group_a" to every member of "group_b". Quartus(R) II timing 
analysis is optimized to use assignment groups in handling timing 
constraints.

To disable assignment group assignments for the entire group,
use the "-disable" option, for example:

assignment_group "group_a" -disable

To disable a particular assignment group assignment, use the
"-disable" option with the "-add_member" or "-add_exception"
options, for example:

assignment_group "group_a" -add_member "m1" -disable
assignment_group "group_a" -add_exception "e1" -disable

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Make timing cut assignment from nodes starting
# with "r" except those starting with "r|s|"
# and except those starting with "r|t|"
# to nodes "t1", "t2", and "t3"
assignment_group "tg1" -add_member "r*" -add_exception "r|s|*"
assignment_group "tg1" -add_exception "r|t|*"

assignment_group "tg2" -add_member [list "t1" "t2" "t3"]

set_timing_cut_assignment -from "group_a" -to "group_b" 2

# Remove the "t1" from a particular assignment group named "tg2"
assignment_group "tg2" -remove_member "t1"

# Display the members of a particular assignment group named "tg1"
foreach_in_collection member [assignment_group "tg1" -get_members] {

	# Print the name of the member
	puts $member
}

# Display the exceptions to a particular assignment group named "tg1"
foreach_in_collection exception [assignment_group "tg1" -get_exceptions] {

	# Print the name of the exception
	puts $exception
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</assignment_group>

<set_input_delay>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_input_delay [-h | -help] [-long_help] [-clk_ref <clock>] [-clock_fall] [-comment <comment>] [-disable] [-max] [-min] [-remove] [-tag <data>] -to <input_pin> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -clk_ref <clock>: Reference clock name
        -clock_fall: Option to specify that delay is relative to falling edge of reference clock
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -max: Option to set maximum delay
        -min: Option to set minimum delay
        -remove: Option to remove input delay requirement
        -tag <data>: Option to tag data to this assignment
        -to <input_pin>: Input pin name or input assignment group
        <value>: Input delay value after rise of reference clock
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Specifies the required minimum or maximum delay on the input 
pin or input assignment group as specified by the "-to" option. 
The Quartus II(R) timing analysis propagates this delay and 
checks it against the actual delay. For more information 
about assignment groups, type "assignment_group -h".

The "assignment_group" command replaces the deprecated
"timegroup" command in ::quartus::project, version 5.0.

If both "-min" and "-max" options are not used, then the
assignment is set for both minimum and maximum delay.

The "-clock_fall" option specifies that the input delay is 
relative to the falling edge of the reference clock. The 
rising edge of the reference clock is the default.

The <value> is the input delay after the rise or fall of the 
reference clock. If you do not specify the "-clk_ref" option, 
all clocks are assumed to be reference clocks by default.

The format of <value> is "<numerical value><time unit>", 
for example, "7.55ns". 

The following table shows the available time units:

Time Unit                  Description
----------------------     ------------------
s                          second(s)
ms                         millisecond(s)
us                         microsecond(s)
ns                         nanosecond(s)
ps                         picosecond(s)
fs                         femtosecond(s)
Hz                         Hertz
KHz                        KiloHertz
MHz                        MegaHertz
GHz                        GigaHertz
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify the required minimum and maximum input
## delays on the input pin named "ipin" relative to
## the rising edge of the reference clock named "clk1"
set_input_delay 2ns -to "ipin" -clk_ref "clk1"
## Or, equivalently,
set_input_delay 2ns -to "ipin" -clk_ref "clk1" -min -max

## Specify the required minimum input delay on 
## the input pin named "ipin" relative to the
## falling edge of the reference clock named "clk1"
set_input_delay 2ns -to "ipin" -clk_ref "clk1" -min -clock_fall

## Specify the required maximum input delay on
## input pins with names that start with "i"
## except those that start with "ibus"
assignment_group "input_pins" -add_member "i*" -add_exception "ibus*"
set_input_delay 2ns -to "input_pins" -max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_input_delay>

<set_output_delay>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_output_delay [-h | -help] [-long_help] [-clk_ref <clock>] [-clock_fall] [-comment <comment>] [-disable] [-max] [-min] [-remove] [-tag <data>] -to <output_pin> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -clk_ref <clock>: Reference clock name
        -clock_fall: Option to specify that delay is relative to falling edge of reference clock
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -max: Option to set maximum delay
        -min: Option to set minimum delay
        -remove: Option to remove output delay requirement
        -tag <data>: Option to tag data to this assignment
        -to <output_pin>: Output pin name or output assignment group
        <value>: Delay value after rise of reference clock
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Specifies the required minimum or maximum delay on the output 
pin or output assignment group as specified by the "-to" option. 
The Quartus II(R) timing analysis propagates this delay and 
checks it against the actual delay. For more information 
about assignment groups, type "assignment_group -h".

The "assignment_group" command replaces the deprecated
"timegroup" command in ::quartus::project, version 5.0.

If both "-min" and "-max" options are not used, then the
assignment is set for both minimum and maximum delay.

The "-clock_fall" option specifies that the output delay is 
relative to the falling edge of the reference clock. The 
rising edge of the reference clock is the default.

The <value> is the output delay after the rise or fall of the 
reference clock. If you do not specify the "-clk_ref" option, 
all clocks are assumed to be reference clocks by default.

The format of <value> is "<numerical value><time unit>", 
for example, "7.55ns".

The following table displays available time units:

Time Unit                  Description
----------------------     ------------------
s                          second(s)
ms                         millisecond(s)
us                         microsecond(s)
ns                         nanosecond(s)
ps                         picosecond(s)
fs                         femtosecond(s)
Hz                         Hertz
KHz                        KiloHertz
MHz                        MegaHertz
GHz                        GigaHertz
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify the required minimum and maximum output
## delays on the output pin named "opin" relative to
## the rising edge of the reference clock named "clk1"
set_output_delay 2ns -to "opin" -clk_ref "clk1"
## Or, equivalently,
set_output_delay 2ns -to "opin" -clk_ref "clk1" -min -max

## Specify the required minimum output delay on 
## the output pin named "opin" relative to the
## falling edge of the reference clock named "clk1"
set_output_delay 2ns -to "opin" -clk_ref "clk1" -min -clock_fall

## Specify the required maximum output delay on
## output pins with names that start with "o"
## except those that start with "obus"
assignment_group "output_pins" -add_member "o*" -add_exception "obus*"
set_output_delay 2ns -to "output_pins" -max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_output_delay>

<set_multicycle_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_multicycle_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-end] [-from <from_list>] [-hold] [-remove] [-setup] [-start] [-tag <data>] [-to <to_list>] <path_multiplier>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable multicycle assignment
        -end: Option to indicate that destination clock cycles should be considered for path multiplier
        -from <from_list>: List of clock names, node names, and/or assignment group names that represent start or source points of multicycle path, for example, {node1 node2 ...}
        -hold: Option to indicate that path multiplier is meant for hold
        -remove: Option to remove multicycle assignment
        -setup: Option to indicate that path multiplier is meant for setup
        -start: Option to indicate that source clock cycles must be considered for path multiplier
        -tag <data>: Option to tag data to this assignment
        -to <to_list>: List of clock names, node names, and/or assignment group names that represent end or destination points of multicycle path, for example, {node1 node2 ...}
        <path_multiplier>: Multicycle path multiplier
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Specifies that the given timing paths have multicycle setup 
or hold delays with the number of cycles specified by the 
"-path_multiplier" option. 

If neither the "-setup" nor "-hold" options are used, the 
"-setup" option is the default option. If neither the "-start" 
nor "-end" options are used, the "-end" option is the default 
option.

You must use either the "-from <from_list>" or "-to <to_list>" 
option.

Note that Quartus(R) II timing analysis is optimized to use
assignment groups for timing constraints instead of a list of nodes.
Of the following two methods to make multicycle assignments, 
method (1) is the optimal method.

(1) assignment_group "src_group" -add_member "s1"
    assignment_group "src_group" -add_member "s2"
    assignment_group "src_group" -add_member "s3"
    assignment_group "dst_group" -add_member "d1"
    assignment_group "dst_group" -add_member "d2"
    set_multicycle_assignment -from "src_group" -to "dst_group"

(2) set_multicycle_assignment -from {s1 s2 s3} -to {d1 d2}

For more information about assignment groups, type "assignment_group -h".

The "assignment_group" command replaces the deprecated
"timegroup" command in ::quartus::project, version 5.0.

The meaning of multicycle hold differs between the Quartus II 
software timing analysis and the Synopsys PrimeTime software 
timing analysis. Refer to the online Help of each software for 
more information.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Multicycle "setup" from reg1 and reg2 to any destination points
assignment_group "src_group" -add_member reg1
assignment_group "src_group" -add_member reg2
set_multicycle_assignment 2 -setup -from "src_group"

## or
assignment_group "src_group" -add_member reg1
assignment_group "src_group" -add_member reg2
assignment_group "dst_group" -add_member *
set_multicycle_assignment 2 -setup -from "src_group" -to "dst_group"

## Source multicycle "setup" to reg1 and reg2 from any source points 
assignment_group "dst_group" -add_member reg1
assignment_group "dst_group" -add_member reg2
set_multicycle_assignment 2 -setup -start -to "dst_group"

## or
assignment_group "dst_group" -add_member reg1
assignment_group "dst_group" -add_member reg2
assignment_group "src_group" -add_member *
set_multicycle_assignment 2 -setup -start -from "src_group" -to "dst_group"

## Source multicycle "hold" from src1 to dst1 and dst2 and
## from src2 to dst1 and dst2
assignment_group "src_group" -add_member src1
assignment_group "src_group" -add_member src2
assignment_group "dst_group" -add_member dst1
assignment_group "dst_group" -add_member dst2
set_multicycle_assignment 2 -hold -from "src_group" -to "dst_group"

## Source multicycle "hold" from registers clocked by clk1
## to registers clocked by clk2
## Timegroups are useful for making assignments to
## more than one node. Timegroups are not necessary 
## for making an assignment from only one clock node  
## to another clock 
set_multicycle_assignment 2 -hold -start -from clk1 -to clk2

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Invalid path multiplier value: <string>.  Specify a positive integer value.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_multicycle_assignment>

<set_timing_cut_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_timing_cut_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-from <from_pin_list>] [-remove] [-tag <data>] [-to <to_pin_list>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -from <from_pin_list>: List of start or source node names and/or assignment group names for timing path, for example, {node1 node2 ...}
        -remove: Option to remove timing cut assignment
        -tag <data>: Option to tag data to this assignment
        -to <to_pin_list>: List of end node names and/or assignment group names for timing path, for example, {node1 node2 ...}
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Specifies that the timing paths that start from the designated 
<from_pin_list> and end in the designated <to_pin_list> are 
false paths.

Nodes for the <from_pin_list> can be input pins, internal nodes, 
clock pins, or assignment groups. Nodes for the <to_pin_list> can be
output pins, internal nodes, clock pins, or assignment groups.

You must use either the "-from <from_pin_list>" or the 
"-to <to_pin_list>" option.

Note that Quartus(R) II timing analysis is optimized to use
assignment groups for timing constraints instead of a list of nodes.
Of the following two methods to make timing cut assignments, 
method (1) is the optimal method.

(1) assignment_group "src_group" -add_member "s1"
    assignment_group "src_group" -add_member "s2"
    assignment_group "src_group" -add_member "s3"
    assignment_group "dst_group" -add_member "d1"
    assignment_group "dst_group" -add_member "d2"
    set_timing_cut_assignment -from "src_group" -to "dst_group"

(2) set_timing_cut_assignment -from {s1 s2 s3} -to {d1 d2}

For more information about assignment groups, type "assignment_group -h".

The "assignment_group" command replaces the deprecated
"timegroup" command in ::quartus::project, version 5.0.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set timing cut from any source points to dst1 and dst2
assignment_group "dst_group" -add_member dst1
assignment_group "dst_group" -add_member dst2
set_timing_cut_assignment -to "dst_group"

## or
assignment_group "src_group" -add_member *
assignment_group "dst_group" -add_member dst1
assignment_group "dst_group" -add_member dst2
set_timing_cut_assignment -from "src_group" -to "dst_group"

## Set timing cut from src1 and src2 to any end points
assignment_group "src_group" -add_member src1
assignment_group "src_group" -add_member src2
set_timing_cut_assignment -from "src_group"

## or
assignment_group "src_group" -add_member src1
assignment_group "src_group" -add_member src2
assignment_group "dst_group" -add_member *
set_timing_cut_assignment -from "src_group" -to "dst_group"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_timing_cut_assignment>

<set_clock_uncertainty>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_clock_uncertainty [-h | -help] [-long_help] [-comment <comment>] [-disable] [-from <src_clock_name>] [-hold] [-remove] [-setup] [-tag <data>] -to <dst_clock_name> <value>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -from <src_clock_name>: Source clock name
        -hold: Option to specify hold time uncertainty
        -remove: Option to remove assignment
        -setup: Option to specify setup time uncertainty
        -tag <data>: Option to tag data to this assignment
        -to <dst_clock_name>: Destination clock name
        <value>: Amount of expected clock jitter
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Specifies simple or interlock clock uncertainty (or clock
jitter) used during setup and/or hold time analysis. The optional
source clock <src_clock_name> is specified for interlock
uncertainty and is not specified for simple uncertainty.

You may specify the -setup option, the -hold option, or 
neither. If neither is specified, then the command applies 
to both setup and hold.

The <value> is the expected amount of clock jitter.
The format of <value> is "<numerical value><time unit>", 
for example, "0.5ns". 

The following table displays available time units:

Time Unit                  Description
----------------------     ------------------
s                          second(s)
ms                         millisecond(s)
us                         microsecond(s)
ns                         nanosecond(s)
ps                         picosecond(s)
fs                         femtosecond(s)
Hz                         hertz
KHz                        kilohertz
MHz                        megahertz
GHz                        gigahertz

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify a simple setup uncertainty of .3ns
## and a simple hold uncertainty of .1ns
set_clock_uncertainty 0.3ns -to clk -setup
set_clock_uncertainty 0.1ns -to clk -hold

## Both of the following commands specify a
## simple setup and hold uncertainty of .3ns
set_clock_uncertainty 0.3ns -to clk
## or
set_clock_uncertainty 0.3ns -to clk -setup -hold

## Specify an interlock setup uncertainty of .3ns
## and an interlock hold uncertainty of .1ns
set_clock_uncertainty 0.3ns -to clk -from src_clk -setup
set_clock_uncertainty 0.1ns -to clk -from src_clk -hold

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal value: <string> -- Specify a positive time value.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_clock_uncertainty>

<set_parameter>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_parameter [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] -name <name> [-remove] [-tag <data>] [-to <destination>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable parameter
        -entity <entity_name>: Entity to which to add parameter
        -name <name>: Parameter name
        -remove: Option to remove parameter
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of parameter
        <value>: Parameter value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Sets or removes the specified parameter name.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

The parameters created or modified by using this Tcl command are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.

Use the "-entity" option to force the parameter to the specified
entity. If the "-entity" option is not specified, the value for 
the FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

A parameter is an attribute of a megafunction, macrofunction,
or certain primitives that determines the logic created or used
to implement the function. The parameter information can be 
used to determine the actual primitives and other subdesigns 
needed to implement the logic of the function.

The following general guidelines apply to parameters:

*  All logic options can be assigned as parameters for individual
   instances of megafunctions or macrofunctions. For a given 
   logic OPTION the precedence for parameters is:

      1) Instance specific logic option settings
      2) Instance specific parameter settings
      3) Project-wide default parameter settings

*  You cannot assign a value to the predefined Altera(R) 
   parameter DEVICE_FAMILY, which represents the device family 
   assigned for the project. However, you can use the parameter 
   value in comparisons.

*  The predefined Altera LPM_PIPELINE and LATENCY parameters 
   can be assigned to an instance of a megafunction or 
   macrofunction. However, the parameter applies only to that 
   instance, and is not inherited by the subdesigns of that 
   instance.

*  All logic options can be assigned as parameters for individual
   megafunctions or macrofunctions. However, logic options cannot 
   be assigned global, project-wide default parameter values.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set project-wide, default WIDTH parameter value
set_parameter -name WIDTH 8

## Set entity-specific SIZE parameter value
## to "my_ram" entity
set_parameter -entity my_ram -name SIZE 16

## Specify the same parameter to my_ram
## but inside "top_level" entity
set_parameter -entity top_level -to my_ram -name SIZE 16

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Removed parameter: <string>
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Parameter does not exist and cannot be removed: <string>. Specify an existing parameter name.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_parameter>

<get_parameter>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_parameter [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-tag <data>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of parameter
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns the value of the parameter.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function returns the 
parameter value for the current entity. The value is retrieved 
from the PARAMETERS section of the entity. Otherwise, the 
function returns the project-wide default parameter value
obtained from the DEFAULT_PARAMETERS section.

Use the "-entity" option to retrieve the parameter from the 
specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get project-wide, default parameter value
get_parameter -name WIDTH

## Get entity-specific parameter value
get_parameter -name inst1 -to SIZE

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_parameter>

<get_all_parameters>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_parameters [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-tag <data>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name (string pattern is matched using Tcl string matching)
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of the parameter (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns a filtered output collection of all matching parameter 
values. To access each element of this output collection, use 
the Tcl command "foreach_in_collection". To see example usage, 
type "foreach_in_collection -long_help".

In version 5.0 of ::quartus::project package, two new
Tcl commands "get_all_assignments" and "get_assignment_info"
have been introduced to replace the "get_all_parameters"
command. These two new commands simplify the interface to retrieve
information about Quartus II Settings File (.qsf) assignments.
The "get_all_parameters" command is still supported for backward
compatibility. 

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function returns 
the parameter values for the current entity. The values are 
retrieved from the PARAMETERS section of the entity. Otherwise,
the function returns the project-wide default parameter values
obtained from the DEFAULT_PARAMETERS section.

This Tcl command filters the parameter data found in the
Quartus II Settings File (.qsf) and outputs the data based on
the values specified by the "-name" and "-to" options. These
options can take string patterns containing special characters
from the set "*?\[]" as values. The values are matched using
Tcl string matching. Note that bus names are automatically
detected and do not need to be escaped. Bus names have the
following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
get_all_parameters -name * -to a[0]

# To match all indices of bus "a", type:
get_all_parameters -name * -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

get_all_parameters -name * -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

Each element of the collection is a list with the following 
format:
{ {<Destination>} {<Parameter name>} {<Parameter value>} {<Entity name>} {<Tag data>} }

If you tagged data by making assignments with the -tag option,
then the information will be displayed in the <Tag data> field.

Use the "-entity" option to retrieve the parameter values from
the specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Display all project-wide default parameter values
set parameter_col [get_all_parameters -name *]

foreach_in_collection parameter $parameter_col {

    ## Each element in the collection has the following
    ## format: { {} {<Parameter name>} {<Parameter value>} {} {} }
	set name [lindex $parameter 1]
	set value [lindex $parameter 2]

	## Now, display the content of the parameter
	puts "Parameter Name ($name)"
	puts "Parameter Value ($value)"
}

## Display all entity-specific parameter values
foreach_in_collection parameter [get_all_parameters -name * -to *] {

    ## Each element in the collection has the following
    ## format: { {Destination} {<Parameter name>} {<Parameter value>} {} {} }
	set dest [lindex $parameter 0]
	set name [lindex $parameter 1]
	set value [lindex $parameter 2]

	## Now, display the content of the parameter
	puts "Destination ($dest)"
	puts "Parameter Name ($name)"
	puts "Parameter Value ($value)"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_parameters>

<remove_all_parameters>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_parameters [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-tag <data>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name (string pattern is matched using Tcl string matching)
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of the parameter (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Removes all matching parameters.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function removes 
the parameters from the current entity. The parameters are 
removed from the PARAMETERS section of the entity. Otherwise,
the function removes the project-wide default parameters
obtained from the DEFAULT_PARAMETERS section.

This Tcl command filters the parameter data found in the
Quartus II Settings File (.qsf) and removes the data based on
the values specified by the "-name" and "-to" options. These
options can take string patterns containing special characters
from the set "*?\[]" as values. The values are matched using
Tcl string matching. Note that bus names are automatically
detected and do not need to be escaped. Bus names have the
following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
remove_all_parameters -name * -to a[0]

# To match all indices of bus "a", type:
remove_all_parameters -name * -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

remove_all_parameters -name * -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

Use the "-entity" option to remove the parameters from the 
specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.

The parameters removed by using this Tcl command are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## The following 3 examples remove project-wide,
## default parameter values
remove_all_parameters -name WIDTH
remove_all_parameters -name *ID*
remove_all_parameters -name *

## The following 3 examples remove entity-specific
## parameter values
remove_all_parameters -name inst1 -to SIZE
remove_all_parameters -name inst1 -to *IZ*
remove_all_parameters -name inst1 -to *

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> parameter(s) were removed
TCL_OK   	0   	INFO: Removed parameter: <string>
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Parameter does not exist and cannot be removed: <string>. Specify an existing parameter name.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_parameters>

<get_all_quartus_defaults>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_quartus_defaults [-h | -help] [-long_help] [-name <name>] [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns a filtered output collection of all matching default
assignment values. To access each element of the output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

In version 5.0 of ::quartus::project package, two new
Tcl commands "get_all_assignments" and "get_assignment_info"
have been introduced to replace the "get_all_quartus_defaults"
command. These two new commands simplify the interface to retrieve
information about Quartus II Settings File (.qsf) assignments.
The "get_all_quartus_defaults" command is still supported
for backward compatibility. 

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads in the default assignments found inside
the Quartus II Default Settings File (.qdf). It filters the 
assignments data found inside the .qdf and outputs the data 
based on the values specified by the "-name" option.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Assignment name>} {<Assignment value>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the default assignments using
## the foreach_in_collection method

set default_asgns_col [get_all_quartus_defaults]
foreach_in_collection default $default_asgns_col {
	set sect_id [lindex $default 0]
	set name [lindex $default 1]
	set value [lindex $default 2]

	## Now, display the content of the assignment
	puts "Section ID ($sect_id)"
	puts "Assignment Name ($name)"
	puts "Assignment Value ($value)"
}

## Using wildcards
set default_asgns_col [get_all_quartus_defaults -name *]
foreach_in_collection default $default_asgns_col {
	set sect_id [lindex $default 0]
	set name [lindex $default 1]
	set value [lindex $default 2]

	## Now, display the content of the assignment
	puts "Section ID ($sect_id)"
	puts "Assignment Name ($name)"
	puts "Assignment Value ($value)"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_quartus_defaults>

<get_assignment_name_info>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_assignment_name_info [-h | -help] [-long_help] <name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <name>: Assignment name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Returns information for the specified assignment name.
<<<long_help_section>>>

--------------
Example Usage:
--------------

    ## View information for all assignment names
foreach name [get_all_assignment_names] {
    puts [get_assignment_name_info $name]
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal assignment name: <string>. Specify a legal assignment name. To view the list of legal assignment names, run "get_all_assignment_names".
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_assignment_name_info>

<set_clock_latency>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_clock_latency [-h | -help] [-long_help] [-early] [-late] [-tag <data>] -to <to> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -early: Early clock latency
        -late: Late clock latency
        -tag <data>: Option to tag data to this assignment
        -to <to>: Destination clock name
        <value>: Input delay value after rise of reference clock
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 5.0

------------
Description:
------------

Specifies the required early or late clock latency on the clock
or input assignment group as specified by the "-to" option. 
The Quartus II(R) timing analysis propagates this latency and 
checks it against the actual latency. For more information 
about assignment groups, type "assignment_group -h".

The "assignment_group" command replaces the deprecated
"timegroup" command in ::quartus::project, version 5.0.

If both "-early" and "-late" options are not used, then the
assignment is set for both early and late latency.

The <value> is the latency of the reference clock.
The format of <value> is "<numerical value><time unit>", 
for example, "7.55ns". 

The following table shows the available time units:

Time Unit                  Description
----------------------     ------------------
s                          second(s)
ms                         millisecond(s)
us                         microsecond(s)
ns                         nanosecond(s)
ps                         picosecond(s)
fs                         femtosecond(s)
Hz                         Hertz
KHz                        KiloHertz
MHz                        MegaHertz
GHz                        GigaHertz

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set early clock latency to Clk0
set_clock_latency 2ns -to Clk0 -early

## Set early and late clock latency to Clk*
set_clock_latency 2ns -to Clk*

## Use assignment_group to set clock latency.
assignment_group "clock_group" -add_member "Clk*" -add_exception "Clk0"
set_clock_latency 2ns -to "clock_group" -early

## Commit the assignments to .qsf file.
export_assignments

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_clock_latency>

<<<</5.0>>>>
<<<<6.0>>>>
<is_project_open>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: is_project_open [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Checks whether a project is currently open. Returns 1, if a 
project is currently open; returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Close the project if open
if [is_project_open] {
   project_close
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</is_project_open>

<project_close>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_close [-h | -help] [-long_help] [-dont_export_assignments]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -dont_export_assignments: Do not export assignments to file
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Closes an open project.

The assignments created or modified during an open project
are committed to the Quartus II Settings File (.qsf) during a 
"project_close", unless you use the "-dont_export_assignments"
option.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Close the project if open
if [is_project_open] {
   project_close
}
## Close the project if open
## and do not export the assignments
if [is_project_open] {
   project_close -dont_export_assignments
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_close>

<project_exists>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_exists [-h | -help] [-long_help] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Checks whether a project exists. Returns 1, if a project exists; 
returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create project if one does not exist.
## Open existing project otherwise.
if [project_exists chiptrip] {
	project_open chiptrip
} else {
	project_new chiptrip
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_exists>

<project_archive>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_archive [-h | -help] [-long_help] [-all_revisions] [-include_libraries] [-include_outputs] [-overwrite] [-use_file_set <file_set>] [-version_compatible_database] <archive_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -all_revisions: Option to archive all revisions
        -include_libraries: Option to include related system libraries
        -include_outputs: Option to include output files in archive
        -overwrite: Option to overwrite any currently existing archive file
        -use_file_set <file_set>: Option to create the archive using the specified file set
        -version_compatible_database: Option to include version-compatible database if supported
        <archive_name>: Archive file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Archives an open project and its related files into a
Quartus II Archive File (.qar).

The description of operations is as follows:

Option        Description
------        -------------------------
use_file_set  

              Creates the archive using the specified
              file set. By default, the 'basic'
              file set is used. For more information
              about file sets, type:

                 quartus_sh --archive -list_file_sets

all_revisions

              Archives all revisions.

overwrite

              Overwrites existing archive file.

include_outputs

              Includes output files in archive.

include_libraries

              Includes related Megafunction and
              IP library files.

version_compatible_database

              Includes version-compatible database
              if supported.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Default mode: Archive current revisions without output files or libraries
project_archive chiptrip.qar

## Archive all revisions without output files or libraries
project_archive chiptrip.qar -all_revisions

## Archive current revision with version-compatible database if supported
project_archive chiptrip.qar -version_compatible_database

## Same as first one, but overwrite any existing archive file
project_archive chiptrip.qar -overwrite

## Include outut files and libraries
project_archive chiptrip.qar -include_outputs -include_libraries

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Error(s) found while archiving the project. See error message(s) for details.
TCL_ERROR	1   	ERROR: Project archive failed. Some files could not be processed. Refer to the Quartus II Archive Log File (<archive_name>.qarlog).
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_archive>

<project_restore>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_restore [-h | -help] [-long_help] [-destination <directory>] [-overwrite] [-update_included_file_info] <archive_file>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -destination <directory>: Directory where restored files are placed
        -overwrite: Option to overwrite files in destination directory
        -update_included_file_info: Option to update included file information
        <archive_file>: Archive file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Restores a Quartus II Archive File (.qar) that contains 
the project and its related files.

By default, the archive is restored into the current
directory. Use the "-destination" option to restore the 
files into a new directory.

By default, the command fails if the archive already 
contains files in the destination directory. Use the 
"-overwrite" option to overwrite any existing files 
in the destination directory.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Restore archive and expand files into current directory
project_restore chiptrip.qar
## or
project_restore chiptrip.qar -destination 

## Restore archive. Expand files into current directory, 
## but overwrite any existing files in "."
project_restore chiptrip.qar -destination . -overwrite

## Restore project into a "restored" subdirectory
project_restore chiptrip.qar -destination "restored" -overwrite

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Error(s) found while restoring the archive. See error message(s) for details.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_restore>

<project_new>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_new [-h | -help] [-long_help] [-family <family>] [-overwrite] [-part <part>] [-revision <revision_name>] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -family <family>: Family name
        -overwrite: Option to overwrite existing project and revision
        -part <part>: Part name
        -revision <revision_name>: Revision name
        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Creates and opens a new project with the specified project name.

If the "-revision" option is not specified, the project name 
is used to create the revision.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create project "chiptrip" and revision "chiptrip"
project_new chiptrip

## Create project "chiptrip" and revision "auto_max"
project_new -revision auto_max chiptrip

## Create project "chiptrip" and revision "chiptrip"
## Overwrite any Quartus II Settings File (.qsf) if it exists
project_new chiptrip -overwrite

## Create project "chiptrip" and revision "chiptrip"
## Set the FAMILY assignment to Stratix
project_new chiptrip -family Stratix

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: The "-<string>" option must also be used when you use the "-<string>" option. Specify both options.
TCL_ERROR	1   	ERROR: Can't create project: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name using the "-<string>" option.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name.
TCL_ERROR	1   	ERROR: Can't create settings files for project: <string>. Make sure the .psf, .csf, and .ssf files are writeable.
TCL_ERROR	1   	ERROR: Can't open project: <string>
TCL_ERROR	1   	ERROR: Can't remove Quartus II Settings File: <string>. Make sure the file is writeable.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Project already exists: <string>. Specify a different project name or use the "-overwrite" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_new>

<set_current_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_current_revision [-h | -help] [-long_help] [-force] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -force: Option to open the revision and overwrite the compilation database if the database version is incompatible.
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Sets the specified revision name as the current revision.

In 8.1 or later versions of Quartus II software, set_current_revision
gives an error when the compilation database version is not
compatible with the current version of Quartus II software.
You may specify the "-force" option to avoid the error
and overwrite the database.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Sets "auto_max" as the current revision 
set_current_revision auto_max

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Revision is already the current revision: <string>. No action is required.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Revision file does not exist: <string>.qsf. Use "delete_revision" to delete the revision from the current project. Then use "create_revision" to create the revision and its .qsf before setting <string> as the current revision.
TCL_ERROR	1   	ERROR: Revision is not included in the current project: <string> . Use the "create_revision" command to create the revision.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_current_revision>

<get_current_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_current_revision [-h | -help] [-long_help] [<project_name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns the name of the current revision for the specified 
project. If the project name is not specified, the current 
project name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the current revision name for
# the currently open project "chiptrip"
project_open chiptrip
set revision_name [get_current_revision]
project_close

# Get the current revision name for
# a project that is not currently open
set revision_name [get_current_revision chiptrip]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_current_revision>

<create_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: create_revision [-h | -help] [-long_help] [-based_on <revision_name>] [-copy_results] [-set_current] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -based_on <revision_name>: Revision name on which new revision bases its settings
        -copy_results: Option to copy results from "based_on" revision
        -set_current: Option to set new revision as current revision
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Creates the specified revision. If the revision is not 
included in the current project, a new revision is 
created in the project with default settings. 

If you specify the "-set_current" option, this command 
sets the newly created revision as the current revision.

If you specify the "-based_on" option, the command creates 
a new revision in the project based on the settings of the 
based-on revision specified by the option.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Create a new revision called "tmp"
create_revision tmp

## Create a new revision called "tmp"
## and set it as the current revision
create_revision tmp -set_current
## This method is the same as 
create_revision tmp
set_current_revision tmp

## Create a new revision called "speed_ch"
## with settings based on "chiptrip"
## and set it as the current revision
create_revision speed_ch -based_on chiptrip -set_current

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Revision is already the current revision: <string>. No action is required.
TCL_ERROR	1   	ERROR: Based-on revision is not included in the current project: <string>. Make sure the based-on revision name is spelled correctly and included in the current project.
TCL_ERROR	1   	ERROR: Can't create revision because the current project uses the device family: <string>. Change the device family or create the revision in another project that uses a different device family.
TCL_ERROR	1   	ERROR: Can't create file: <string>. Make sure you have permission to write to the specified file.
TCL_ERROR	1   	ERROR: Can't create revision: <string>. Specify a legal revision name.
TCL_ERROR	1   	ERROR: Can't remove file: <string>. Make sure the file is not read-only and you have permission to write to the specified file.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Didn't create revision because it is already included in current project: <string>. If you want a new revision, specify a different revision name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</create_revision>

<delete_revision>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: delete_revision [-h | -help] [-long_help] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Deletes the specified revision from the current project. The corresponding
<revision name>.qsf file is deleted as well.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Delete the revision called "tmp"
delete_revision tmp

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't delete the current revision: <string>. Specify a different revision name.
TCL_ERROR	1   	ERROR: Can't delete revision  because it is not included in the current project: <string> . Specify a revision name that is included in the project.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</delete_revision>

<revision_exists>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: revision_exists [-h | -help] [-long_help] [-project <project_name>] <revision_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -project <project_name>: Project name
        <revision_name>: Revision name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Checks whether the revision exists for the specified project
or currently open project. 

Returns 1, if the revision exists; returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Check if the specified revision exists
## in the specified project
if [revision_exists -ARG(project) chiptrip speed_ch] {
	puts "Revision exists"
} else {
	puts "Revision does not exist"
}

## Create revision for the currently open 
## project if it does not exist
## Set the current revision otherwise
project_open chiptrip
if [revision_exists speed_ch] {
	set_current_revision speed_ch
} else {
	create_revision speed_ch
}
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</revision_exists>

<get_project_revisions>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_project_revisions [-h | -help] [-long_help] [<project_name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns a list of revisions included in the specified project.
If the project name is not specified, the current project name
is used by default.

The first element in the list of revisions is the current
revision and is the same as the return value for the
"get_current_revision" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Set the device family assignment to Stratix 
# for all revisions
project_open chiptrip
set original_revision [get_current_revision]

foreach revision [get_project_revisions] {
	puts "$revision"
	set_current_revision $revision
	set_global_assignment -name FAMILY Stratix
	export_assignments
}

set_current_revision $original_revision
project_close

# Open the project with the first available revision 
# and set the device family assignment to Stratix
set revision [lindex [get_project_revisions chiptrip] 0]
open_project -revision $revision chiptrip
set_global_assignment -name FAMILY Stratix
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
TCL_ERROR	1   	ERROR: Project name was not specified or open project does not exist. Open an existing project or specify the project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_project_revisions>

<get_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_names [-h | -help] [-long_help] -filter <wildcard> [-node_type <all|comb|reg|pin|input|output|bidir|hierarchy|mem|bus|qsf>] [-observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -filter <wildcard>: Option to specify the node's full path name and/or wildcard character(s)
        -node_type <all|comb|reg|pin|input|output|bidir|hierarchy|mem|bus|qsf>: Option to filter based on the specified node type.
        -observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>: Option to filter based on the specified observable type
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns a filtered output collection of all matching
node name IDs found in a compiled Quartus(R) II project. 

To access each element of the output collection, use the Tcl 
command "foreach_in_collection". To see example usage, type 
"get_names -long_help" or "foreach_in_collection -long_help".

If the "-node_type" option is not specified, the default
value is "all". Similarly, if the "-observable_type" option
is not specified, the default value is "all".

The node type "pin" includes "input", "output", and "bidir".
The node type "qsf" include names from qsf settings file.
The node type "all" includes all node types.
 
The value for "-observable_type" option can be one of 
the following:

Observable Type      Description
---------------      -----------------------------------
all                  Use post-Fitter information. If it is
                     not available, post-Synthesis
                     information is used. Otherwise,
                     pre-synthesis information is used if it
                     exists.
pre_synthesis        Use pre-synthesis information.
post_synthesis       Use post-synthesis information.
post_fitter          Use post-Fitter information.
post_asm             Use post-Assembler information. The
                     post-Assembler information is only supported
                     for designs using the HardCopy II device family.
stp_pre_synthesis    Use SignalTap II pre-synthesis information.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Search for a single post-Fitter pin with the name accel and 
# make assignments
set accel_name_id [get_names -filter accel -node_type pin -observable_type post_fitter]
foreach_in_collection name_id $accel_name_id {

	# Get the full path name of the node
	set target [get_name_info -info full_path $name_id]

	# Set multicycle assignment
	set_multicycle_assignment -to $target 2

	# Set location assignment
	set_location_assignment -to $target Pin_E22
}
# Search for nodes of any post-Fitter node type with name length <= 5
# The default node type is "all"
set name_ids [get_names -filter ????? -observable_type post_fitter]
foreach_in_collection name_id $name_ids {

	# Print the name id
	puts $name_id

	# Print the node type
	puts [get_name_info -info node_type $name_id]

	# Print the full path (which excludes the current
	# focus entity from the path)
	puts [get_name_info -info full_path $name_id]
}
# Search for nodes of any post-Fitter node type that end in "eed".
# The default node type is "all"
set name_ids [get_names -filter *eed -observable_type post_fitter]
foreach_in_collection name_id $name_ids {

	# Print the name id
	puts $name_id

	# Print the node type
	puts [get_name_info -info node_type $name_id]

	# Print the full path (which excludes the current
	# focus entity from the path)
	puts [get_name_info -info full_path $name_id]
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Illegal node type: <string>.  Specify "all", "comb", "reg", "pin", "hierarchy", or "bus".
TCL_ERROR	1   	ERROR: Illegal observable type: <string>.  Specify "all", "pre_synthesis", "post_synthesis", or "post_fitter".
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Post-Assembler compiler database does not exist for revision name: <string>. Run Assembler (quartus_asm) with the specified revision name before using this Tcl command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_names>

<get_name_info>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_name_info [-h | -help] [-long_help] [-get_synonyms] [-info <parent_name_id|base_name|entity_name|instance_name|full_path|short_full_path|node_type|creator|signaltapii|file_location>] [-observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>] [-use_cached_database] <name_id>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -get_synonyms: Option to get a Tcl list of synonym name ids. This is an advanced Quartus II Tcl option.
        -info <parent_name_id|base_name|entity_name|instance_name|full_path|short_full_path|node_type|creator|signaltapii|file_location>: Option to specify the type of information to display.
        -observable_type <all|pre_synthesis|post_synthesis|post_fitter|post_asm|stp_pre_synthesis>: Option to specify the observable type of the name ID
        -use_cached_database: Option not to check the compilation database for updates. Use this option only if you do not compile the project after getting the name IDs from "get_names" command. If you compile the project, you must re-run "get_names" command again to refresh the cached database information before using this option. This is an advanced Quartus II Tcl option.
        <name_id>: Option to specify the node name ID
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Displays the specified type of information for the specified node 
name id. Type "get_names -long_help" to view how to get a collection 
of node name IDs.

If the "-observable_type" option is not specified, the default 
value is "all". The specified observable type must have the same 
observable type as specified in the "get_names" Tcl command which 
returned the currently specified node name id.

The value for "-observable_type" option can be one of 
the following:

Observable Type      Description
---------------      -----------------------------------
all                  Use post-Fitter information. If it is
                     not available, post-synthesis
                     information is used. Otherwise,
                     pre-synthesis information is used if it
                     exists.
pre_synthesis        Use pre-synthesis information.
post_synthesis       Use post-synthesis information.
post_fitter          Use post-Fitter information.
post_asm             Use post-Assembler information. The
                     post-Assembler information is only supported
                     for designs using the HardCopy II device family.
stp_pre_synthesis    Use SignalTap II pre-synthesis information.


The info type for the "-info" option can be one of 
the following:

Info Type            Description
--------------       -----------------------------------
parent_name_id       The name id for the node's parent.
base_name            The node name, which consists of an 
                     entity name and/or an instance name 
                     separated by a colon if necessary.
entity_name          The entity name.
instance_name        The instance name.
full_path            The full hierarchy path name, which 
                     consists of entity name(s) and/or the 
                     instance name(s). This path name 
                     excludes the current focus entity.
                     If there is nothing shown, the
                     name id is the current focus entity's 
                     name id.
short_full_path      The short full hierarchy path name, 
                     which consists of the instance name(s).
                     This path name excludes the current 
                     focus entity. If nothing is 
                     shown, the name id is the
                     current focus entity's name id.
node_type            The node type, which can be one of 
                     the types supported by "get_names",
                     namely, "input", "output", "bidirectional",
                     "register", "combinational",
                     "hierarchy", "memory", or "bus".
                     If "pin" type was specified for 
                     "get_names" command, the node type shown
                     here is expanded to be "input", "output", or
                     "bidirectional".
                     Node type value of "qsf" indicates name 
                     originates from qsf settings file.
creator              The creator of the node, which is either
                     "user_entered" or "compiler_generated".
signaltapii          If this node can be connected to a
                     SignalTap(R) II embedded logic analyzer, 
                     1 is shown. Otherwise, 0 is shown.
file_location        The source file location. For example,
                     the source file location for the entity
                     chiptrip is "chiptrip.v". To get the full
                     path to the source file, use the command
                     "resolve_file_path" which exists only in
                     version 4.0 or later of ::quartus::project
                     package.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the name id of the current focus entity
set current_focus_entity_id [get_top_level_entity]

# The full path name of the current focus entity
# is empty because the full path excludes the 
# current focus entity
set msg "Full path of the current focus entity => ("
append msg [get_name_info -info full_path $current_focus_entity_id]
append msg ")"
puts $msg
puts ""

# Get the node type of the current focus entity
# The node type should be a hierarchy type
set msg "Node type of the current focus entity => ("
append msg [get_name_info -info node_type $current_focus_entity_id]
append msg ")"
puts $msg

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Illegal info type: <string>.  Specify "parent_name_id", "base_name", "entity_name", "instance_name", "full_path", "short_full_path", "node_type", "creator", or "signaltapii".
TCL_ERROR	1   	ERROR: Illegal name id: <string>.  Specify a name id that exists in a compiled Quartus II project.
TCL_ERROR	1   	ERROR: Invalid name id: <string>.  Specify an integer greater than or equal to zero.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Post-Assembler compiler database does not exist for revision name: <string>. Run Assembler (quartus_asm) with the specified revision name before using this Tcl command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_name_info>

<get_top_level_entity>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_top_level_entity [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns the name id for the current focus entity.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Get the name id of the current focus entity
set current_focus_entity_id [get_top_level_entity]

# Print out the entity name of the current focus entity
set msg "Entity name of the current focus entity => ("
append msg [get_name_info -info entity_name $current_focus_entity_id]
append msg ")"
puts ""
puts $msg

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_top_level_entity>

<get_all_assignment_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_assignment_names [-h | -help] [-long_help] [-family <family>] [-module <all|map|fit|tan|asm|eda|drc|generic>] [-type <all|global|instance>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -family <family>: Option to filter based on the specified device family. Defaults to all families.
        -module <all|map|fit|tan|asm|eda|drc|generic>: Option to filter based on the specified flow module. Defaults to all.
        -type <all|global|instance>: Option to filter based on the specified assignment type. Defaults to all.
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns a filtered output list of all available, matching
assignment names.

The module option takes one of the following values:

Module           Description
--------         -------------------------------------
map              Analysis & Synthesis assignment names
fit              Fitter assignment names
tan              Classic Timing Analyzer assignment names
asm              Assembler assignment names
eda              EDA Netlist Writer assignment names
drc              Design Assistant assignment names
generic          Other assignment names not included in any 
                 of the above flow modules
all              All assignment names
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all available global assignments
foreach i [get_all_assignment_names -type global] {
    puts $i
}

## Print out all available global assignments
## for the Stratix family
foreach i [get_all_assignment_names -type global -family Stratix] {
    puts $i
}

## Print out all available global assignments
## for the Stratix family required
## by the Analysis & Synthesis module
foreach i [get_all_assignment_names -type global -family Stratix -module map] {
    puts $i
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal flow module: <string>.  Specify "<string>", "<string>", "<string>", "<string>", "<string>", "<string>", "<string>", or "<string>".
TCL_ERROR	1   	ERROR: Illegal type: <string>.  Specify "<string>", "<string>", or "<string>".
TCL_ERROR	1   	ERROR: Illegal device family: <string>.  Specify a legal device family.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_assignment_names>

<set_user_option>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_user_option [-h | -help] [-long_help] -name <name> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name
        <value>: User option value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Sets the user option value for the name specified by
the "-name" option. The user option is written to
the quartus2.ini file.

To get a list of all available user option names, use
the "get_all_user_option_names" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set TALKBACK_ENABLED to "on"
set_user_option -name TALKBACK_ENABLED on

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal user option name: <string>. Specify a legal user option name. To get a list of legal names, use the "get_all_user_option_names" command.
TCL_ERROR	1   	ERROR: Illegal user option value: <string>. Specify a legal user option value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_user_option>

<get_user_option>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_user_option [-h | -help] [-long_help] -name <name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns the user option value for the name specified by
the "-name" option.

To get a list of all available user option names, use
the "get_all_user_option_names" command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the value for the user option
## "TALKBACK_ENABLED"
set value [get_user_option -name TALKBACK_ENABLED]
puts "TALKBACK_ENABLED = $value"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal user option name: <string>. Specify a legal user option name. To get a list of legal names, use the "get_all_user_option_names" command.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_user_option>

<get_all_user_option_names>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_user_option_names [-h | -help] [-long_help] [-name <name>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: User option name (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns a filtered output list of all available, matching
user option names.

If the "-name" option is not specified, all available user
option names are returned. Otherwise, only the matching
user option names are returned.

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all available user option names
foreach i [get_all_user_option_names] {
    puts $i
}

## Display all user option names that contain
## the word "talkback" and also display the 
## value for each of the user option names
foreach i [get_all_user_option_names -name *talkback*] {
	set name $i
	set value [get_user_option -name $i]
    puts "$name = $value"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_user_option_names>

<resolve_file_path>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: resolve_file_path [-h | -help] [-long_help] <file_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <file_name>: Option to specify the file name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns the resolved full path of the specified file name.
If the file does not exist, the original file name is 
returned.

The Quartus II software resolves relative paths by searching
for the file in the following directories in the following
order:

1) Project directory, which is the directory where the
   Quartus II Settings File (.qsf) is found.
2) Project database directory, which is the "db" directory
   found under the project directory.
3) Project library directories, which are the directories
   containing the user-specified libraries that are used 
   only by the current project.
4) User library directories, which are the directories
   containing the user-specified libraries that are
   used by all Quartus II projects.
5) Quartus II library directory, which is the directory
   containing Quartus II libraries.
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_new chiptrip -overwrite

# Set one Verilog source file assignment
set_global_assignment -name VERILOG_FILE chiptrip.v

# Display the resolved full path of the Verilog
# source file assignment
set filename [get_global_assignment -name VERILOG_FILE]
set resolved_fullpath [resolve_file_path $filename]

puts "Full Path: $resolved_fullpath"

# Set more Verilog source file assignments
set_global_assignment -name VERILOG_FILE auto_max.v
set_global_assignment -name VERILOG_FILE speed_ch.v
set_global_assignment -name VERILOG_FILE tick_cnt.v
set_global_assignment -name VERILOG_FILE time_cnt.v

# Display the resolved full path of all the Verilog
# source file assignments
set file_asgns [get_all_global_assignments -name VERILOG_FILE]
foreach_in_collection file_asgn $file_asgns {

    ## Each element in the collection has the following
    ## format: {} {VERILOG_FILE} {<file_name>}

    set filename [lindex $file_asgn 2]
    set resolved_fullpath [resolve_file_path $filename]

    puts "Full Path: $resolved_fullpath"
}

project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</resolve_file_path>

<test_assignment_trait>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: test_assignment_trait [-h | -help] [-long_help] -name <name> -trait <trait_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: Assignment name
        -trait <trait_name>: Trait name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Checks whether the assignment name has the specified trait.
Returns 1, if the assignment name has the trait;
returns 0, otherwise.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Test if the assignment name is case-sensitive
if {[test_assignment_trait -name VHDL_FILE -trait CASE_SENSITIVE]} {
	puts "VHDL_FILE assignment is case-sensitive."
} else {
	puts "VHDL_FILE assignment is not case-sensitive."
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Illegal trait: <string>. Specify a legal trait name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</test_assignment_trait>

<get_assignment_info>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_assignment_info [-h | -help] [-long_help] [-entity] [-from] [-get_tcl_command] [-name] [-section_id] [-tag] [-to] [-value] <asgn_id>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity: Option to get the assignment entity
        -from: Option to get the assignment source
        -get_tcl_command: Option to get the tcl command that sets the assignment
        -name: Option to get the assignment name
        -section_id: Option to get the assignment section id
        -tag: Option to get the assignment tag
        -to: Option to get the assignment destination
        -value: Option to get the assignment value
        <asgn_id>: Assignment id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns information for the assignment id based on the
specified option.

The assignment id is obtained from the "get_all_assignments"
Tcl command.
<<<long_help_section>>>

--------------
Example Usage:
--------------

    ## View all the instance assignments
foreach_in_collection asgn_id [get_all_assignments -type instance -name *] {

    set from   [get_assignment_info $asgn_id -from]
    set to     [get_assignment_info $asgn_id -to]
    set name   [get_assignment_info $asgn_id -name]
    set value  [get_assignment_info $asgn_id -value]
    set entity [get_assignment_info $asgn_id -entity]
    set tag    [get_assignment_info $asgn_id -tag]

    puts "$entity: $name ($from -> $to) = $value"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal assignment id: <string>. Specify a legal assignment id that was retrieved from the Tcl command "get_all_assignments".
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_assignment_info>

<get_all_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_assignments [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] -name <name> [-section_id <section id>] [-tag <data>] [-to <destination>] -type <global|instance|parameter|default>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity name
        -from <source>: Source name (string pattern is matched using Tcl string matching)
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination name (string pattern is matched using Tcl string matching)
        -type <global|instance|parameter|default>: Option to specify the type of assignments to return
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns a collection of all matching global, instance, parameter,
or default assignment ids. To iterate through each assignment id
in this collection, use the Tcl command "foreach_in_collection".

To view details for the assignment that is associated with the
assignment id, use the Tcl command "get_assignment_info".

The "get_all_assignments" command is easier to use than the
deprecated commands listed in Table 1.


* Table 1. The -type Option

Value for
-type Option  Deprecated Tcl command        Description
------------  ----------------------        -----------
default       get_all_quartus_defaults      Returns only default assignments.

global        get_all_global_assignments    Returns only global assignments.

instance      get_all_instance_assignments  Returns only instance assignments.

parameter      get_all_parameters            Returns only parameter assignments.


The "-name" option is not case sensitive.
The "-to" and "-from" options are case sensitive.

These options can take string patterns containing special 
characters from the set "*?\[]" as values. The values are 
matched using Tcl string matching. Note that bus names are
automatically detected and do not need to be escaped. Bus
names have the following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
get_all_assignments -type instance -name LOCATION -to a[0]

# To match all indices of bus "a", type:
get_all_assignments -type instance -name LOCATION -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

get_all_assignments -type instance LOCATION -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

This Tcl command reads in the global, instance, and parameter
assignments found in the Quartus II Settings File (.qsf) and
reads in the default assignments found inside the
Quartus II Default Settings File (.qdf).

If you tagged data by making assignments with the -tag option,
then the information can be searched using the -tag option.

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one clock section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, use the -section_id option.

For entity-specific assignments, use the "-entity" option to 
retrieve assignments from a specific entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

    ## View all the timing requirements using wildcards
    ## to match TSU_REQUIREMENT, TCO_REQUIREMENT,
    ## and others.
foreach_in_collection asgn_id [get_all_assignments -type instance -name *_REQUIREMENT] {

    set from   [get_assignment_info $asgn_id -from]
    set to     [get_assignment_info $asgn_id -to]
    set name   [get_assignment_info $asgn_id -name]
    set value  [get_assignment_info $asgn_id -value]
    set entity [get_assignment_info $asgn_id -entity]
    set sid    [get_assignment_info $asgn_id -section_id]
    set tag    [get_assignment_info $asgn_id -tag]

    puts "$entity: $name ($from -> $to) = $value"
}

    ## View all global assignments
foreach_in_collection asgn_id [get_all_assignments -type global -name *] {

    set name   [get_assignment_info $asgn_id -name]
    set value  [get_assignment_info $asgn_id -value]
    set entity [get_assignment_info $asgn_id -entity]
    set sid    [get_assignment_info $asgn_id -section_id]
    set tag    [get_assignment_info $asgn_id -tag]

    puts "$entity: $name = $value"
}

    ## View all project-wide default parameter values
foreach_in_collection asgn_id [get_all_assignments -type parameter -name *] {

    set name  [get_assignment_info $asgn_id -name]
    set value [get_assignment_info $asgn_id -value]
    set tag    [get_assignment_info $asgn_id -tag]

    puts "$name = $value"
}

    ## View all entity-specific parameter values
foreach_in_collection asgn_id [get_all_assignments -type parameter -name * -to *] {

    set dest  [get_assignment_info $asgn_id -to]
    set name  [get_assignment_info $asgn_id -name]
    set value [get_assignment_info $asgn_id -value]
    set tag    [get_assignment_info $asgn_id -tag]

    puts "$name (-> $dest) = $value"
}

    ## View all default assignments
foreach_in_collection asgn_id [get_all_assignments -type default -name * -to *] {

    set name    [get_assignment_info $asgn_id -name]
    set value   [get_assignment_info $asgn_id -value]

    puts "$name = $value"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Illegal assignment type: <string>. Specify "<string>", "<string>", "<string>", or "<string>".
TCL_ERROR	1   	ERROR: Illegal option "<string>". The specified option is illegal for <string> assignments.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_assignments>

<get_location_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_location_assignment [-h | -help] [-long_help] [-tag <data>] -to <destination>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns the value of a location assignment.

The "-chip" option is not case sensitive.
The "-to" option is case sensitive.
<<<long_help_section>>>

--------------
Example Usage:
--------------

get_location_assignment -to dst		

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_location_assignment>

<set_location_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_location_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-remove] [-tag <data>] -to <destination> [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -remove: Option to remove assignment
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Sets or removes a location assignment.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

set_location_assignment -to dst LOC

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_location_assignment>

<remove_all_instance_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_instance_assignments [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] -name <name> [-section_id <section id>] [-tag <data>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of the assignment (string pattern is matched using Tcl string matching)
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of the assignment (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Removes all matching instance assignment values.

The "-name" option is not case sensitive.
The "-to" and "-from" options are case sensitive.

These options can take string patterns containing special 
characters from the set "*?\[]" as values. The values are 
matched using Tcl string matching. Note that bus names are
automatically detected and do not need to be escaped. Bus
names have the following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
remove_all_instance_assignments -name LOCATION -to a[0]

# To match all indices of bus "a", type:
remove_all_instance_assignments -name LOCATION -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

remove_all_instance_assignments -name LOCATION -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

This Tcl command reads the instance assignments found in
the Quartus II Settings File (.qsf) and removes this data based 
on the values specified by the "-name", "-from", and "-to"
options.

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
remove the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

Assignments removed by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Remove all the timing requirements
## Use wildcards to catch TSU_REQUIREMENT, TCO_REQUIREMENT,
## and others
remove_all_instance_assignments -name *_REQUIREMENT

## Remove all the location assignments with
## the destination bus name "timeo".
set bus_name "timeo"
remove_all_instance_assignments -name LOCATION -to $bus_name[*]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> instance assignment(s) were removed
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_instance_assignments>

<get_all_instance_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_instance_assignments [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] -name <name> [-section_id <section id>] [-tag <data>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of assignment (string pattern is matched using Tcl string matching)
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of assignment (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns a filtered output collection of all matching instance
assignment values. To access each element of this output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

In version 5.0 of the ::quartus::project package, two new
Tcl commands "get_all_assignments" and "get_assignment_info"
have been introduced to replace the "get_all_instance_assignments"
command. These two new commands simplify the interface to retrieve
information about Quartus II Settings File (.qsf) assignments.
The "get_all_instance_assignments" command is still supported 
for backward compatibility. 

The "-name" option is not case sensitive.
The "-to" and "-from" options are case sensitive.

These options can take string patterns containing special 
characters from the set "*?\[]" as values. The values are 
matched using Tcl string matching. Note that bus names are
automatically detected and do not need to be escaped. Bus
names have the following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
get_all_instance_assignments -name LOCATION -to a[0]

# To match all indices of bus "a", type:
get_all_instance_assignments -name LOCATION -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

get_all_instance_assignments -name LOCATION -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

This Tcl command reads in the instance assignments found in
the Quartus II Settings File (.qsf). The command filters
the assignments data found in the .qsf and outputs the 
data based on the values specified by the "-name", "-from", 
and "-to" options.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Source>} {<Destination>} {<Assignment name>} {<Assignment value>} {<Entity name>} {<Tag data>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

If you tagged data by making assignments with the -tag option,
then the information will be displayed in the <Tag data> field.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the timing requirements
## using the foreach_in_collection method.
## Use wildcards to catch TSU_REQUIREMENT, TCO_REQUIREMENT,
## and others.
set asgn_col [get_all_instance_assignments -name *_REQUIREMENT]

foreach_in_collection asgn $asgn_col {

    ## Each element in the collection has the following
    ## format: { {} {<Source>} {<Destination>} {<Assignment name>} {<Assignment value>} {<Entity name>} {<Tag data>} }
    set from   [lindex $asgn 1]
    set to     [lindex $asgn 2]
    set name   [lindex $asgn 3]
    set value  [lindex $asgn 4]
    set entity [lindex $asgn 5]
    set tag    [lindex $asgn 6]

    puts "$entity: $name ($from -> $to) = $value"
}

## Get all the location assignments with
## the destination bus name "timeo".
set bus_name "timeo"
set location_asgns [get_all_instance_assignments -name LOCATION -to $bus_name[*]]

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_instance_assignments>

<get_instance_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_instance_assignment [-h | -help] [-long_help] [-entity <entity_name>] [-from <source>] [-front] -name <name> [-section_id <section id>] [-tag <data>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -from <source>: Source of assignment
        -front: Option to return the first assignment if there is more than one assignment found
        -name <name>: Assignment name
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns the value of the instance assignment.

The "-name" option is not case sensitive.
The "-entity", "-to", and "-from" options are case sensitive.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the TSU_REQUIREMENT from mypin to any register
set value [get_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT]
puts "TSU_REQUIREMENT(mypin->*) = $value"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> has multiple values. Use the "<string>" command to get all values or use the "<string> -front" command to get the first value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_instance_assignment>

<set_instance_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_instance_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] [-fall] [-from <source>] -name <name> [-remove] [-rise] [-section_id <section id>] [-tag <data>] [-to <destination>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -entity <entity_name>: Entity to which to add assignment
        -fall: Option applies to falling edge
        -from <source>: Source of assignment
        -name <name>: Assignment name
        -remove: Option to remove assignment
        -rise: Option applies to rising edge
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Sets or removes an instance assignment.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.

For entity-specific assignments, use the "-entity" option to 
force the assignment to specified entity. If the "-entity" 
option is not specified, the value for the FOCUS_ENTITY_NAME 
assignment is used. If the FOCUS_ENTITY_NAME value is not found, 
the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify a TSU_REQUIREMENT of 2ns from mypin to any register
set_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT 2ns

## Remove the TSU_REQUIREMENT from mypin to all registers
set_instance_assignment -from "mypin" -to * -name TSU_REQUIREMENT -remove

## Specify the entity to which the assignment is added, 
## use the -entity option
## This is needed if the top-level entity name is other than
## that of the project name
## The following command generates a top_level entity
set_instance_assignment -from "mypin" -to * -entity top_level -name TSU_REQUIREMENT 2ns

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not an instance assignment: <string> -- it is a global assignment. Specify an instance assignment name or use the global assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> cannot be removed -- it has multiple values. Specify one value to remove or use the "<string>" command to remove all values for the assignment.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_instance_assignment>

<remove_all_global_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_global_assignments [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-section_id <section id>] [-tag <data>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Removes all matching global assignments.

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads the global assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignments data found in the .qsf and removes the data
based on the values specified by the "-name" option.

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

For entity-specific assignments, use the "-entity" option to 
remove the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

Assignments removed by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Remove all the registered source files

remove_all_global_assignments -name SOURCE_FILE

# Using wildcards
remove_all_global_assignments -name SOURCE*

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> global assignment(s) were removed
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_global_assignments>

<get_all_global_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_global_assignments [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-section_id <section id>] [-tag <data>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns a filtered output collection of all matching global
assignment values. To access each element of the output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

In version 5.0 of the ::quartus::project package, two new
Tcl commands "get_all_assignments" and "get_assignment_info"
have been introduced to replace the "get_all_global_assignments"
command. These two new commands simplify the interface to retrieve
information about Quartus II Settings File (.qsf) assignments.
The "get_all_global_assignments" command is still supported for 
backward compatibility. 

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads the global assignments found in
the Quartus II Settings File (.qsf). This Tcl command filters
the assignment data in the .qsf and outputs the data based 
on the values given by the "-name" option.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Assignment name>} {<Assignment value>} {<Entity name>} {<Tag data>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name

If you tagged data by making assignments with the -tag option,
then the information will be displayed in the <Tag data> field.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment(s) from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the registered source files
## using the foreach_in_collection method
set file_asgn_col [get_all_global_assignments -name SOURCE_FILE]
foreach_in_collection file_asgn $file_asgn_col {

    ## Each element in the collection has the following
    ## format: {} {SOURCE_FILE} {<file_name>} {} {}
    puts [lindex $file_asgn 2]
}

## Print out all global assignments
set asgn_col [get_all_global_assignments -name *]

foreach_in_collection asgn $asgn_col {

    ## Each element in the collection has the following
    ## format: { {} {<Assignment name>} {<Assignment value>} {<Entity name>} {<Tag data>} }
    set name   [lindex $asgn 1]
    set value  [lindex $asgn 2]
    set entity [lindex $asgn 3]
    set tag    [lindex $asgn 4]

    puts "$entity: $name = $value"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_global_assignments>

<get_global_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_global_assignment [-h | -help] [-long_help] [-entity <entity_name>] [-front] -name <name> [-section_id <section id>] [-tag <data>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which assignment belongs
        -front: Option to return the first assignment if there is more than one assignment found
        -name <name>: Assignment name
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns the value of the global assignment.

The "-name" option is not case sensitive.

For entity-specific assignments, use the "-entity" option to 
retrieve the assignment from the specified entity. If the
"-entity" option is not specified, the value for the 
FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get the value of the FAMILY assignment
get_global_assignment -name FAMILY

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> has multiple values. Use the "<string>" command to get all values or use the "<string> -front" command to get the first value.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_global_assignment>

<set_global_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_global_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] -name <name> [-remove] [-section_id <section id>] [-tag <data>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -entity <entity_name>: Entity to which to add assignment
        -name <name>: Assignment name
        -remove: Option to remove assignment
        -section_id <section id>: Section id
        -tag <data>: Option to tag data to this assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Sets or removes a global assignment.

Assignments created or modified by using this Tcl command are not
saved to the Quartus II Settings File (.qsf) unless you explicitly
call one of the following two Tcl commands (from the
::quartus::project Tcl package):

1) export_assignments 
2) project_close (unless -dont_export_assignments is specified as an
argument to project_close)

You must save assignment changes before you run Quartus(R) II
command-line executables. Note, however, that the Tcl commands
execute_flow and execute_module (from the ::quartus::flow Tcl
package) call "export_assignments" before they run
command-line executables.

For entity-specific assignments, use the -entity option to force the
assignment to specified entity. If the -entity option is not
specified, the value for the FOCUS_ENTITY_NAME assignment is used. If
the FOCUS_ENTITY_NAME value is not found, the revision name is used.

If the Quartus II Settings File contains a USER_LIBRARIES assignment
and you call set_global_assignment to set a SEARCH_PATH or
USER_LIBRARIES assignment, the existing USER_LIBRARIES assignment
expands into one or more SEARCH_PATH assignments.

Note that values that begin with a dash ("-") should be enclosed in a
backslash followed by a quote. In the following example, -02 is
enclosed by \" at the beginning and the end.

set_global_assignment -name ARM_CPP_COMMAND_LINE \"-O2\"
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify Stratix as the family to use when compiling
set_global_assignment -name FAMILY Stratix

## If the family name has empty spaces, use quotes
set_global_assignment -name FAMILY "Stratix GX"

## or remove any empty space
set_global_assignment -name FAMILY StratixGX

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: File name "<string>" exceeds maximum of <string> characters. Specify a file name with fewer characters.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> cannot be removed -- it has multiple values. Specify one value to remove or use the "<string>" command to remove all values for the assignment.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_global_assignment>

<assignment_group>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: assignment_group [-h | -help] [-long_help] [-add_exception <name>] [-add_member <name>] [-comment <comment>] [-disable] [-get_exceptions] [-get_members] [-overwrite] [-remove] [-remove_exception <name>] [-remove_member <name>] [-tag <data>] <group_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -add_exception <name>: Tcl list of exception names to add
        -add_member <name>: Tcl list of member names to add
        -comment <comment>: Comment
        -disable: Option to disable assignment
        -get_exceptions: Option to get collection of assignment group exceptions
        -get_members: Option to get collection of assignment group members
        -overwrite: Option to overwrite existing assignment group with the same group name
        -remove: Option to remove assignment group
        -remove_exception <name>: Tcl list of exception names to remove
        -remove_member <name>: Tcl list of member names to remove
        -tag <data>: Option to tag data to this assignment
        <group_name>: Assignment group name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Adds, removes, gets members of, or gets exceptions to an
assignment group.

The "assignment_group" command replaces the deprecated
"timegroup" command.

An assignment group is a custom group of registers and pins. You can 
use the "-add_member" option to specify register or pin names 
you want to include in the assignment group. You can use the 
"-add_exception" option to specify names you want to exclude 
from the assignment group.

You can specify the names using wildcards, that is, using "?" 
or "*". For example, to add all registers and pins that start 
with a "b" except those that start with "b|c|" to a particular
assignment group named "group_b", type:

assignment_group "group_b" -add_member "b*" -add_exception "b|c|*"

To remove members or exceptions from a assignment group, use the 
"-remove_member" or "-remove_exception" options respectively.

The "-get_members" option returns a collection of members in 
the assignment group. The "-get_exceptions" option returns a collection 
of exceptions to the assignment group. To access each element of the 
collection, use the Tcl command "foreach_in_collection". To see 
example usage, type "assignment_group -long_help" or
"foreach_in_collection -long_help".

Specifying registers and pins in terms of an assignment group
allows you to set timing constraints easily. For example, to make
a multicycle assignment from nodes "a1" and "a2" to nodes "b1", 
"b2", and "b3", type the following:

assignment_group "group_a" -add_member [list "a1" "a2"]
assignment_group "group_b" -add_member [list "b1" "b2" "b3"]

set_multicycle_assignment -from "group_a" -to "group_b" 2

This command sets a multicycle assignment from every member of 
"group_a" to every member of "group_b". Quartus(R) II timing 
analysis is optimized to use assignment groups in handling timing 
constraints.

To disable assignment group assignments for the entire group,
use the "-disable" option, for example:

assignment_group "group_a" -disable

To disable a particular assignment group assignment, use the
"-disable" option with the "-add_member" or "-add_exception"
options, for example:

assignment_group "group_a" -add_member "m1" -disable
assignment_group "group_a" -add_exception "e1" -disable

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

# Make timing cut assignment from nodes starting
# with "r" except those starting with "r|s|"
# and except those starting with "r|t|"
# to nodes "t1", "t2", and "t3"
assignment_group "tg1" -add_member "r*" -add_exception "r|s|*"
assignment_group "tg1" -add_exception "r|t|*"

assignment_group "tg2" -add_member [list "t1" "t2" "t3"]

set_timing_cut_assignment -from "group_a" -to "group_b" 2

# Remove the "t1" from a particular assignment group named "tg2"
assignment_group "tg2" -remove_member "t1"

# Display the members of a particular assignment group named "tg1"
foreach_in_collection member [assignment_group "tg1" -get_members] {

	# Print the name of the member
	puts $member
}

# Display the exceptions to a particular assignment group named "tg1"
foreach_in_collection exception [assignment_group "tg1" -get_exceptions] {

	# Print the name of the exception
	puts $exception
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</assignment_group>

<set_parameter>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_parameter [-h | -help] [-long_help] [-comment <comment>] [-disable] [-entity <entity_name>] -name <name> [-remove] [-tag <data>] [-to <destination>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable parameter
        -entity <entity_name>: Entity to which to add parameter
        -name <name>: Parameter name
        -remove: Option to remove parameter
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of parameter
        <value>: Parameter value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Sets or removes the specified parameter name.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

The parameters created or modified by using this Tcl command are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.

Use the "-entity" option to force the parameter to the specified
entity. If the "-entity" option is not specified, the value for 
the FOCUS_ENTITY_NAME assignment is used. If the FOCUS_ENTITY_NAME
value is not found, the revision name is used.

A parameter is an attribute of a megafunction, macrofunction,
or certain primitives that determines the logic created or used
to implement the function. The parameter information can be 
used to determine the actual primitives and other subdesigns 
needed to implement the logic of the function.

The following general guidelines apply to parameters:

*  All logic options can be assigned as parameters for individual
   instances of megafunctions or macrofunctions. For a given 
   logic OPTION the precedence for parameters is:

      1) Instance specific logic option settings
      2) Instance specific parameter settings
      3) Project-wide default parameter settings

*  You cannot assign a value to the predefined Altera(R) 
   parameter DEVICE_FAMILY, which represents the device family 
   assigned for the project. However, you can use the parameter 
   value in comparisons.

*  The predefined Altera LPM_PIPELINE and LATENCY parameters 
   can be assigned to an instance of a megafunction or 
   macrofunction. However, the parameter applies only to that 
   instance, and is not inherited by the subdesigns of that 
   instance.

*  All logic options can be assigned as parameters for individual
   megafunctions or macrofunctions. However, logic options cannot 
   be assigned global, project-wide default parameter values.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Set project-wide, default WIDTH parameter value
set_parameter -name WIDTH 8

## Set entity-specific SIZE parameter value
## to "my_ram" entity
set_parameter -entity my_ram -name SIZE 16

## Specify the same parameter to my_ram
## but inside "top_level" entity
set_parameter -entity top_level -to my_ram -name SIZE 16

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Removed parameter: <string>
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Parameter does not exist and cannot be removed: <string>. Specify an existing parameter name.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_parameter>

<get_parameter>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_parameter [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-tag <data>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of parameter
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns the value of the parameter.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function returns the 
parameter value for the current entity. The value is retrieved 
from the PARAMETERS section of the entity. Otherwise, the 
function returns the project-wide default parameter value
obtained from the DEFAULT_PARAMETERS section.

Use the "-entity" option to retrieve the parameter from the 
specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Get project-wide, default parameter value
get_parameter -name WIDTH

## Get entity-specific parameter value
get_parameter -name inst1 -to SIZE

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_parameter>

<get_all_parameters>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_parameters [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-tag <data>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name (string pattern is matched using Tcl string matching)
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of the parameter (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns a filtered output collection of all matching parameter 
values. To access each element of this output collection, use 
the Tcl command "foreach_in_collection". To see example usage, 
type "foreach_in_collection -long_help".

In version 5.0 of ::quartus::project package, two new
Tcl commands "get_all_assignments" and "get_assignment_info"
have been introduced to replace the "get_all_parameters"
command. These two new commands simplify the interface to retrieve
information about Quartus II Settings File (.qsf) assignments.
The "get_all_parameters" command is still supported for backward
compatibility. 

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function returns 
the parameter values for the current entity. The values are 
retrieved from the PARAMETERS section of the entity. Otherwise,
the function returns the project-wide default parameter values
obtained from the DEFAULT_PARAMETERS section.

This Tcl command filters the parameter data found in the
Quartus II Settings File (.qsf) and outputs the data based on
the values specified by the "-name" and "-to" options. These
options can take string patterns containing special characters
from the set "*?\[]" as values. The values are matched using
Tcl string matching. Note that bus names are automatically
detected and do not need to be escaped. Bus names have the
following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
get_all_parameters -name * -to a[0]

# To match all indices of bus "a", type:
get_all_parameters -name * -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

get_all_parameters -name * -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

Each element of the collection is a list with the following 
format:
{ {<Destination>} {<Parameter name>} {<Parameter value>} {<Entity name>} {<Tag data>} }

If you tagged data by making assignments with the -tag option,
then the information will be displayed in the <Tag data> field.

Use the "-entity" option to retrieve the parameter values from
the specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Display all project-wide default parameter values
set parameter_col [get_all_parameters -name *]

foreach_in_collection parameter $parameter_col {

    ## Each element in the collection has the following
    ## format: { {} {<Parameter name>} {<Parameter value>} {} {} }
	set name [lindex $parameter 1]
	set value [lindex $parameter 2]

	## Now, display the content of the parameter
	puts "Parameter Name ($name)"
	puts "Parameter Value ($value)"
}

## Display all entity-specific parameter values
foreach_in_collection parameter [get_all_parameters -name * -to *] {

    ## Each element in the collection has the following
    ## format: { {Destination} {<Parameter name>} {<Parameter value>} {} {} }
	set dest [lindex $parameter 0]
	set name [lindex $parameter 1]
	set value [lindex $parameter 2]

	## Now, display the content of the parameter
	puts "Destination ($dest)"
	puts "Parameter Name ($name)"
	puts "Parameter Value ($value)"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_parameters>

<remove_all_parameters>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: remove_all_parameters [-h | -help] [-long_help] [-entity <entity_name>] -name <name> [-tag <data>] [-to <destination>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -entity <entity_name>: Entity to which parameter belongs
        -name <name>: Parameter name (string pattern is matched using Tcl string matching)
        -tag <data>: Option to tag data to this assignment
        -to <destination>: Destination of the parameter (string pattern is matched using Tcl string matching)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Removes all matching parameters.

The "-name" option is not case sensitive.
The "-to" option is case sensitive.

If the "-to" argument is specified, the function removes 
the parameters from the current entity. The parameters are 
removed from the PARAMETERS section of the entity. Otherwise,
the function removes the project-wide default parameters
obtained from the DEFAULT_PARAMETERS section.

This Tcl command filters the parameter data found in the
Quartus II Settings File (.qsf) and removes the data based on
the values specified by the "-name" and "-to" options. These
options can take string patterns containing special characters
from the set "*?\[]" as values. The values are matched using
Tcl string matching. Note that bus names are automatically
detected and do not need to be escaped. Bus names have the
following format:

<bus name>[<bus index>] or <bus name>[*]

The <bus name> portion is a string of alphanumeric characters.
The <bus index> portion is an integer greater than or equal to
zero or it can be the character "*" used for string matching.
Notice that the <bus index> is enclosed by the square
brackets "[" and "]". For example, "a[0]" and "a[*]" are
supported bus names and can be used as follows:

# To match index 0 of bus "a", type:
remove_all_parameters -name * -to a[0]

# To match all indices of bus "a", type:
remove_all_parameters -name * -to a[*]

All other uses of square brackets must be escaped if you do
not intend to use them as string patterns. For example,
to match indices 0, 1, and 2 of the bus "a", type:

remove_all_parameters -name * -to "a[escape_brackets \[]\[0-2\][escape_brackets \]]"

For more information about escaping square brackets, type
"escape_brackets -h".

Use the "-entity" option to remove the parameters from the 
specified entity. If the "-entity" option is not specified,
the value for the FOCUS_ENTITY_NAME assignment is used. If the
FOCUS_ENTITY_NAME value is not found, the revision name is used.

The parameters removed by using this Tcl command are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## The following 3 examples remove project-wide,
## default parameter values
remove_all_parameters -name WIDTH
remove_all_parameters -name *ID*
remove_all_parameters -name *

## The following 3 examples remove entity-specific
## parameter values
remove_all_parameters -name inst1 -to SIZE
remove_all_parameters -name inst1 -to *IZ*
remove_all_parameters -name inst1 -to *

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: <string> parameter(s) were removed
TCL_OK   	0   	INFO: Removed parameter: <string>
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Parameter does not exist and cannot be removed: <string>. Specify an existing parameter name.
TCL_ERROR	1   	ERROR: Illegal default parameter: <string>. Specify a legal default parameter name.
TCL_ERROR	1   	ERROR: Illegal parameter: <string>. Specify a legal parameter name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</remove_all_parameters>

<get_all_quartus_defaults>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_all_quartus_defaults [-h | -help] [-long_help] [-name <name>] [-section_id <section id>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -name <name>: Assignment name (string pattern is matched using Tcl string matching)
        -section_id <section id>: Section id
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns a filtered output collection of all matching default
assignment values. To access each element of the output 
collection, use the Tcl command "foreach_in_collection". To 
see example usage, type "foreach_in_collection -long_help".

In version 5.0 of ::quartus::project package, two new
Tcl commands "get_all_assignments" and "get_assignment_info"
have been introduced to replace the "get_all_quartus_defaults"
command. These two new commands simplify the interface to retrieve
information about Quartus II Settings File (.qsf) assignments.
The "get_all_quartus_defaults" command is still supported
for backward compatibility. 

The "-name" option is not case sensitive. This option can take 
string patterns containing special characters from the set 
"*?\[]" as the value. The value is matched using Tcl string 
matching.

This Tcl command reads in the default assignments found inside
the Quartus II Default Settings File (.qdf). It filters the 
assignments data found inside the .qdf and outputs the data 
based on the values specified by the "-name" option.

Each element of the collection is a list with the following 
format:
{ {<Section Id>} {<Assignment name>} {<Assignment value>} }

Certain sections in the .qsf can appear more than once. 
For example, because there may be more than one clock 
used in a project, there may be more than one CLOCK section 
each containing its own set of clock assignments. To uniquely 
identify sections of this type, a <Section Id> is used. 
<Section Id> can be one of three types. It can be the same as 
the revision name, or it can be some unique name. The 
following is a list of sections requiring a <Section Id> and 
the associated <Section Id> description:

Section Id                    Description
---------------------------   ------------------------------
CHIP                          Same as revision name
LOGICLOCK_REGION              A unique name
EDA_TOOL_SETTINGS             A unique name
CLIQUE                        A unique name
BREAKPOINT                    A unique name
CLOCK                         A unique name
AUTO_INSERT_SLD_NODE_ENTITY   A unique name
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Print out all the default assignments using
## the foreach_in_collection method

set default_asgns_col [get_all_quartus_defaults]
foreach_in_collection default $default_asgns_col {
	set sect_id [lindex $default 0]
	set name [lindex $default 1]
	set value [lindex $default 2]

	## Now, display the content of the assignment
	puts "Section ID ($sect_id)"
	puts "Assignment Name ($name)"
	puts "Assignment Value ($value)"
}

## Using wildcards
set default_asgns_col [get_all_quartus_defaults -name *]
foreach_in_collection default $default_asgns_col {
	set sect_id [lindex $default 0]
	set name [lindex $default 1]
	set value [lindex $default 2]

	## Now, display the content of the assignment
	puts "Section ID ($sect_id)"
	puts "Assignment Name ($name)"
	puts "Assignment Value ($value)"
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_all_quartus_defaults>

<get_assignment_name_info>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_assignment_name_info [-h | -help] [-long_help] <name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <name>: Assignment name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns information for the specified assignment name.
<<<long_help_section>>>

--------------
Example Usage:
--------------

    ## View information for all assignment names
foreach name [get_all_assignment_names] {
    puts [get_assignment_name_info $name]
}

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Illegal assignment name: <string>. Specify a legal assignment name. To view the list of legal assignment names, run "get_all_assignment_names".
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_assignment_name_info>

<set_power_file_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_power_file_assignment [-h | -help] [-long_help] [-remove] [-saf_file <saf_file>] [-section_id <section_id>] [-to <to>] [-vcd_end_time <vcd_end_time>] [-vcd_file <vcd_file>] [-vcd_start_time <vcd_start_time>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -remove: Option to remove assignment
        -saf_file <saf_file>: SAF file name
        -section_id <section_id>: Section id
        -to <to>: Entity to which to apply power input file
        -vcd_end_time <vcd_end_time>: End time for VCD file parsing
        -vcd_file <vcd_file>: VCD file name
        -vcd_start_time <vcd_start_time>: Start time for VCD file parsing
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Sets or removes a power input file assignment. Power input file
assignments are specified using multiple global assignments, and
a single instance assignment as illustrated in the following
example:

set_global_assignment -name POWER_INPUT_FILE_NAME "test.vcd" -section_id test.vcd
set_global_assignment -name POWER_INPUT_FILE_TYPE VCD -section_id test.vcd
set_global_assignment -name POWER_VCD_FILE_START_TIME "10 ns" -section_id test.vcd
set_global_assignment -name POWER_VCD_FILE_END_TIME "1000 ns" -section_id test.vcd
set_instance_assignment -name POWER_READ_INPUT_FILE test.vcd -to test_design

The power input file assignment serves as a wrapper for all of the
above assignments. If the "-remove" setting is not set, the
set_power_file_assignment will also make the following assignment
to enable the use of input files:

set_global_assignment -name POWER_USE_INPUT_FILES ON

If you do not specify a "-section_id", a new section identifier is
created for the input file assignment. If a "-section_id" is
specified and it does not already exist, it is used as the new
section identifier. If a "-section_id" is specified and it does
exist, the existing input file assignments are removed and a new
input file assignment is created using the given parameters and 
section identifier.

If an entity name given by "-to" is not specified, the input file
assignment applys to the top level design entity.

If the "-remove" setting is used, the input file assignment given
by the "-section_id", "-vcd_file", or "-saf_file" is removed
from the project.

Assignments created or modified by using this Tcl command are
saved to the Quartus II Settings File (.qsf).
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify an input SAF file applied to the top level entity
## A default section will be created
set_power_file_assignment -saf_file test.saf

## Specify an input VCD file applied to design_top|counter1
## Use the given section_id to create a new section
set_power_file_assignment -vcd_file test.vcd -to design_top|counter1 -section_id test.vcd

## Update the previous input VCD file assignment to specify a
## start and end time
set_power_file_assignment -vcd_file test.vcd -to design_top|counter1 -vcd_start_time 10ns -vcd_end_time 100ns -section_id test.vcd

## Remove the input SAF file assignment using the file name
set_power_file_assignment -saf_file test.saf -remove

## Remove the input VCD file assignment using the section identifier
set_power_file_assignment -section_id test.vcd -remove

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Compiler database does not exist for revision name: <string>. At the minimum, run Analysis & Synthesis (quartus_map) with the specified revision name before using this Tcl command.
TCL_ERROR	1   	ERROR: Exactly one of the following file name options must be specified: -<string> or -<string>.
TCL_ERROR	1   	ERROR: If -<string> is set, exactly one of the following options must be specified: -<string>, -<string> or -<string>.  All other options must not be set.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: -<string> and -<string> cannot be used with -<string> option.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_power_file_assignment>

<set_io_assignment>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: set_io_assignment [-h | -help] [-long_help] [-comment <comment>] [-disable] [-io_standard <io standard>] -name <name> [-remove] [-tag <data>] [<value>]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -comment <comment>: Comment
        -disable: Option to disable assignment
        -io_standard <io standard>: Option to specify the io standard
        -name <name>: Assignment name
        -remove: Option to remove assignment
        -tag <data>: Option to tag data to this assignment
        <value>: Assignment value
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Sets or removes an io assignment.

Assignments created or modified by using this Tcl command are 
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Specify LVTTL as the IO Standard for OUTPUT_PIN_LOAD assignment
set_io_assignment 30 -name OUTPUT_PIN_LOAD -io_standard LVTTL

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	INFO: Ignored assignment: <string>. The assignment is no longer supported.
TCL_ERROR	1   	ERROR: Assignment is not a global assignment: <string> --  it is an instance assignment. Specify a global assignment name or use the instance assignment commands.
TCL_ERROR	1   	ERROR: Can't find file(s) associated with assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find section information for assignment. Specify a different assignment name.
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: File name "<string>" exceeds maximum of <string> characters. Specify a file name with fewer characters.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Value "<string>" for the "-<string>" option is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Option "-<string>" for "<string>" assignment is illegal. Specify a legal option or remove the option.
TCL_ERROR	1   	ERROR: Options cannot be specified together: -<string>, -<string> and -<string>. Specify only one or two of the three options.
TCL_ERROR	1   	ERROR: Value "<string>" for "<string>" assignment is illegal. Specify a legal value.
TCL_ERROR	1   	ERROR: Missing destination for assignment. Specify the destination for the assignment.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: The "-<string>" option is not required but was specified with the value: <string>. Delete the option.
TCL_ERROR	1   	ERROR: The "-<string>" option is required but was not specified. Specify the required option.
TCL_ERROR	1   	ERROR: Illegal assignment: <string>. Specify a legal assignment name.
TCL_ERROR	1   	ERROR: Assignment <string> cannot be removed -- it has multiple values. Specify one value to remove or use the "<string>" command to remove all values for the assignment.
TCL_ERROR	1   	ERROR: Missing <<string>> for "<string>" assignment. Specify the required <string>.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</set_io_assignment>

<export_assignments>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: export_assignments [-h | -help] [-long_help] [-reorganize]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -reorganize: Option to reorganize the Quartus II Settings File (.qsf)
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Exports assignments for the current revision to the Quartus II 
Settings File (.qsf).

Assignments created or modified during an open project are
not saved to the Quartus II Settings File (.qsf) unless you
explicitly call one of the following two Tcl commands:

1) export_assignments
2) project_close (unless "-dont_export_assignments" is specified)

These two Tcl commands reside in the ::quartus::project Tcl 
package. You must save assignment changes before you run 
Quartus(R) II command-line executables. Note, however, that 
the Tcl commands "execute_flow" and "execute_module" (part 
of the ::quartus::flow Tcl package) automatically call 
"export_assignments" before they run command-line executables.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## The most common use of export_assignments is to
## call it before doing a system call
## to call a compiler command-line executable
project_open $project_name
set_global_assignment -name FAMILY Stratix

## Before calling quartus_map, 
## write out the FAMILY assignment
export_assignments

## Now, call quartus_map
qexec "[file join $::quartus(binpath) quartus_map] $project_name"

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Can't find active revision name. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Entity does not exist or uses illegal name characters: <string>. Specify a legal entity name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</export_assignments>

<get_project_directory>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: get_project_directory [-h | -help] [-long_help]

        -h | -help: Short help
        -long_help: Long help with examples and possible return values
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Returns the project directory for currently open project.
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_open one_wire
	# Print the current project directory
puts [get_project_directory]
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Open project does not exist. Open an existing project or create a new project.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</get_project_directory>

<execute_assignment_batch>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: execute_assignment_batch [-h | -help] [-long_help] <tcl commands>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        <tcl commands>: Tcl list of Tcl commands
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Iterates through the specified Tcl list of Tcl commands and executes
each command sequentially in batch mode.

In batch mode, Tcl commands that set Quartus II Settings File 
(.qsf) assignments are optimized to prevent them from repeatedly
write-locking and write-unlocking the QSF during consecutive calls, 
thereby slowing down the execution.

Currently, only the following commands are supported:

     assignment_group
     remove_all_global_assignments
     remove_all_instance_assignments
     remove_all_parameters
     set_global_assignment
     set_instance_assignment
     set_io_assignment
     set_location_assignment
     set_parameter
     set_power_file_assignment
<<<long_help_section>>>

--------------
Example Usage:
--------------

project_open one_wire
set tcl_cmds [list [list set_global_assignment -name FAMILY StratixII] \
                   [list set_global_assignment -name DEVICE AUTO] \
                   [list set_global_assignment -name TOP_LEVEL_ENTITY one_wire] \
                   [list set_global_assignment -name SAVE_DISK_SPACE OFF] \
                   [list set_location_assignment PIN_1 -to in1] \
                   [list set_instance_assignment -name MULTICYCLE 4 -from in1 -to out1] \
                   [list set_parameter -name STYLE FAST]]
execute_assignment_batch $tcl_cmds
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_ERROR	1   	ERROR: Unsupported Tcl command: <string>. Specify one of the supported Tcl commands listed in the help description for "<string> -h".
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</execute_assignment_batch>

<project_open>
<<<usage_only_section>>>
---------------------------------------------------------------------------

Usage: project_open [-h | -help] [-long_help] [-current_revision] [-force] [-revision <revision_name>] <project_name>

        -h | -help: Short help
        -long_help: Long help with examples and possible return values

        -current_revision: Option to open the current revision automatically
        -force: Option to open the project and overwrite the compilation database if the database version is incompatible.
        -revision <revision_name>: Revision name
        <project_name>: Project name
<<</usage_only_section>>>

------------------------
Tcl Package and Version:
------------------------

Belongs to ::quartus::project 6.0

------------
Description:
------------

Opens an existing project. To create a new project, use the
project_new command.

If the -revision option is not specified, the project name is
specified as the revision name.

The project_open command gives an error when the compilation database
version is not compatible with the current version of Quartus II
software.  You may specify the "-force" option to avoid the error and
overwrite the database.
<<<long_help_section>>>

--------------
Example Usage:
--------------

## Open project "chiptrip" and revision "chiptrip"
project_open chiptrip

## Open project "chiptrip" and revision "auto_max"
project_open -revision auto_max chiptrip

## Get the current revision before opening
## the project with the current revision
set project_name chiptrip
set current_revision [get_current_revision $project_name]
project_open -revision $current_revision $project_name
puts [get_global_assignment -name FAMILY]
project_close

-------------
Return Value:
-------------

Code Name	Code	String Return
---------	----	-------------
TCL_OK   	0   	INFO: Operation successful
TCL_OK   	0   	WARNING: Project is already open: <string>
TCL_ERROR	1   	ERROR: Can't open project: <string>. First close the currently open project: <string>.
TCL_ERROR	1   	ERROR: Can't open project: <string>
TCL_ERROR	1   	ERROR: Can't set revision: <string>. Make sure there is an open, active revision name.
TCL_ERROR	1   	ERROR: Can't run Tcl command while a process is in progress: <string>. To run the command, stop the compilation or simulation; or wait for the compilation or simulation to complete.
TCL_ERROR	1   	ERROR: Cannot open project: <string>. The project is not compatible with the installed version of the Quartus II software. Opening the project will overwrite the old project database. If you wish to overwrite the old project database, make sure to specify the -<string> option.
TCL_ERROR	1   	ERROR: Can't open revision: <string> (project: <string>). The revision is not compatible with the installed version of the Quartus II software. Opening the revision will overwrite the old revision database. If you wish to overwrite the old revision database, make sure to specify the -<string> option.
TCL_ERROR	1   	ERROR: Found two options: -<string> and -<string>. Choose one of the options.
TCL_ERROR	1   	ERROR: Revision does not exist: <string>. Specify a legal revision name using the "-<string>" option.
TCL_ERROR	1   	ERROR: Project does not exist or has illegal name characters: <string>. Specify a legal project name.
<<</long_help_section>>>
<<<usage_only_section>>>

---------------------------------------------------------------------------
<<</usage_only_section>>>
</project_open>

<<<</6.0>>>>
