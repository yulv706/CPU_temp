variable sim_setup_filename
variable tscr_fpos
set tscr_fpos 0

##############################################
##This function reads the transcript file provided and dumps messages on stdout
##############################################
proc create_ucli_file {transcript_file run_time script_mode} {
	set status 0
	set trns_fid [open $transcript_file a+]
	puts $trns_fid "Creating UCLI file: vcsmx_sim.ucli" 

	set sim_setup_script "vcsmx_sim.ucli"
	if [ catch {open "$sim_setup_script" w+} ucli_file_id ] {
	    nl_postmsg  error "Error: Can't open file $sim_setup_script for writing"
	    set status 1
	} else {
	    puts $ucli_file_id "run $run_time"
	    if {$script_mode == 1} {
		puts $ucli_file_id "quit"
	    }
	    close $ucli_file_id
	}
	close $trns_fid
	return $status

}

##############################################
##This function reads the transcript file provided and dumps messages on stdout
##############################################
proc display_msgs {transcript_file} {
	variable tscr_fpos
	if {[info procs post_sim_messages] != ""} {
		post_sim_messages $transcript_file
	} else {
		if [catch { open $transcript_file r } tr_file] {
			puts "Error: Can't find trancsript file $transcript_file."
			error "" "Can't open transcript file $transcript_file"
		} else {
			seek $tr_file $tscr_fpos
			while {1} {
				gets $tr_file line
				if { [eof $tr_file] == 0 } {
					puts "$line"
				} else {
					break
				}
			}
		}
		set tscr_fpos [tell $tr_file]
		close $tr_file
	}
}

proc elaborate_design {toplevel library transcript_file design_inst sdo_file_name}  {
	variable vcsmx_path
	set trns_fid [open $transcript_file a+]
	set sim_exe ""
	#If <toplevel>.sim file exists in library, then the design is VHDL top, else the design is Verilog top.
	set elab_cmd "$vcsmx_path/"

   set is_top_vhdl 0

	# collect all .sim files from work directory, which is the current directory
	set all_sim_files  [glob -nocomplain *.sim]

	if { [llength $all_sim_files] > 0 } {
		set found_top_file 0
		set top_level_sim_file "$toplevel.sim"
		set lc_top_level_sim_file [string tolower $top_level_sim_file]
		foreach file $all_sim_files {
			set lc_file [string tolower $file]
			if { "$lc_top_level_sim_file" == "$lc_file" } {
				set found_top_file 1	
				break
			}
		}
		if { $found_top_file } {
			set is_top_vhdl 1
		} 
	}

	if { $is_top_vhdl } {
		set elab_cmd ${elab_cmd}scs
		set elab_cmd "\"$elab_cmd\" -nc -mhdl -debug_all"
		set sim_exe "[pwd]/scsim"
	} else {
		set elab_cmd "${elab_cmd}vcs"
		set elab_cmd "\"$elab_cmd\" -nc -debug_all"
		set sim_exe "[pwd]/simv"
	}

	if { ($design_inst != "" ) && ($sdo_file_name != "") } {
		#The sdo_file_name and design_inst should be non null
		#This case applied only when performing gate level timing simulation
		#using VHDL output netlist generated by EDA netlist writer 
		set elab_cmd "$elab_cmd -sdf typ:$toplevel/$design_inst:$sdo_file_name"
	}

	set elab_cmd "$elab_cmd $toplevel"

	set cmd_status [catch {eval exec $elab_cmd} result]
	if { (($cmd_status == 0 ) || ([string equal $::errorCode NONE])) && ([file exists $sim_exe])} {
		puts $trns_fid "Info: Elaboration of design $toplevel was successful" 
	} else {
		set sim_exe ""
		puts $trns_fid "Error: Elaboration of design $toplevel was NOT successful"
		parse_tool_messages $result $trns_fid
		set status 1
	}
	close $trns_fid
	return $sim_exe
}

proc print_launch_instr {transcript_file} {
	set trns_fid [open $transcript_file a+]
	puts $trns_fid "Info: Successfully compiled the Simulation Libraries and sources for VCS MX "
	puts $trns_fid "Info: To perform simulation using VCS MX you should"
	puts $trns_fid "Info:  (1) Compile the testbench using the commands vhdlan and/or vlogan"
	puts $trns_fid "Info:  (2) Elaborate the design using the command scs or vcs"
	puts $trns_fid "Info:  (3) Launch simulator using command simv or scsim"
	close $trns_fid
}

proc create_lib {lib_name {lib_base_dir verilog_libs}} {
	variable sim_setup_filename
	set lib_dir "$lib_base_dir/$lib_name"
	if ![file isdirectory $lib_dir] {
		nl_postmsg info "Info: Creating directory $lib_dir"
		create_work_dir $lib_dir
	}
	set file_id [open $sim_setup_filename a+]
	puts $file_id "$lib_name : $lib_dir"
	close $file_id
}

proc create_lib_map {lib_name {lib_base_dir verilog_libs}} {
	variable sim_setup_filename
	set lib_dir "$lib_base_dir/$lib_name"
	set file_id [open $sim_setup_filename a+]
	puts $file_id "$lib_name : $lib_dir"
	close $file_id
}

proc parse_tool_messages {messages trns_fid} {
	foreach msg_line [split $messages \n] {
	    if {$msg_line != ""} {
		puts $trns_fid "Error: VCS MX: $msg_line"
	    }
	}
}

proc setup_sim {} {
	variable transcript_file
	variable sim_setup_filename
	variable vcsmx_path
	variable ::env

	set transcript_file "vcsmx_transcript"
	set env(VCS_HOME) "$vcsmx_path/.."
	set env(PATH) "$vcsmx_path:$env(PATH)"

	#Delete files and directories from previous run 
	set old_files_list {".synopsys_vss.setup" "vcsmx_sim.ucli" $transcript_file}
	foreach file $old_files_list {
		if [file exists $file ] {
			file delete -force $file
		}
	}
	set old_dirs_list {gate_work rtl_work vhdl_libs verilog_libs csrc "simv.daidir"}
	foreach dir $old_dirs_list {
		if [file isdirectory $dir ] {
			file delete -force $file
		}
	}


	# create .synopsys_vss.setup setup file
	set sim_setup_filename ".synopsys_vss.setup"
	if [ catch {open $sim_setup_filename w+} file_id ] {
		nl_postmsg  error "Error: Can't open file $sim_setup_filename for writing"
	}

	set env(SYNOPSYS_SIM_SETUP) ".synopsys_vss.setup"
	puts $file_id "-- Custom Settings --"
	puts $file_id "TIMEBASE = ps"
	puts $file_id "TIME_RESOLUTION = ps"
	puts $file_id ""
	puts $file_id "-- work directory --"
	close $file_id
}

####################################################################
## Setup VCS MX Environment
####################################################################
setup_sim

####################################################################
##Compile Altera Simulation Models
####################################################################
set status [compile_altera_sim_models $transcript_file]

####################################################################
##Compile design files 
####################################################################
if {$status == 0} {
    display_msgs $transcript_file
    set status [compile_design_files $transcript_file]
}

####################################################################
##Compile testbench files
####################################################################
if {$status == 0} {
    display_msgs $transcript_file
    set sim_exe [compile_and_elaborate_testbench $transcript_file]
}

####################################################################
##Launch Simulation
####################################################################
if {[info procs launch_simulation] != ""} {
    set sim_exe $sim_exe
    display_msgs $transcript_file
    set status [launch_simulation $sim_exe $transcript_file]
    display_msgs $transcript_file
} 
