package provide ::qpm::pkg::export_db_all 1.0

	# Load Package
package require ::qpm::lib::ccl

# ----------------------------------------------------------------
#
namespace eval ::qpm::pkg::export_db_all {
#
# Description: Configuration
#
# ----------------------------------------------------------------

	namespace export requires_mapper
	namespace export get_rank
	namespace export get_title
	namespace export get_description
	namespace export get_revision
	namespace export get_file_types
	namespace export get_archive_files 
	namespace export get_mutually_exclusive_pkgs
	namespace export is_hidden
	namespace export is_hidden_in_ui
	namespace export is_default
	namespace export is_legal

    # Declare Global Variables Here!
    # DO NOT EXPORT ANY OF THESE!
    
    variable pvcs_revision [regsub -nocase -- {\$revision:\s*(\S+)\s*\$} {$Revision: #1 $} {\1}]
    variable archive_desc "Archives version compatible database files only if you have exported the version compatible database after compilation. If have not exported the version compatible database, this file subset archives nothing."
	variable title "version compatible database files"
}

# ----------------------------------------------------------------
#
proc ::qpm::pkg::export_db_all::get_revision { } {
#
# Description: Get revision
#
# ----------------------------------------------------------------

	variable pvcs_revision
	return $pvcs_revision
}

# ----------------------------------------------------------------
#
proc ::qpm::pkg::export_db_all::get_description { } {
#
# Description: Get description
#
# ----------------------------------------------------------------

	variable archive_desc
	return $archive_desc
}

# ----------------------------------------------------------------
#
proc ::qpm::pkg::export_db_all::requires_mapper { } {
#
# Description: Get title
#
# ----------------------------------------------------------------

	return 0
}

# ----------------------------------------------------------------
#
proc ::qpm::pkg::export_db_all::get_rank { } {
#
# Description: Get ranking order
#
# ----------------------------------------------------------------

	return 55
}

# ----------------------------------------------------------------
#
proc ::qpm::pkg::export_db_all::get_title { } {
#
# Description: Get title
#
# ----------------------------------------------------------------

	variable title
	return [string replace $title 0 0 [string totitle [string index $title 0]]]
}

# ----------------------------------------------------------------
#
proc ::qpm::pkg::export_db_all::is_hidden { } {
#
# Description: Determine if this is hidden
#
# ----------------------------------------------------------------

	return 1
}

# ----------------------------------------------------------------
#
proc ::qpm::pkg::export_db_all::is_hidden_in_ui { } {
#
# Description: Determine if this is hidden in UI
#
# ----------------------------------------------------------------

	return 0
}

# ----------------------------------------------------------------
#
proc ::qpm::pkg::export_db_all::is_default { } {
#
# Description: Determine if this is the default template to use.
#
# ----------------------------------------------------------------

	return 0
}

# ----------------------------------------------------------------
#
proc ::qpm::pkg::export_db_all::get_mutually_exclusive_pkgs { } {
#
# Description: Returns a list of mutually exclusive packages.
#
# ----------------------------------------------------------------

	return [list export_db_post_map]
}

# ----------------------------------------------------------------
#
proc ::qpm::pkg::export_db_all::get_file_types { } {
#
# Description: Returns a list of files to archive
#
# ----------------------------------------------------------------

	set file_types [list "Version compatible database files generated by Export Database and stored in the directory specified by the VER_COMPATIBLE_DB_DIR assignment"]

	return $file_types
}

# ----------------------------------------------------------------
#
proc ::qpm::pkg::export_db_all::is_legal { } {
#
# Description: Returns true if this pkg can be used
#
# ----------------------------------------------------------------

	variable title

	set is_legal 1

	set orig_dir [pwd]
	set revision $::quartus(settings)

		# Include files export_db directory
	set export_db [get_global_assignment -name BAK_EXPORT_DIR]
	if {[file isdirectory $export_db] && ![catch {cd $export_db} result]} {
#		set export_db [pwd]
		set log $revision.export_db_files
		if {[file exists $log]} {
			if [catch {open $log r} input_fs] {
				msg_vdebug "Couldn't open the file \"$log\" for reading"
				set is_legal 0
			} else {
				close $input_fs
			}
		} else {
			msg_vdebug "Couldn't find the file \"$log\""
			set is_legal 0
		}
		cd $orig_dir
	} else {
		set is_legal 0
	}

	if {!$is_legal} {
		::qpm::lib::ccl::print_message -warning "Version compatible database files do not exist -- excluding '[get_title]'"
	}

	return $is_legal
}

# ----------------------------------------------------------------
#
proc ::qpm::pkg::export_db_all::get_archive_files { } {
#
# Description: Returns a list of files to archive
#
# ----------------------------------------------------------------

	array set archiveFiles {}

	if [is_legal] {

		set orig_dir [pwd]
		set revision $::quartus(settings)

			# Include files export_db directory
		set export_db [get_global_assignment -name BAK_EXPORT_DIR]
		cd $export_db

		set log $revision.export_db_files
		if [catch {open $log r} input_fs] {
		} else {
			while {[gets $input_fs fname] >= 0} {
				if {[string length $fname] > 0} {
					if {[file exists $fname]} {
						set archiveFiles([file join $export_db $fname]) 1
					}
				}
			}
			close $input_fs
		}

		cd $orig_dir
	}

	return [lsort -dictionary [array names archiveFiles]]
}
