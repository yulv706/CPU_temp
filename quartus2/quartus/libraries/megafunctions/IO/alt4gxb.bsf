/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/
/*
Copyright (C) 1991-2007 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/
(header "symbol" (version "1.1"))
(symbol
	(rect 64 64 408 880)
	(text "ALT4GXB" (rect 144 8 210 24)(font "Arial" (font_size 10)))
	(text "inst" (rect 16 800 33 812)(font "Arial" ))
	(port
		(pt 0 144)
		(input)
		(text "rx_bitslip[number_of_channels-1..0]" (rect 56 216 260 230)(font "Arial" (font_size 8)))
		(text "rx_bitslip[]" (rect 24 136 81 150)(font "Arial" (font_size 8)))
		(line (pt 0 144)(pt 16 144)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 256)
		(input)
		(text "rx_a1a2size[number_of_channels-1..0]" (rect 24 264 248 278)(font "Arial" (font_size 8)))
		(text "rx_a1a2size[]" (rect 24 248 101 262)(font "Arial" (font_size 8)))
		(line (pt 0 256)(pt 16 256)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 128)
		(input)
		(text "rx_locktorefclk[number_of_channels-1..0]" (rect 24 280 261 294)(font "Arial" (font_size 8)))
		(text "rx_locktorefclk[]" (rect 24 120 114 134)(font "Arial" (font_size 8)))
		(line (pt 0 128)(pt 16 128)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 112)
		(input)
		(text "rx_locktodata[number_of_channels-1..0]" (rect 24 296 254 310)(font "Arial" (font_size 8)))
		(text "rx_locktodata[]" (rect 24 104 107 118)(font "Arial" (font_size 8)))
		(line (pt 0 112)(pt 16 112)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 80)
		(input)
		(text "rx_datain[number_of_channels-1..0]" (rect 0 88 206 102)(font "Arial" (font_size 8)))
		(text "rx_datain[]" (rect 24 72 84 86)(font "Arial" (font_size 8)))
		(line (pt 0 80)(pt 16 80)(line_width 3))
	)
	(port
		(pt 0 96)
		(input)
		(text "rx_cruclk[number_of_channels-1..0]" (rect 0 88 206 102)(font "Arial" (font_size 8)))
		(text "rx_cruclk[]" (rect 24 88 84 102)(font "Arial" (font_size 8)))
		(line (pt 0 96)(pt 16 96)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 48)
		(input)
		(text "rx_digitalreset[rx_digitalreset_port_width-1..0]" (rect 24 104 285 118)(font "Arial" (font_size 8)))
		(text "rx_digitalreset[]" (rect 24 40 111 54)(font "Arial" (font_size 8)))
		(line (pt 0 48)(pt 16 48)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 64)
		(input)
		(text "rx_analogreset[rx_digitalreset_port_width-1..0]" (rect 24 120 291 134)(font "Arial" (font_size 8)))
		(text "rx_analogreset[]" (rect 24 56 117 70)(font "Arial" (font_size 8)))
		(line (pt 0 64)(pt 16 64)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 288)
		(input)
		(text "rx_powerdown[number_of_channels -1..0]" (rect 24 472 270 486)(font "Arial" (font_size 8)))
		(text "rx_powerdown[]" (rect 24 280 120 294)(font "Arial" (font_size 8)))
		(line (pt 0 288)(pt 16 288)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 176)
		(input)
		(text "rx_invpolarity[number_of_channels-1..0]" (rect 24 512 254 526)(font "Arial" (font_size 8)))
		(text "rx_invpolarity[]" (rect 24 168 107 182)(font "Arial" (font_size 8)))
		(line (pt 0 176)(pt 16 176)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 192)
		(input)
		(text "rx_revbitorderwa[number_of_channels - 1..0]" (rect 24 528 284 542)(font "Arial" (font_size 8)))
		(text "rx_revbitorderwa[]" (rect 24 184 131 198)(font "Arial" (font_size 8)))
		(line (pt 0 192)(pt 16 192)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 224)
		(input)
		(text "rx_enabyteord[number_of_channels-1 ..0]" (rect 24 560 264 574)(font "Arial" (font_size 8)))
		(text "rx_enabyteord[]" (rect 24 216 114 230)(font "Arial" (font_size 8)))
		(line (pt 0 224)(pt 16 224)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 208)
		(input)
		(text "rx_revbyteorderwa[number_of_channels-1..0]" (rect 24 536 289 550)(font "Arial" (font_size 8)))
		(text "rx_revbyteorderwa[]" (rect 24 200 143 214)(font "Arial" (font_size 8)))
		(line (pt 0 208)(pt 16 208)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 160)
		(input)
		(text "rx_enapatternalign[number_of_channels-1..0]" (rect 24 496 283 510)(font "Arial" (font_size 8)))
		(text "rx_enapatternalign[]" (rect 24 152 137 166)(font "Arial" (font_size 8)))
		(line (pt 0 160)(pt 16 160)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 240)
		(input)
		(text "rx_seriallpbken[number_of_channels-1..0]" (rect 24 576 263 590)(font "Arial" (font_size 8)))
		(text "rx_seriallpbken[]" (rect 24 232 117 246)(font "Arial" (font_size 8)))
		(line (pt 0 240)(pt 16 240)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 272)
		(input)
		(text "pipe8b10binvpolarity[number_of_channels-1..0]" (rect 24 288 294 302)(font "Arial" (font_size 8)))
		(text "pipe8b10binvpolarity[]" (rect 24 264 147 278)(font "Arial" (font_size 8)))
		(line (pt 0 272)(pt 16 272)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 360)
		(input)
		(text "tx_datain[tx_channel_width*number_of_channels-1..0]" (rect 56 296 367 310)(font "Arial" (font_size 8)))
		(text "tx_datain[]" (rect 24 352 83 366)(font "Arial" (font_size 8)))
		(line (pt 0 360)(pt 16 360)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 392)
		(input)
		(text "tx_ctrlenable[tx_dwidth_factor*number_of_channels-1..0]" (rect 56 440 385 454)(font "Arial" (font_size 8)))
		(text "tx_ctrlenable[]" (rect 24 384 104 398)(font "Arial" (font_size 8)))
		(line (pt 0 392)(pt 16 392)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 376)
		(input)
		(text "tx_forcedisp[tx_dwidth_factor*number_of_channels-1..0]" (rect 56 456 384 470)(font "Arial" (font_size 8)))
		(text "tx_forcedisp[]" (rect 24 368 103 382)(font "Arial" (font_size 8)))
		(line (pt 0 376)(pt 16 376)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 408)
		(input)
		(text "tx_dispval[tx_dwidth_factor*number_of_channels-1..0]" (rect 24 496 337 510)(font "Arial" (font_size 8)))
		(text "tx_dispval[]" (rect 24 400 88 414)(font "Arial" (font_size 8)))
		(line (pt 0 408)(pt 16 408)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 424)
		(input)
		(text "tx_detectrxloop[number_of_channels-1..0]" (rect 24 512 265 526)(font "Arial" (font_size 8)))
		(text "tx_detectrxloop[]" (rect 24 416 119 430)(font "Arial" (font_size 8)))
		(line (pt 0 424)(pt 16 424)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 440)
		(input)
		(text "tx_forceelecidle[number_of_channels-1..0]" (rect 24 528 268 542)(font "Arial" (font_size 8)))
		(text "tx_forceelecidle[]" (rect 24 432 121 446)(font "Arial" (font_size 8)))
		(line (pt 0 440)(pt 16 440)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 456)
		(input)
		(text "tx_forcedispcompliance[number_of_channels-1..0]" (rect 24 544 313 558)(font "Arial" (font_size 8)))
		(text "tx_forcedispcompliance[]" (rect 24 448 166 462)(font "Arial" (font_size 8)))
		(line (pt 0 456)(pt 16 456)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 472)
		(input)
		(text "powerdn[number_of_channels*2 -1 ..0]" (rect 24 560 248 574)(font "Arial" (font_size 8)))
		(text "powerdn[]" (rect 24 464 83 478)(font "Arial" (font_size 8)))
		(line (pt 0 472)(pt 16 472)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 488)
		(input)
		(text "tx_invpolarity[number_of_channels-1..0]" (rect 24 576 252 590)(font "Arial" (font_size 8)))
		(text "tx_invpolarity[]" (rect 24 480 106 494)(font "Arial" (font_size 8)))
		(line (pt 0 488)(pt 16 488)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 344)
		(input)
		(text "tx_digitalreset[tx_digitalreset_port_width-1..0]" (rect 24 312 283 326)(font "Arial" (font_size 8)))
		(text "tx_digitalreset[]" (rect 24 336 110 350)(font "Arial" (font_size 8)))
		(line (pt 0 344)(pt 16 344)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 504)
		(input)
		(text "tx_revparallellpbken[number_of_channels-1..0]" (rect 24 592 290 606)(font "Arial" (font_size 8)))
		(text "tx_revparallellpbken[]" (rect 24 496 144 510)(font "Arial" (font_size 8)))
		(line (pt 0 504)(pt 16 504)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 584)
		(input)
		(text "gxb_powerdown[gxb_powerdown_width-1..0]" (rect 24 624 294 638)(font "Arial" (font_size 8)))
		(text "gxb_powerdown[]" (rect 24 576 130 590)(font "Arial" (font_size 8)))
		(line (pt 0 584)(pt 16 584)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 648)
		(input)
		(text "fixedclk" (rect 24 688 67 702)(font "Arial" (font_size 8)))
		(text "fixedclk[]" (rect 24 640 74 654)(font "Arial" (font_size 8)))
		(line (pt 0 648)(pt 16 648)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 632)
		(input)
		(text "pll_inclk" (rect 24 656 67 670)(font "Arial" (font_size 8)))
		(text "pll_inclk" (rect 24 624 67 638)(font "Arial" (font_size 8)))
		(line (pt 0 632)(pt 16 632)(color 0 128 255)(line_width 1))
	)
	(port
		(pt 0 744)
		(input)
		(text "cal_blk_clk" (rect 24 744 85 758)(font "Arial" (font_size 8)))
		(text "cal_blk_clk" (rect 24 736 85 750)(font "Arial" (font_size 8)))
		(line (pt 0 744)(pt 16 744)(color 0 128 255)(line_width 1))
	)
	(port
		(pt 0 760)
		(input)
		(text "cal_blk_powerdown" (rect 24 760 140 774)(font "Arial" (font_size 8)))
		(text "cal_blk_powerdown" (rect 24 752 140 766)(font "Arial" (font_size 8)))
		(line (pt 0 760)(pt 16 760)(color 0 128 255)(line_width 1))
	)
	(port
		(pt 0 696)
		(input)
		(text "reconfig_clk" (rect 24 648 93 662)(font "Arial" (font_size 8)))
		(text "reconfig_clk" (rect 24 688 93 702)(font "Arial" (font_size 8)))
		(line (pt 0 696)(pt 16 696)(color 0 128 255)(line_width 1))
	)
	(port
		(pt 0 664)
		(input)
		(text "reconfig_togxb[2..0]" (rect 24 704 138 718)(font "Arial" (font_size 8)))
		(text "reconfig_togxb[]" (rect 24 656 117 670)(font "Arial" (font_size 8)))
		(line (pt 0 664)(pt 16 664)(color 0 128 255)(line_width 1))
		(unused)
	)
	(port
		(pt 0 712)
		(input)
		(text "aeq_togxb[(number_of_channels*4)-1..0]" (rect 24 624 258 638)(font "Arial" (font_size 8)))
		(text "aeq_togxb[]" (rect 24 704 91 718)(font "Arial" (font_size 8)))
		(line (pt 0 712)(pt 16 712)(color 0 128 255)(line_width 3))
		(unused)
	)
	(port
		(pt 0 600)
		(input)
		(text "rateswitch[number_of_channels-1..0]" (rect 24 520 238 534)(font "Arial" (font_size 8)))
		(text "rateswitch[number_of_channels-1..0]" (rect 24 592 238 606)(font "Arial" (font_size 8)))
		(line (pt 0 600)(pt 16 600)(line_width 1))
		(unused)
	)
	(port
		(pt 0 520)
		(input)
		(text "tx_pipedeemph[]" (rect 24 488 117 502)(font "Arial" (font_size 8)))
		(text "tx_pipedeemph[]" (rect 24 512 117 526)(font "Arial" (font_size 8)))
		(line (pt 0 520)(pt 16 520)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 536)
		(input)
		(text "tx_pipeswing[]" (rect 24 504 107 518)(font "Arial" (font_size 8)))
		(text "tx_pipeswing[]" (rect 24 528 107 542)(font "Arial" (font_size 8)))
		(line (pt 0 536)(pt 16 536)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 552)
		(input)
		(text "tx_pipemargin[]" (rect 24 520 110 534)(font "Arial" (font_size 8)))
		(text "tx_pipemargin[]" (rect 24 544 110 558)(font "Arial" (font_size 8)))
		(line (pt 0 552)(pt 16 552)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 304)
		(input)
		(text "rx_elecidleinfersel[number_of_channels*3-1..0]" (rect 24 296 293 310)(font "Arial" (font_size 8)))
		(text "rx_elecidleinfersel[]" (rect 24 296 134 310)(font "Arial" (font_size 8)))
		(line (pt 0 304)(pt 16 304)(color 0 128 255)(line_width 3))
	)
	(port
		(pt 0 320)
		(input)
		(text "rx_prbscidenable[number_of_channels-1..0]" (rect 24 312 276 326)(font "Arial" (font_size 8)))
		(text "rx_prbscidenable[]" (rect 24 312 130 326)(font "Arial" (font_size 8)))
		(line (pt 0 320)(pt 16 320)(line_width 1))
	)
	(port
		(pt 344 608)
		(output)
		(text "coreclkout[number_of_quads-1..0]" (rect 40 88 235 102)(font "Arial" (font_size 8)))
		(text "coreclkout[]" (rect 264 600 330 614)(font "Arial" (font_size 8)))
		(line (pt 344 608)(pt 328 608)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 112)
		(output)
		(text "rx_rlv[number_of_channels-1..0]" (rect 264 216 450 230)(font "Arial" (font_size 8)))
		(text "rx_rlv[]" (rect 288 104 328 118)(font "Arial" (font_size 8)))
		(line (pt 344 112)(pt 328 112)(line_width 3))
	)
	(port
		(pt 344 416)
		(output)
		(text "rx_signaldetect[number_of_channels-1..0]" (rect 263 328 503 342)(font "Arial" (font_size 8)))
		(text "rx_signaldetect[]" (rect 240 408 334 422)(font "Arial" (font_size 8)))
		(line (pt 344 416)(pt 328 416)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 592)
		(output)
		(text "rx_channelaligned[number_of_quads-1..0]" (rect 295 408 535 422)(font "Arial" (font_size 8)))
		(text "rx_channelaligned[]" (rect 232 584 342 598)(font "Arial" (font_size 8)))
		(line (pt 344 592)(pt 328 592)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 352)
		(output)
		(text "rx_bisterr[number_of_channels-1..0]" (rect 295 392 503 406)(font "Arial" (font_size 8)))
		(text "rx_bisterr[]" (rect 272 344 334 358)(font "Arial" (font_size 8)))
		(line (pt 344 352)(pt 328 352)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 368)
		(output)
		(text "rx_bistdone[number_of_channels-1..0]" (rect 295 408 515 422)(font "Arial" (font_size 8)))
		(text "rx_bistdone[]" (rect 264 360 338 374)(font "Arial" (font_size 8)))
		(line (pt 344 368)(pt 328 368)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 48)
		(output)
		(text "rx_dataout[rx_channel_width*number_of_channels-1..0]" (rect 294 40 616 54)(font "Arial" (font_size 8)))
		(text "rx_dataout[]" (rect 256 40 324 54)(font "Arial" (font_size 8)))
		(line (pt 344 48)(pt 328 48)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 64)
		(output)
		(text "rx_clkout[number_of_channels-1..0]" (rect 294 56 499 70)(font "Arial" (font_size 8)))
		(text "rx_clkout[]" (rect 264 56 323 70)(font "Arial" (font_size 8)))
		(line (pt 344 64)(pt 328 64)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 80)
		(output)
		(text "rx_pll_locked[number_of_channels-1..0]" (rect 294 72 521 86)(font "Arial" (font_size 8)))
		(text "rx_pll_locked[]" (rect 248 72 329 86)(font "Arial" (font_size 8)))
		(line (pt 344 80)(pt 328 80)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 96)
		(output)
		(text "rx_freqlocked[number_of_channels-1..0]" (rect 294 80 526 94)(font "Arial" (font_size 8)))
		(text "rx_freqlocked[]" (rect 248 88 334 102)(font "Arial" (font_size 8)))
		(line (pt 344 96)(pt 328 96)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 128)
		(output)
		(text "rx_syncstatus[number_of_channels*rx_dwidth_factor-1..0]" (rect 263 248 602 262)(font "Arial" (font_size 8)))
		(text "rx_syncstatus[]" (rect 248 120 337 134)(font "Arial" (font_size 8)))
		(line (pt 344 128)(pt 328 128)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 144)
		(output)
		(text "rx_a1detect[number_of_channels*rx_word_aligner_num_byte-1..0]" (rect 294 128 677 142)(font "Arial" (font_size 8)))
		(text "rx_a1detect[]" (rect 256 136 331 150)(font "Arial" (font_size 8)))
		(line (pt 344 144)(pt 328 144)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 192)
		(output)
		(text "rx_k2detect[number_of_channels*2 - 1..0]" (rect 294 184 533 198)(font "Arial" (font_size 8)))
		(text "rx_k2detect[]" (rect 256 184 330 198)(font "Arial" (font_size 8)))
		(line (pt 344 192)(pt 328 192)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 224)
		(output)
		(text "rx_ctrldetect[number_of_channels*rx_dwidth_factor-1..0]" (rect 294 216 623 230)(font "Arial" (font_size 8)))
		(text "rx_ctrldetect[]" (rect 256 216 335 230)(font "Arial" (font_size 8)))
		(line (pt 344 224)(pt 328 224)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 240)
		(output)
		(text "rx_errdetect[number_of_channels*rx_dwidth_factor-1..0]" (rect 263 296 591 310)(font "Arial" (font_size 8)))
		(text "rx_errdetect[]" (rect 256 232 333 246)(font "Arial" (font_size 8)))
		(line (pt 344 240)(pt 328 240)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 256)
		(output)
		(text "rx_disperr[number_of_channels*rx_dwidth_factor-1..0]" (rect 263 312 579 326)(font "Arial" (font_size 8)))
		(text "rx_disperr[]" (rect 264 248 330 262)(font "Arial" (font_size 8)))
		(line (pt 344 256)(pt 328 256)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 272)
		(output)
		(text "rx_runningdisp[number_of_channels*rx_dwidth_factor-1..0]" (rect 294 264 636 278)(font "Arial" (font_size 8)))
		(text "rx_runningdisp[]" (rect 240 264 332 278)(font "Arial" (font_size 8)))
		(line (pt 344 272)(pt 328 272)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 288)
		(output)
		(text "rx_rmfifodatainserted[number_of_channels*rx_dwidth_factor-1..0]" (rect 294 328 673 342)(font "Arial" (font_size 8)))
		(text "rx_rmfifodatainserted[]" (rect 208 280 337 294)(font "Arial" (font_size 8)))
		(line (pt 344 288)(pt 328 288)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 304)
		(output)
		(text "rx_rmfifodatadeleted[number_of_channels*rx_dwidth_factor-1..0]" (rect 294 296 669 310)(font "Arial" (font_size 8)))
		(text "rx_rmfifodatadeleted[]" (rect 216 296 341 310)(font "Arial" (font_size 8)))
		(line (pt 344 304)(pt 328 304)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 320)
		(output)
		(text "rx_rmfifoalmostempty[number_of_channels-1..0]" (rect 294 312 570 326)(font "Arial" (font_size 8)))
		(text "rx_rmfifoalmostempty[]" (rect 208 312 337 326)(font "Arial" (font_size 8)))
		(line (pt 344 320)(pt 328 320)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 336)
		(output)
		(text "rx_rmfifoalmostfull[number_of_channels-1..0]" (rect 294 328 552 342)(font "Arial" (font_size 8)))
		(text "rx_rmfifoalmostfull[]" (rect 232 328 344 342)(font "Arial" (font_size 8)))
		(line (pt 344 336)(pt 328 336)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 384)
		(output)
		(text "rx_a1a2sizeout[number_of_channels*rx_dwidth_factor..0]" (rect 294 376 627 390)(font "Arial" (font_size 8)))
		(text "rx_a1a2sizeout[]" (rect 248 376 343 390)(font "Arial" (font_size 8)))
		(line (pt 344 384)(pt 328 384)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 400)
		(output)
		(text "rx_byteorderalignstatus[number_of_channels-1..0]" (rect 294 392 583 406)(font "Arial" (font_size 8)))
		(text "rx_byteorderalignstatus[]" (rect 200 392 342 406)(font "Arial" (font_size 8)))
		(line (pt 344 400)(pt 328 400)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 448)
		(output)
		(text "pipestatus[number_of_channels*3 -1 ..0]" (rect 294 440 525 454)(font "Arial" (font_size 8)))
		(text "pipestatus[]" (rect 272 440 338 454)(font "Arial" (font_size 8)))
		(line (pt 344 448)(pt 328 448)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 464)
		(output)
		(text "pipedatavalid[number_of_channels-1 ..0]" (rect 294 456 525 470)(font "Arial" (font_size 8)))
		(text "pipedatavalid[]" (rect 256 456 337 470)(font "Arial" (font_size 8)))
		(line (pt 344 464)(pt 328 464)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 480)
		(output)
		(text "pipeelecidle[number_of_channels-1..0]" (rect 294 472 513 486)(font "Arial" (font_size 8)))
		(text "pipeelecidle[]" (rect 264 472 337 486)(font "Arial" (font_size 8)))
		(line (pt 344 480)(pt 328 480)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 496)
		(output)
		(text "pipephydonestatus[number_of_channels-1 ..0]" (rect 294 488 559 502)(font "Arial" (font_size 8)))
		(text "pipephydonestatus[]" (rect 224 488 339 502)(font "Arial" (font_size 8)))
		(line (pt 344 496)(pt 328 496)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 528)
		(output)
		(text "tx_dataout[number_of_channels-1..0]" (rect 294 520 507 534)(font "Arial" (font_size 8)))
		(text "tx_dataout[]" (rect 272 520 339 534)(font "Arial" (font_size 8)))
		(line (pt 344 528)(pt 328 528)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 544)
		(output)
		(text "tx_clkout[number_of_channels-1..0]" (rect 294 640 498 654)(font "Arial" (font_size 8)))
		(text "tx_clkout[]" (rect 280 536 337 550)(font "Arial" (font_size 8)))
		(line (pt 344 544)(pt 328 544)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 624)
		(output)
		(text "pll_locked[number_of_quads-1..0]" (rect 294 616 486 630)(font "Arial" (font_size 8)))
		(text "pll_locked[]" (rect 272 616 334 630)(font "Arial" (font_size 8)))
		(line (pt 344 624)(pt 328 624)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 640)
		(output)
		(text "cal_blk_calibrationstatus[4..0]" (rect 294 632 461 646)(font "Arial" (font_size 8)))
		(text "cal_blk_calibrationstatus" (rect 200 632 339 646)(font "Arial" (font_size 8)))
		(line (pt 344 640)(pt 328 640)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 160)
		(output)
		(text "rx_a2detect[number_of_channels*rx_word_aligner_num_byte-1..0]" (rect 294 152 677 166)(font "Arial" (font_size 8)))
		(text "rx_a2detect[]" (rect 256 152 331 166)(font "Arial" (font_size 8)))
		(line (pt 344 160)(pt 328 160)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 176)
		(output)
		(text "rx_k1detect[number_of_channels*rx_word_aligner_num_byte-1..0]" (rect 294 168 676 182)(font "Arial" (font_size 8)))
		(text "rx_k1detect[]" (rect 256 168 330 182)(font "Arial" (font_size 8)))
		(line (pt 344 176)(pt 328 176)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 208)
		(output)
		(text "rx_patterndetect[number_of_channels*rx_dwidth_factor-1..0]" (rect 294 200 645 214)(font "Arial" (font_size 8)))
		(text "rx_patterndetect[]" (rect 232 200 333 214)(font "Arial" (font_size 8)))
		(line (pt 344 208)(pt 328 208)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 576)
		(output)
		(text "reconfig_fromgxb[number_of_quads-1..0]" (rect 294 552 532 566)(font "Arial" (font_size 8)))
		(text "reconfig_fromgxb[]" (rect 232 568 340 582)(font "Arial" (font_size 8)))
		(line (pt 344 576)(pt 328 576)(color 128 0 255)(line_width 3))
	)
	(port
		(pt 344 560)
		(output)
		(text "aeq_fromgxb[number_of_channels*6-1..0]" (rect 294 560 534 574)(font "Arial" (font_size 8)))
		(text "aeq_fromgxb[]" (rect 256 552 338 566)(font "Arial" (font_size 8)))
		(line (pt 344 560)(pt 328 560)(color 128 0 255)(line_width 4))
		(unused)
	)
	(parameter
		"OPERATION_MODE"
		"\"duplex\""
		"Determine if the operation mode of alt4gxb.Possible values are \"RX\", \"TX\" and \"DUPLEX\"."
		"\"duplex\"" "\"rx\"" "\"tx\"" 
	)
	(parameter
		"LOOPBACK_MODE"
		"\"none\""
		"Determine if there is any loopback from the receiver to the transmitter. Possible values are \"NONE\", \"SLB\", \"PLB\" , \"PRECDR_RSLB\" , \"POSTCDR_RSLB\" and \"RPLB\"."
		"\"none\"" "\"slb\"" "\"plb\"" "\"precdr_rslb\"" "\"postcdr_rslb\"" "\"rplb\"" 
	)
	(parameter
		"PROTOCOL"
		"\"3g_basic\""
		"Determine the protocol of the GXB block. Possible values are \"3G_BASIC\", \"6G_BASIC\", \"XAUI\", \"GIGE\", \"PIPE\",  \"SONET\" or \"CPRI\"."
		"\"3g_basic\"" "\"6g_basic\"" "\"xaui\"" "\"gige\"" "\"pipe\"" "\"sonet\"" "\"cpri\"" 
	)
	(parameter
		"NUMBER_OF_CHANNELS"
		"1"
		"Number of channels in the GXB block."
	)
	(parameter
		"STARTING_CHANNEL_NUMBER"
		"0"
		"The starting number for the first channel in the GXB block."
	)
	(parameter
		"NUMBER_OF_QUADS"
		"1"
		"Number of GXB quads, one quad has four channels."
	)
	(parameter
		"RX_CHANNEL_WIDTH"
		"8"
		"The width of the channel from the receiver into the PLD core."
	)
	(parameter
		"TX_CHANNEL_WIDTH"
		"8"
		"The width of the channel out from the transmitter."
	)
	(parameter
		"RX_USE_DOUBLE_DATA_MODE"
		"\"false\""
		"Determine whether to use double data width mode. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"RX_USE_DESERIALIZER_DOUBLE_DATA_MODE"
		"\"false\""
		"Determine whether to use deserializer in single width or double width. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"RX_CRU_INCLOCK0_PERIOD"
		"5000"
		"Determine the inclock period for rx_cruclk input port to the CRU if rx_use_cruclk is set to to true."
	)
	(parameter
		"RX_CRU_INCLOCK1_PERIOD"
		"5000"
		"Determine the inclock period for rx_cruclk input port to the index 1 clock source of the CRU if the reconfig is used."
	)
	(parameter
		"RX_CRU_INCLOCK2_PERIOD"
		"5000"
		"Determine the inclock period for rx_cruclk input port to the index 2 clock source of the CRU if the reconfig is used."
	)
	(parameter
		"RX_CRU_INCLOCK3_PERIOD"
		"5000"
		"Determine the inclock period for rx_cruclk input port to the index 3 clock source of the CRU if the reconfig is used."
	)
	(parameter
		"RX_CRU_INCLOCK4_PERIOD"
		"5000"
		"Determine the inclock period for rx_cruclk input port to the index 4 clock source of the CRU if the reconfig is used."
	)
	(parameter
		"RX_CRU_INCLOCK5_PERIOD"
		"5000"
		"Determine the inclock period for rx_cruclk input port to the index 5 clock source of the CRU if the reconfig is used."
	)
	(parameter
		"RX_CRU_INCLOCK6_PERIOD"
		"5000"
		"Determine the inclock period for rx_cruclk input port to the index 6 clock source of the CRU if the reconfig is used."
	)
	(parameter
		"RX_CRU_INCLOCK7_PERIOD"
		"5000"
		"Determine the inclock period for rx_cruclk input port to the index 7 clock source of the CRU if the reconfig is used."
	)
	(parameter
		"RX_CRU_INCLOCK8_PERIOD"
		"5000"
		"Determine the inclock period for rx_cruclk input port to the index 8 clock source of the CRU if the reconfig is used."
	)
	(parameter
		"RX_CRU_INCLOCK9_PERIOD"
		"5000"
		"Determine the inclock period for rx_cruclk input port to the index 9 clock source of the CRU if the reconfig is used."
	)
	(parameter
		"TX_PLL_INCLK0_PERIOD"
		"5000"
		"Input clock period for the Quad PLL. Default unit is in ps."
	)
	(parameter
		"TX_PLL_INCLK1_PERIOD"
		"5000"
		"Input clock period for the index 1 clock source of the Quad PLL. Default unit is in ps."
	)
	(parameter
		"TX_PLL_INCLK2_PERIOD"
		"5000"
		"Input clock period for the index 2 clock source of the Quad PLL. Default unit is in ps."
	)
	(parameter
		"TX_PLL_INCLK3_PERIOD"
		"5000"
		"Input clock period for the index 3 clock source of the Quad PLL. Default unit is in ps."
	)
	(parameter
		"TX_PLL_INCLK4_PERIOD"
		"5000"
		"Input clock period for the index 4 clock source of the Quad PLL. Default unit is in ps."
	)
	(parameter
		"TX_PLL_INCLK5_PERIOD"
		"5000"
		"Input clock period for the index 5 clock source of the Quad PLL. Default unit is in ps."
	)
	(parameter
		"TX_PLL_INCLK6_PERIOD"
		"5000"
		"Input clock period for the index 6 clock source of the Quad PLL. Default unit is in ps."
	)
	(parameter
		"TX_PLL_INCLK7_PERIOD"
		"5000"
		"Input clock period for the index 7 clock source of the Quad PLL. Default unit is in ps."
	)
	(parameter
		"TX_PLL_INCLK8_PERIOD"
		"5000"
		"Input clock period for the index 8 clock source of the Quad PLL. Default unit is in ps."
	)
	(parameter
		"TX_PLL_INCLK9_PERIOD"
		"5000"
		"Input clock period for the index 9 clock source of the Quad PLL. Default unit is in ps."
	)
	(parameter
		"RX_DATA_RATE"
		"1000"
		"Output datarate in Mbps for the receiver."
	)
	(parameter
		"RX_DATA_RATE_REMAINDER"
		"0"
		"Output datarate remainder in bps for receiver."
	)
	(parameter
		"RX_USE_RISING_EDGE_TRIGGERED_PATTERN_ALIGN"
		"\"false\""
		"Determine whether the word aligner will continuously realign when the rx_enapatternalign signal is high or will only align once per rising edge of this signal.Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"RX_DISABLE_RUNNING_DISP_IN_WORD_ALIGN"
		"\"false\""
		"Determine whether to disable the running disparity in word align. Possible values are \"TRUE\" or \"FALSE\"."
		"\"false\"" "\"true\"" 
	)
	(parameter
		"RX_ENABLE_TRUE_COMPLEMENT_MATCH_IN_WORD_ALIGN"
		"\"false\""
		"Determine whether to enable true complement match in word align. Possible values are \"TRUE\" or \"FALSE\"."
		"\"false\"" "\"true\"" 
	)
	(parameter
		"RX_BITSLIP_ENABLE"
		"\"false\""
		"Determine whether to enable the bitslip in word aligner. \"FALSE\" would make the word aligner to be controlled by rx_enapatternalign. Possible values are \"TRUE\" or \"FALSE\"."
		"\"false\"" "\"true\"" 
	)
	(parameter
		"RX_ALIGN_PATTERN"
		"\"0000000000\""
		"Determine the word aligner align pattern. Possible values are string of binary 0 and 1."
		"\"false\"" "\"true\"" 
	)
	(parameter
		"RX_ALIGN_PATTERN_LENGTH"
		"10"
		"Determine the align pattern length."
	)
	(parameter
		"RX_ALIGN_LOSS_SYNC_ERROR_NUM"
		"1"
		"Determines number of bad data words required for alignment state machine in the word aligner to enter the loss of synch state(where rx_syncstatus signal goes low)."
	)
	(parameter
		"RX_RUN_LENGTH"
		"200"
		"Determine the maximum number of allowable consecutive 1's or 0's before a run length violation is reported through the rx_rlv signal."
	)
	(parameter
		"RX_RUN_LENGTH_ENABLE"
		"\"true\""
		"Determine whether run length detection is enabled or not. Possible values are \"TRUE\" or \"FALSE\"."
		"\"false\"" "\"true\"" 
	)
	(parameter
		"RX_ALLOW_ALIGN_POLARITY_INVERSION"
		"\"false\""
		"Determine whether to enable or disable the generic polarity inversion in the word aligner. Possible values are \"TRUE\" or \"FALSE\"."
		"\"false\"" "\"true\"" 
	)
	(parameter
		"RX_ENABLE_BIT_REVERSAL"
		"\"false\""
		"Determine whether to enable or disable the bit reversal feature in word alignment. Possible values are \"TRUE\" or \"FALSE\"."
		"\"false\"" "\"true\"" 
	)
	(parameter
		"RX_ENABLE_DEEP_ALIGN_BYTE_SWAP"
		"\"false\""
		"Determine whether to enable or disable the feature of byte swap in deep word alignment based on the rx_revbyteorderwa signal. Possible values are \"TRUE\" or \"FALSE\"."
		"\"false\"" "\"true\"" 
	)
	(parameter
		"RX_8B_10B_MODE"
		"\"none\""
		"Determine the mode of 8b10b decoder. Possible values are \"NONE\", \"NORMAL\"  or \"CASCADED\"."
		"\"normal\"" "\"none\"" "\"cascaded\"" 
	)
	(parameter
		"RX_RATE_MATCH_FIFO_MODE"
		"\"none\""
		"Determine the mode of the rate match fifo. Possible values are \"NONE\", \"NORMAL\", \"CASCADED\", \"CASCADED_GENERIC\" or \"GENERIC\"."
		"\"none\"" "\"normal\"" "\"cascaded\"" "\"cascaded_generic\"" "\"generic\"" 
	)
	(parameter
		"RX_BYTE_ORDERING_MODE"
		"\"none\""
		"Determine the mode of the  byte ordering. Possible values are \"NONE\", \"PATTERN-BASED\" or \"SYNCSTATUS-BASED\"."
		"\"none\"" "\"pattern-based\"" "\"syncstatus-based\"" 
	)
	(parameter
		"RX_DISABLE_AUTO_IDLE_INSERTION"
		"\"false\""
		"Determine whether to disable idle insertion in the phase compensation FIFO. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"RX_ALLOW_PIPE_POLARITY_INVERSION"
		"\"false\""
		"Determine whether to enable polarity inversion at the input of the 8b10b decoder based on the pipe8b10binvpolarity signal. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"RX_ENABLE_SELF_TEST_MODE"
		"\"false\""
		"Determine whether to enable the self test mode circuit. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"RX_SELF_TEST_MODE"
		"\"false\""
		"Determine the self test mode. Possible values are \"PRBS7\", \"PRBS8\", \"PRBS10\", \"PRBS23\", \"LOW_FREQUENCY\", \"MIXED_FREQUENCY\", \"HIGH_FREQUENCY\", \"INCREMENTAL\", \"CJPAT\" or \"CRPAT>\" ."
		"\"prbs7\"" "\"prbs8\"" "\"prbs10\"" "\"prbs23\"" "\"low_frequency\"" "\"mixed_frequency\"" "\"high_frequency\"" "\"incremental\"" "\"cjpat\"" "\"crpat>\"" 
	)
	(parameter
		"RX_PPMSELECT"
		"0"
		"Determine the PPM setting. Possible values are between 0-63."
	)
	(parameter
		"RX_ENABLE_DC_COUPLING"
		"\"false\""
		"Determine whether to enable DC coupling to the receiver input pins. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"RX_SIGNAL_DETECT_THRESHOLD"
		"1"
		"Determine the signal detect and signal loss thresholds for the receiver input buffer. Possible values are between 0-7."
	)
	(parameter
		"EQUALIZER_CTRL_A_SETTING"
		"7"
		"Determine the PPM setting. Possible values are between 0-7."
	)
	(parameter
		"EQUALIZER_CTRL_B_SETTING"
		"7"
		"Determine the equalizer setting. Possible values are between 0-7."
	)
	(parameter
		"EQUALIZER_CTRL_C_SETTING"
		"7"
		"Determine the equalizer setting. Possible values are between 0-7."
	)
	(parameter
		"EQUALIZER_CTRL_D_SETTING"
		"7"
		"Determine the equalizerPM setting. Possible values are between 0-7."
	)
	(parameter
		"EQUALIZER_CTRL_V_SETTING"
		"7"
		"Determine the equalizer setting. Possible values are between 0-7."
	)
	(parameter
		"EQUALIZER_DCGAIN_SETTING"
		"0"
		"Determine the equalizer gain setting. Possible values are between 0-3."
	)
	(parameter
		"RX_ENABLE_LOCK_TO_REFCLK_SIG"
		"\"false\""
		"Determine whether to lock the CRU to the local refclk input according to rx_locktorefclk signal. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"RX_ENABLE_LOCK_TO_DATA_SIG"
		"\"false\""
		"Determine whether to lock the CRU to the data input according to the rx_locktodata signal. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"RX_USE_CRUCLK"
		"\"false\""
		"Determine whether to use rx_cruclk input to train the CRU or train the CRU from the clock divider slow output clock. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"RX_USE_CLKOUT"
		"\"false\""
		"Determine whether to use the rx_clkout output port or not. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"RX_USE_PIPE8B10BINVPOLARITY"
		"\"false\""
		"Determine whether to use pipe8b10binvpolarity input port or not. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"RX_CHANNEL_BONDING"
		"\"indv\""
		"Determine the bonding of the receiver. Possible values are \"INDV\", \"X4\", \"X8\", \"X4_UNBUNDLED\" or \"X8_UNBUNDLED\"."
		"\"indv\"" "\"x4\"" "\"x8\"" "\"x4_unbundled\"" "\"x8_unbundled\"" 
	)
	(parameter
		"TX_DIGITALRESET_PORT_WIDTH"
		"1"
		"Determine the width of transmitter reset signals. Possible values are number of channels or number of quads."
	)
	(parameter
		"RX_DIGITALRESET_PORT_WIDTH"
		"1"
		"Determine the width of receiver reset signals. Possible values are number of channels or number of quads."
	)
	(parameter
		"TX_DATA_RATE"
		"1000"
		"Output datarate in Mbps for the receiver."
	)
	(parameter
		"TX_DATA_RATE_REMAINDER"
		"0"
		"Output datarate remainder in bps for receiver."
	)
	(parameter
		"TX_USE_DOUBLE_DATA_MODE"
		"\"false\""
		"Determine whether to use double data width mode. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"TX_USE_SERIALIZER_DOUBLE_DATA_MODE"
		"\"false\""
		"Determine whether to use serializer in single width or double width. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"TX_8B_10B_MODE"
		"\"none\""
		"Determine the mode of 8b10b encoder. Possible values are \"NORMAL\" or \"NONE\"."
		"\"normal\"" "\"none\"" 
	)
	(parameter
		"TX_FORCE_DISPARITY_MODE"
		"\"false\""
		"Determine whether to enable the disparity for 8b10b encoder based on the tx_forcedisp signal. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"TX_FORCE_KCHAR"
		"\"false\""
		"Determine whether to force K character transmission from the transmitter. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"TX_FORCE_ECHAR"
		"\"false\""
		"Determine whether to force K character transmission from the transmitter. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"TX_ALLOW_POLARITY_INVERSION"
		"\"false\""
		"Determine whether to allow polarity inversion to be performed using the tx_invpolarity signal. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"TX_ENABLE_SYMBOL_SWAP"
		"\"false\""
		"Determines whether the high and low bytes bytes will get swap after the 8b10b encoder. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"TX_ENABLE_BIT_REVERSAL"
		"\"false\""
		"Determines whether the bit ordering output after the 8b10b encoder is reversed or not. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"TX_ENABLE_SELF_TEST_MODE"
		"\"false\""
		"Determine whether to enable the self test mode circuit. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"RX_FORCE_SIGNAL_DETECT"
		"\"false\""
		"Determine whether to force signal detection in the receiver's CRU. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"RX_FORCE_SIGNAL_DETECT_DIG"
		"\"false\""
		"Determine whether to allow the word aligner to force signal detection in the receiver's CRU. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"TX_SELF_TEST_MODE"
		"\"incremental\""
		"Determine the self test mode. Possible values are \"PRBS7\", \"PRBS8\", \"PRBS10\", \"PRBS23\", \"LOW_FREQUENCY\", \"MIXED_FREQUENCY\", \"HIGH_FREQUENCY\", \"INCREMENTAL\", \"CJPAT\" or \"CRPAT>\" ."
		"\"prbs7\"" "\"prbs8\"" "\"prbs10\"" "\"prbs23\"" "\"low_frequency\"" "\"mixed_frequency\"" "\"high_frequency\"" "\"incremental\"" "\"cjpat\"" "\"crpat>\"" 
	)
	(parameter
		"TX_ENABLE_IDLE_SELECTION"
		"\"false\""
		"Determine whether to enables the 8B10B encoder to code into I1I2 as required by the GIGE protocol. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"VOD_CTRL_SETTING"
		"0"
		"Determine the vod control setting."
	)
	(parameter
		"PREEMPHASIS_CTRL_1STPOSTTAP_SETTING"
		"0"
		"Determine the preemphasis control setting."
	)
	(parameter
		"PREEMPHASIS_CTRL_2NDPOSTTAP_SETTING"
		"0"
		"Determine the preemphasis control setting."
	)
	(parameter
		"PREEMPHASIS_CTRL_PRETAP_SETTING"
		"0"
		"Determine the preemphasis control setting. Possible values are \"TRUE\" or \"FALSE\"."
	)
	(parameter
		"TX_CHANNEL_BONDING"
		"\"indv\""
		"Determine the bonding of the transmitter. Possible values are \"INDV\", \"X4\", \"X4_UNBUNDLED\"  or \"X8_UNBUNDLED\"."
		"\"indv\"" "\"x4\"" "\"x8\"" "\"x4_unbundled\"" "\"x8_unbundled\"" 
	)
	(parameter
		"USE_CALIBRATION_BLOCK"
		"\"true\""
		"Deterrmines whether the calibration block is instantiated in the Megafunction or not. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"TX_DWIDTH_FACTOR"
		"1"
		"Value of the double data width factor for transmitter. Possible values are 1, 2 or 4."
		"1" "2" "4" 
	)
	(parameter
		"GXB_POWERDOWN_WIDTH"
		"1"
		"Value of the width for the gxb_powerdown and  gxb_enable signal in a protocol design. Possible value are 1 or number_of_quads."
	)
	(parameter
		"RX_DWIDTH_FACTOR"
		"1"
		"Value of the double data width factor for receiver. Possible values are 1, 2 or 4."
		"1" "2" "4" 
	)
	(parameter
		"RX_WORD_ALIGNER_NUM_BYTE"
		"1"
		"Value of the number of bytes for the word aligner. Possible values are 1 or 2."
		"1" "2" 
	)
	(parameter
		"RX_DPRIO_MODE"
		"\"none\""
		"Determine the dprio mode for alt4gxb. Possible values are \"NONE\", \"PMA_ELECTRICALS\" or \"FULL\"."
		"\"none\"" "\"pma_electricals\"" "\"full\"" 
	)
	(parameter
		"TX_DPRIO_MODE"
		"\"none\""
		"Determine the dprio mode for alt4gxb. Possible values are \"NONE\", \"PMA_ELECTRICALS\" or \"FULL\"."
		"\"none\"" "\"pma_electricals\"" "\"full\"" 
	)
	(parameter
		"TRANSMITTER_TERMINATION"
		"\"OCT_100_OHMS\""
		"Determine the termination value for transmitter data output pin. Possible values are \"OCT_85_OHMS\", \"OCT_100_OHMS\", \"OCT_120_OHMS\", \"OCT_150_OHMS\" or \"off\"."
		"\"OCT_85_OHMS\"" "\"OCT_100_OHMS\"" "\"OCT_120_OHMS\"" "\"OCT_150_OHMS\"" "\"off\"" 
	)
	(parameter
		"RECEIVER_TERMINATION"
		"\"OCT_100_OHMS\""
		"Determine the termination value for receiver data input pin. Possible values are \"OCT_85_OHMS\", \"OCT_100_OHMS\", \"OCT_120_OHMS\", \"OCT_150_OHMS\" or \"off\"."
		"\"OCT_85_OHMS\"" "\"OCT_100_OHMS\"" "\"OCT_120_OHMS\"" "\"OCT_150_OHMS\"" "\"off\"" 
	)
	(parameter
		"PREEMPHASIS_CTRL_2NDPOSTTAP_INV_SETTING"
		"\"false\""
		"Deterrmines the preemphasis control setting. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"PREEMPHASIS_CTRL_PRETAP_INV_SETTING"
		"\"false\""
		"Deterrmines the preemphasis control setting. Possible values are \"TRUE\" or \"FALSE\"."
		"\"true\"" "\"false\"" 
	)
	(parameter
		"TX_COMMON_MODE"
		"\"0.6V\""
		"Set the transmitter common mode voltage. Possible values are \"tristate\", \"0.6V\", \"0.65V\" or \"0.7V\"."
		"\"tristate\"" "\"0.6V\"" "\"0.65V\"" "\"0.7V\"" 
	)
	(parameter
		"RX_COMMON_MODE"
		"\"0.82V\""
		"Set the receiver common mode voltage. Possible values are \"tristate\", \"0.82V\" or \"1.1V\"."
		"\"tristate\"" "\"0.82V\"" "\"1.1V\"" 
	)
	(drawing
		(line (pt 16 784)(pt 328 784)(line_width 1))
		(line (pt 16 32)(pt 328 32)(line_width 1))
		(line (pt 16 32)(pt 16 784)(line_width 1))
		(line (pt 328 32)(pt 328 784)(line_width 1))
	)
	(annotation_block (parameter)(rect 408 -1384 808 64))
)
