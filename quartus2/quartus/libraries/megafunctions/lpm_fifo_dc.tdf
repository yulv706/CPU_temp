-- **************************************************************************
--	LPM_FIFO_DC
--
--  Copyright 1991-2009 Corporation  
--  Your use of Altera Corporation's design tools, logic functions  
--  and other software and tools, and its AMPP partner logic  
--  functions, and any output files from any of the foregoing  
--  (including device programming or simulation files), and any  
--  associated documentation or information are expressly subject  
--  to the terms and conditions of the Altera Program License  
--  Subscription Agreement, Altera MegaCore Function License  
--  Agreement, or other applicable license agreement, including,  
--  without limitation, that your use is for the sole purpose of  
--  programming logic devices manufactured by Altera and sold by  
--  Altera or its authorized distributors.  Please refer to the  
--  applicable agreement for further details. 
--  
--  9.0 Build 184  03/01/2009   
--
--	Version 1.0
--
------------------------------

--include "dcfifo";

FUNCTION dcfifo( data[lpm_width-1..0], rdclk, rdreq, wrclk, wrreq, aclr )
    WITH( LPM_WIDTH, LPM_WIDTHU, LPM_NUMWORDS,
          LPM_SHOWAHEAD, UNDERFLOW_CHECKING, OVERFLOW_CHECKING, USE_EAB,
          DELAY_RDUSEDW, DELAY_WRUSEDW, RDSYNC_DELAYPIPE, WRSYNC_DELAYPIPE, CLOCKS_ARE_SYNCHRONIZED, ADD_USEDW_MSB_BIT = "OFF" )
    RETURNS (
                q[lpm_width-1..0],
                rdempty,
                rdfull,
                wrempty,
                wrfull,
                rdusedw[(lpm_widthu-1)..0],
                wrusedw[(lpm_widthu-1)..0]
        );

parameters
(
	LPM_WIDTH,
	LPM_NUMWORDS,
	LPM_WIDTHU = ceil(log2(LPM_NUMWORDS)),
	LPM_SHOWAHEAD = "OFF",

	UNDERFLOW_CHECKING = "ON",
	OVERFLOW_CHECKING = "ON",
	ALLOW_RWCYCLE_WHEN_FULL = "OFF",
	USE_EAB = "ON",

	DELAY_RDUSEDW = 1,
	DELAY_WRUSEDW = 1,

	RDSYNC_DELAYPIPE = 3,
	WRSYNC_DELAYPIPE = 3
);

subdesign lpm_fifo_dc
(
	data[LPM_WIDTH-1..0]	: input;
	q[LPM_WIDTH-1..0]		: output;
	rdclock, rdreq,
	wrclock, wrreq			: input;
	aclr					: input = gnd;

	rdempty, rdfull, 
	wrempty, wrfull				: output;
	rdusedw[LPM_WIDTHU-1..0], 
	wrusedw[LPM_WIDTHU-1..0]	: output;
)

-------------------------------------------------------------------------------
variable
	myFIFO: dcfifo with( LPM_WIDTH=LPM_WIDTH, LPM_NUMWORDS=LPM_NUMWORDS, 
		LPM_SHOWAHEAD=LPM_SHOWAHEAD, UNDERFLOW_CHECKING=UNDERFLOW_CHECKING, OVERFLOW_CHECKING=OVERFLOW_CHECKING, 
		ALLOW_RWCYCLE_WHEN_FULL=ALLOW_RWCYCLE_WHEN_FULL, USE_EAB=USE_EAB, 
		DELAY_RDUSEDW=DELAY_RDUSEDW, DELAY_WRUSEDW=DELAY_WRUSEDW, 
		RDSYNC_DELAYPIPE=RDSYNC_DELAYPIPE, WRSYNC_DELAYPIPE=WRSYNC_DELAYPIPE
	);

begin
	myFIFO.(data[], rdclk, rdreq, wrclk, wrreq) = (data[], rdclock, rdreq, wrclock, wrreq);
	if used(aclr) generate
		myFIFO.aclr = aclr;
	end generate;
	(q[], rdempty, rdfull, wrempty, wrfull, rdusedw[], wrusedw[]) = myFIFO.(q[], rdempty, rdfull, wrempty, wrfull, rdusedw[], wrusedw[]);
	IF !USED(wrusedw) GENERATE
		wrusedw[] = GND;
	END GENERATE;
	IF !USED(wrempty) GENERATE
		wrempty = GND;
	END GENERATE;
	IF !USED(wrfull) GENERATE
		wrfull = GND;
	END GENERATE;
	IF !USED(q) GENERATE
		q[] = GND;
	END GENERATE;
end;

