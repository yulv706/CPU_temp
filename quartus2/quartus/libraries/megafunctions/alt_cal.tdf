------------------------------------------------------------------
-- alt_cal parameterized megafunction
-- Generated with 'clearbox' loader - do not edit
------------------------------------------------------------------


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.

--  Version 9.0 Build 184 04/29/2009

OPTIONS NAME_SUBSTITUTION = ON;

OPTIONS TREAT_DEFAULT_VALUE_AS_UNUSED = ON;

PARAMETERS
(
	CAL_BBPD_FIRST = "FALSE",
	CHANNEL_ADDRESS_WIDTH = 1,
	ERROR_SIGNALS = "FALSE",
	NUMBER_OF_CHANNELS,
	SIM_MODEL_MODE = "TRUE",
	WATCH_LENGTH = 48,
	CBXI_PARAMETER = "NOTHING"
);
FUNCTION @CBXI_PARAMETER (clock, dprio_busy, dprio_datain[15..0], remap_addr[9..0], reset, start, testbuses[NUMBER_OF_CHANNELS*4-1..0])
RETURNS (busy, cal_error[NUMBER_OF_CHANNELS-1..0], dprio_addr[15..0], dprio_dataout[15..0], dprio_rden, dprio_wren, quad_addr[6..0], retain_addr[0..0]);


SUBDESIGN alt_cal
(
	busy		:	OUTPUT;
	cal_error[NUMBER_OF_CHANNELS-1..0]		:	OUTPUT;
	clock		:	INPUT;
	dprio_addr[15..0]		:	OUTPUT;
	dprio_busy		:	INPUT;
	dprio_datain[15..0]		:	INPUT;
	dprio_dataout[15..0]		:	OUTPUT;
	dprio_rden		:	OUTPUT;
	dprio_wren		:	OUTPUT;
	quad_addr[6..0]		:	OUTPUT;
	remap_addr[9..0]		:	INPUT = GND;
	reset		:	INPUT = GND;
	retain_addr[0..0]		:	OUTPUT;
	start		:	INPUT = GND;
	testbuses[NUMBER_OF_CHANNELS*4-1..0]		:	INPUT = GND;
)
VARIABLE
	IF CBXI_PARAMETER != "NOTHING" GENERATE
		auto_generated : @CBXI_PARAMETER WITH ( CBXI_PARAMETER = "NOTHING" );
	END GENERATE;
BEGIN
	ASSERT (CBXI_PARAMETER != "NOTHING")
	REPORT "Valid clear box generator not found or Errors encountered during clear box generation"
	SEVERITY ERROR;
	IF (CBXI_PARAMETER != "NOTHING") GENERATE
		IF USED(busy) GENERATE
			busy = auto_generated.busy;
		ELSE GENERATE
			busy = GND;
		END GENERATE;
		IF USED(cal_error) GENERATE
			cal_error[] = auto_generated.cal_error[];
		ELSE GENERATE
			cal_error[] = GND;
		END GENERATE;
		IF USED(clock) GENERATE
			auto_generated.clock = clock;
		END GENERATE;
		IF USED(dprio_addr) GENERATE
			dprio_addr[] = auto_generated.dprio_addr[];
		ELSE GENERATE
			dprio_addr[] = GND;
		END GENERATE;
		IF USED(dprio_busy) GENERATE
			auto_generated.dprio_busy = dprio_busy;
		END GENERATE;
		IF USED(dprio_datain) GENERATE
			auto_generated.dprio_datain[] = dprio_datain[];
		END GENERATE;
		IF USED(dprio_dataout) GENERATE
			dprio_dataout[] = auto_generated.dprio_dataout[];
		ELSE GENERATE
			dprio_dataout[] = GND;
		END GENERATE;
		IF USED(dprio_rden) GENERATE
			dprio_rden = auto_generated.dprio_rden;
		ELSE GENERATE
			dprio_rden = GND;
		END GENERATE;
		IF USED(dprio_wren) GENERATE
			dprio_wren = auto_generated.dprio_wren;
		ELSE GENERATE
			dprio_wren = GND;
		END GENERATE;
		IF USED(quad_addr) GENERATE
			quad_addr[] = auto_generated.quad_addr[];
		ELSE GENERATE
			quad_addr[] = GND;
		END GENERATE;
		IF USED(remap_addr) GENERATE
			auto_generated.remap_addr[] = remap_addr[];
		END GENERATE;
		IF USED(reset) GENERATE
			auto_generated.reset = reset;
		END GENERATE;
		IF USED(retain_addr) GENERATE
			retain_addr[] = auto_generated.retain_addr[];
		ELSE GENERATE
			retain_addr[] = GND;
		END GENERATE;
		IF USED(start) GENERATE
			auto_generated.start = start;
		END GENERATE;
		IF USED(testbuses) GENERATE
			auto_generated.testbuses[] = testbuses[];
		END GENERATE;
	END GENERATE;
END;
