------------------------------------------------------------------
-- altpll parameterized megafunction component declaration
-- Generated with 'mega_defn_creator' loader - do not edit
------------------------------------------------------------------

FUNCTION altpll(
	areset,
	clkena[5..0],
	clkswitch,
	configupdate,
	extclkena[3..0],
	fbin,
	inclk[1..0],
	pfdena,
	phasecounterselect[width_phasecounterselect-1..0],
	phasestep,
	phaseupdown,
	pllena,
	scanaclr,
	scanclk,
	scanclkena,
	scandata,
	scanread,
	scanwrite
)
WITH(
	bandwidth,
	bandwidth_type,
	c0_high,
	c0_initial,
	c0_low,
	c0_mode,
	c0_ph,
	c0_test_source,
	c1_high,
	c1_initial,
	c1_low,
	c1_mode,
	c1_ph,
	c1_test_source,
	c1_use_casc_in,
	c2_high,
	c2_initial,
	c2_low,
	c2_mode,
	c2_ph,
	c2_test_source,
	c2_use_casc_in,
	c3_high,
	c3_initial,
	c3_low,
	c3_mode,
	c3_ph,
	c3_test_source,
	c3_use_casc_in,
	c4_high,
	c4_initial,
	c4_low,
	c4_mode,
	c4_ph,
	c4_test_source,
	c4_use_casc_in,
	c5_high,
	c5_initial,
	c5_low,
	c5_mode,
	c5_ph,
	c5_test_source,
	c5_use_casc_in,
	c6_high,
	c6_initial,
	c6_low,
	c6_mode,
	c6_ph,
	c6_test_source,
	c6_use_casc_in,
	c7_high,
	c7_initial,
	c7_low,
	c7_mode,
	c7_ph,
	c7_test_source,
	c7_use_casc_in,
	c8_high,
	c8_initial,
	c8_low,
	c8_mode,
	c8_ph,
	c8_test_source,
	c8_use_casc_in,
	c9_high,
	c9_initial,
	c9_low,
	c9_mode,
	c9_ph,
	c9_test_source,
	c9_use_casc_in,
	charge_pump_current,
	charge_pump_current_bits,
	clk0_counter,
	clk0_divide_by,
	clk0_duty_cycle,
	clk0_multiply_by,
	clk0_output_frequency,
	clk0_phase_shift,
	clk0_time_delay,
	clk0_use_even_counter_mode,
	clk0_use_even_counter_value,
	clk1_counter,
	clk1_divide_by,
	clk1_duty_cycle,
	clk1_multiply_by,
	clk1_output_frequency,
	clk1_phase_shift,
	clk1_time_delay,
	clk1_use_even_counter_mode,
	clk1_use_even_counter_value,
	clk2_counter,
	clk2_divide_by,
	clk2_duty_cycle,
	clk2_multiply_by,
	clk2_output_frequency,
	clk2_phase_shift,
	clk2_time_delay,
	clk2_use_even_counter_mode,
	clk2_use_even_counter_value,
	clk3_counter,
	clk3_divide_by,
	clk3_duty_cycle,
	clk3_multiply_by,
	clk3_phase_shift,
	clk3_time_delay,
	clk3_use_even_counter_mode,
	clk3_use_even_counter_value,
	clk4_counter,
	clk4_divide_by,
	clk4_duty_cycle,
	clk4_multiply_by,
	clk4_phase_shift,
	clk4_time_delay,
	clk4_use_even_counter_mode,
	clk4_use_even_counter_value,
	clk5_counter,
	clk5_divide_by,
	clk5_duty_cycle,
	clk5_multiply_by,
	clk5_phase_shift,
	clk5_time_delay,
	clk5_use_even_counter_mode,
	clk5_use_even_counter_value,
	clk6_counter,
	clk6_divide_by,
	clk6_duty_cycle,
	clk6_multiply_by,
	clk6_phase_shift,
	clk6_use_even_counter_mode,
	clk6_use_even_counter_value,
	clk7_counter,
	clk7_divide_by,
	clk7_duty_cycle,
	clk7_multiply_by,
	clk7_phase_shift,
	clk7_use_even_counter_mode,
	clk7_use_even_counter_value,
	clk8_counter,
	clk8_divide_by,
	clk8_duty_cycle,
	clk8_multiply_by,
	clk8_phase_shift,
	clk8_use_even_counter_mode,
	clk8_use_even_counter_value,
	clk9_counter,
	clk9_divide_by,
	clk9_duty_cycle,
	clk9_multiply_by,
	clk9_phase_shift,
	clk9_use_even_counter_mode,
	clk9_use_even_counter_value,
	compensate_clock,
	down_spread,
	dpa_divide_by,
	dpa_divider,
	dpa_multiply_by,
	e0_high,
	e0_initial,
	e0_low,
	e0_mode,
	e0_ph,
	e0_time_delay,
	e1_high,
	e1_initial,
	e1_low,
	e1_mode,
	e1_ph,
	e1_time_delay,
	e2_high,
	e2_initial,
	e2_low,
	e2_mode,
	e2_ph,
	e2_time_delay,
	e3_high,
	e3_initial,
	e3_low,
	e3_mode,
	e3_ph,
	e3_time_delay,
	enable0_counter,
	enable1_counter,
	enable_switch_over_counter,
	extclk0_counter,
	extclk0_divide_by,
	extclk0_duty_cycle,
	extclk0_multiply_by,
	extclk0_phase_shift,
	extclk0_time_delay,
	extclk1_counter,
	extclk1_divide_by,
	extclk1_duty_cycle,
	extclk1_multiply_by,
	extclk1_phase_shift,
	extclk1_time_delay,
	extclk2_counter,
	extclk2_divide_by,
	extclk2_duty_cycle,
	extclk2_multiply_by,
	extclk2_phase_shift,
	extclk2_time_delay,
	extclk3_counter,
	extclk3_divide_by,
	extclk3_duty_cycle,
	extclk3_multiply_by,
	extclk3_phase_shift,
	extclk3_time_delay,
	feedback_source,
	g0_high,
	g0_initial,
	g0_low,
	g0_mode,
	g0_ph,
	g0_time_delay,
	g1_high,
	g1_initial,
	g1_low,
	g1_mode,
	g1_ph,
	g1_time_delay,
	g2_high,
	g2_initial,
	g2_low,
	g2_mode,
	g2_ph,
	g2_time_delay,
	g3_high,
	g3_initial,
	g3_low,
	g3_mode,
	g3_ph,
	g3_time_delay,
	gate_lock_counter,
	gate_lock_signal,
	inclk0_input_frequency,
	inclk1_input_frequency,
	intended_device_family,
	invalid_lock_multiplier,
	l0_high,
	l0_initial,
	l0_low,
	l0_mode,
	l0_ph,
	l0_time_delay,
	l1_high,
	l1_initial,
	l1_low,
	l1_mode,
	l1_ph,
	l1_time_delay,
	lock_high,
	lock_low,
	lock_window_ui,
	lock_window_ui_bits,
	loop_filter_c,
	loop_filter_c_bits,
	loop_filter_r,
	loop_filter_r_bits,
	lpm_hint,
	lpm_type,
	m,
	m2,
	m_initial,
	m_ph,
	m_test_source,
	m_time_delay,
	n,
	n2,
	n_time_delay,
	operation_mode,
	pfd_max,
	pfd_min,
	pll_type,
	port_activeclock,
	port_areset,
	port_clk0,
	port_clk1,
	port_clk2,
	port_clk3,
	port_clk4,
	port_clk5,
	port_clk6,
	port_clk7,
	port_clk8,
	port_clk9,
	port_clkbad0,
	port_clkbad1,
	port_clkena0,
	port_clkena1,
	port_clkena2,
	port_clkena3,
	port_clkena4,
	port_clkena5,
	port_clkloss,
	port_clkswitch,
	port_configupdate,
	port_enable0,
	port_enable1,
	port_extclk0,
	port_extclk1,
	port_extclk2,
	port_extclk3,
	port_extclkena0,
	port_extclkena1,
	port_extclkena2,
	port_extclkena3,
	port_fbin,
	port_fbout,
	port_inclk0,
	port_inclk1,
	port_locked,
	port_pfdena,
	port_phasecounterselect,
	port_phasedone,
	port_phasestep,
	port_phaseupdown,
	port_pllena,
	port_scanaclr,
	port_scanclk,
	port_scanclkena,
	port_scandata,
	port_scandataout,
	port_scandone,
	port_scanread,
	port_scanwrite,
	port_sclkout0,
	port_sclkout1,
	port_vcooverrange,
	port_vcounderrange,
	primary_clock,
	qualify_conf_done,
	scan_chain,
	scan_chain_mif_file,
	sclkout0_phase_shift,
	sclkout1_phase_shift,
	self_reset_on_gated_loss_lock,
	self_reset_on_loss_lock,
	sim_gate_lock_device_behavior,
	skip_vco,
	spread_frequency,
	ss,
	switch_over_counter,
	switch_over_on_gated_lock,
	switch_over_on_lossclk,
	switch_over_type,
	using_fbmimicbidir_port,
	valid_lock_multiplier,
	vco_center,
	vco_divide_by,
	vco_frequency_control,
	vco_max,
	vco_min,
	vco_multiply_by,
	vco_phase_shift_step,
	vco_post_scale,
	vco_range_detector_high_bits,
	vco_range_detector_low_bits,
	width_clock = 6,
	width_phasecounterselect = 4
)
RETURNS(
	activeclock,
	clk[width_clock-1..0],
	clkbad[1..0],
	clkloss,
	enable0,
	enable1,
	extclk[3..0],
	fbmimicbidir,
	fbout,
	locked,
	phasedone,
	scandataout,
	scandone,
	sclkout0,
	sclkout1,
	vcooverrange,
	vcounderrange
);