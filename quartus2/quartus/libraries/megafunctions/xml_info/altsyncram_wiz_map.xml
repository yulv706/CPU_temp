<?xml version="1.0"?>
<ROOT>
	<INCLUDE FILE="altsyncram_rules.xml" />
	<MACROS>
		<MACRO NAME="m_outclken_a_used" >
			<DEFINITION>
				(OUTDATA_REG_A == "CLOCK1") ? 
				((CLOCK_ENABLE_OUTPUT_A == "NORMAL") ? is_used(clocken1) : ((CLOCK_ENABLE_OUTPUT_A == "ALTERNATE") ? is_used(clocken3) : "false")) :
				((OUTDATA_REG_A == "CLOCK0") ?
				((CLOCK_ENABLE_OUTPUT_A == "NORMAL") ? is_used(clocken0) : ((CLOCK_ENABLE_OUTPUT_A == "ALTERNATE") ? is_used(clocken2) : "false")) : "false")				
			</DEFINITION>
		</MACRO>
		<MACRO NAME="m_outclken_b_used" >
			<DEFINITION>
				(OUTDATA_REG_B == "CLOCK1") ? 
				((CLOCK_ENABLE_OUTPUT_B == "NORMAL") ? is_used(clocken1) : ((CLOCK_ENABLE_OUTPUT_B == "ALTERNATE") ? is_used(clocken3) : "false")) :
				((OUTDATA_REG_B == "CLOCK0") ?
				((CLOCK_ENABLE_OUTPUT_B == "NORMAL") ? is_used(clocken0) : ((CLOCK_ENABLE_OUTPUT_B == "ALTERNATE") ? is_used(clocken2) : "false")) : "false")				
			</DEFINITION>
		</MACRO>
		<MACRO NAME="m_inclken_b_used" >
			<DEFINITION>
				(ADDRESS_REG_B == "CLOCK1") ? 
				((CLOCK_ENABLE_INPUT_B == "NORMAL") ? is_used(clocken1) : ((CLOCK_ENABLE_INPUT_B == "ALTERNATE") ? is_used(clocken3) : "false")) :
				((ADDRESS_REG_B == "CLOCK0") ?
				((CLOCK_ENABLE_INPUT_B == "NORMAL") ? is_used(clocken0) : ((CLOCK_ENABLE_INPUT_B == "ALTERNATE") ? is_used(clocken2) : "false")) : "false")				
			</DEFINITION>
		</MACRO>
		<MACRO NAME="m_latch_clr_allowed" DEFINITION="!m_lutram and mfam_family_has_stratixiii_style_ram(INTENDED_DEVICE_FAMILY)" />
	</MACROS>
	<WIZARD_DATA>
		
		<PARAMETER NAME="ADDRESSSTALL_A" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
			<FORCE_VALUE TO="mfam_family_has_stratixii_style_ram(INTENDED_DEVICE_FAMILY) ? (is_used(addressstall_a) ? 1 : 0) : 0"/>
		</PARAMETER>
		<PARAMETER NAME="BYTE_SIZE" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="BYTE_SIZE" />
		<PARAMETER NAME="BlankMemory" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
			<FORCE_VALUE TO="(INIT_FILE == UNUSED) ? 1 : 0"/>
		</PARAMETER>
		<PARAMETER NAME="CLOCK_ENABLE_INPUT_A" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
			<FORCE_VALUE TO="(CLOCK_ENABLE_INPUT_A == BYPASS || !is_used(clocken0)) ? 0 : 1"/>
		</PARAMETER>
		<PARAMETER NAME="CLOCK_ENABLE_OUTPUT_A" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
			<FORCE_VALUE TO="(CLOCK_ENABLE_OUTPUT_A == BYPASS || !m_outclken_a_used || m_dual_port) ? 0 : 1"/>
		</PARAMETER>
		<PARAMETER NAME="IMPLEMENT_IN_LES" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
			<FORCE_VALUE TO="(IMPLEMENT_IN_LES == ON) ? 1 : 0" />
		</PARAMETER>
		<PARAMETER NAME="INIT_TO_SIM_X" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
			<FORCE_VALUE TO="1" WHEN="(POWER_UP_UNINITIALIZED == TRUE)" ELSE="0" />
		</PARAMETER>
		<PARAMETER NAME="INIT_FILE_LAYOUT" CNX_TYPE="PRIVATE" TYPE="STRING" VALUE="INIT_FILE_LAYOUT" />		
		<PARAMETER NAME="INTENDED_DEVICE_FAMILY" CNX_TYPE="PRIVATE" TYPE="STRING" VALUE="INTENDED_DEVICE_FAMILY" />
		<PARAMETER NAME="MAXIMUM_DEPTH" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="MAXIMUM_DEPTH" />
		<PARAMETER NAME="MIFfilename" CNX_TYPE="PRIVATE" TYPE="STRING" VALUE="INIT_FILE" />
		<PARAMETER NAME="RAM_BLOCK_TYPE" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
			<FORCE_VALUE TO="(m_mram || m_m144k) ? 3 : ((m_m4k || m_m8k) ? 2 : ((m_m512 || m_lutram) ? 1 : 0))"/>
		</PARAMETER>
					
		<WIZARD_MAP NAME="RAM_2PORT" WIZARD_NAME="RAM: 2-PORT" MODULE_NAME="altsyncram" >
			<WIZARD_CONDITION>
				(m_dual_port) || (m_bidir_dual_port)
			</WIZARD_CONDITION>
			<PARAMETER NAME="VarWidth" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(WIDTH_A==WIDTH_B) ? 0 : 1"/>
			</PARAMETER>
			<PARAMETER NAME="WIDTH_WRITE_A" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="WIDTH_A" />
			<PARAMETER NAME="WIDTH_READ_A" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="WIDTH_A" />
			<PARAMETER NAME="WIDTH_WRITE_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="WIDTH_B" />
			<PARAMETER NAME="WIDTH_READ_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="WIDTH_B" />
			<PARAMETER NAME="MEMSIZE" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="WIDTH_A*NUMWORDS_A" />
			<PARAMETER NAME="MEM_IN_BITS" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="0" />
			<PARAMETER NAME="OPERATION_MODE" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="m_dual_port ? 2 : 3"/>
			</PARAMETER>
			<PARAMETER NAME="READ_DURING_WRITE_MODE_MIXED_PORTS" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(READ_DURING_WRITE_MODE_MIXED_PORTS == OLD_DATA) ? 1 : 2"/>
			</PARAMETER>
			<PARAMETER NAME="READ_DURING_WRITE_MODE_PORT_A" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(READ_DURING_WRITE_MODE_PORT_A == NEW_DATA_WITH_NBE_READ ? 4 : (READ_DURING_WRITE_MODE_PORT_A == OLD_DATA ? 1 : 3))"/>
			</PARAMETER>
			<PARAMETER NAME="READ_DURING_WRITE_MODE_PORT_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(READ_DURING_WRITE_MODE_PORT_B == NEW_DATA_WITH_NBE_READ ? 4 : (READ_DURING_WRITE_MODE_PORT_B == OLD_DATA ? 1 : 3))"/>
			</PARAMETER>
			<PARAMETER NAME="Clock" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" ( m_dual_port ? ( !is_used(clock1) ? 0 : ( ADDRESS_REG_B == str(CLOCK1) ? 1 : 2)) : ( !is_used(clock1) ? 0 : ( ADDRESS_REG_B == str(CLOCK1) ? 5 : 2)))"/>
			</PARAMETER>
			<PARAMETER NAME="rden" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="is_used(rden_b) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="BYTE_ENABLE_A" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="is_used(byteena_a) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="BYTE_ENABLE_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="is_used(byteena_b) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="enable" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(is_used(clocken0) ||is_used(clocken1)) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="BYTEENA_ACLR_A" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(is_used(byteena_a) and (BYTEENA_ACLR_A != NONE) and (BYTEENA_ACLR_A != UNUSED)) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="BYTEENA_ACLR_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(is_used(byteena_b) and (BYTEENA_ACLR_B != NONE) and (BYTEENA_ACLR_B != UNUSED)) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="REGdata" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="is_used(data_a) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="REGwraddress" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="1" />
			<PARAMETER NAME="REGwren" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="is_used(wren_a) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="REGrdaddress" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="1" />
			<PARAMETER NAME="CLRdata" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(is_used(data_a) and INDATA_ACLR_A != NONE and INDATA_ACLR_A != UNUSED) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="CLRwren" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" (is_used(wren_a) and WRCONTROL_ACLR_A != NONE and WRCONTROL_ACLR_A != UNUSED) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="CLRrdaddress" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" !m_dual_port ? ( ( ADDRESS_ACLR_A != NONE and ADDRESS_ACLR_A != UNUSED) ? 1 : 0) : ( ( ADDRESS_ACLR_B != NONE and ADDRESS_ACLR_B != UNUSED) ? 1 : 0)"/>
			</PARAMETER>
			<PARAMETER NAME="CLRwraddress" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" (is_used(address_a) and ADDRESS_ACLR_A != NONE and ADDRESS_ACLR_A != UNUSED) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="REGrren" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="is_used(rden_b) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="CLRrren" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" (is_used(rden_b) and RDCONTROL_ACLR_B != NONE and RDCONTROL_ACLR_B != UNUSED) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="REGq" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" ( OUTDATA_REG_A == str(CLOCK0) || OUTDATA_REG_A == str(CLOCK1)) and (m_bidir_dual_port) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="CLRq" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" ( ( OUTDATA_REG_A == str(CLOCK0) || OUTDATA_REG_A == str(CLOCK1)  || m_latch_clr_allowed) and ( OUTDATA_ACLR_A == CLEAR0 || OUTDATA_ACLR_A == CLEAR1)) and (m_bidir_dual_port) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="INDATA_REG_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" ( m_bidir_dual_port) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="WRADDR_REG_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" ( m_bidir_dual_port) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="OUTDATA_REG_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" ( (m_bidir_dual_port || m_dual_port) and (OUTDATA_REG_B == str(CLOCK0) || OUTDATA_REG_B == str(CLOCK1)) ) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="INDATA_ACLR_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" ( m_bidir_dual_port and ( INDATA_ACLR_B == CLEAR0 || INDATA_ACLR_B == CLEAR1)) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="WRADDR_ACLR_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" ( m_bidir_dual_port and ( ADDRESS_ACLR_B == CLEAR0 || ADDRESS_ACLR_B == CLEAR1)) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="OUTDATA_ACLR_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" ( ( m_bidir_dual_port || m_dual_port) and ( OUTDATA_ACLR_B == CLEAR0 || OUTDATA_ACLR_B == CLEAR1) and ( OUTDATA_REG_B == str(CLOCK0) || OUTDATA_REG_B == str(CLOCK1) || m_latch_clr_allowed)) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="WRCTRL_ACLR_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" ( m_bidir_dual_port and ( WRCONTROL_ACLR_B == CLEAR0 || WRCONTROL_ACLR_B == CLEAR1)) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="Clock_A" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" ( m_bidir_dual_port) ? ( ADDRESS_REG_B == str(CLOCK1) ? 0 : 0) : 0"/>
			</PARAMETER>
			<PARAMETER NAME="Clock_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" ( m_bidir_dual_port) ? ( ADDRESS_REG_B == str(CLOCK1) ? 0 : 0) : 0"/>
			</PARAMETER>
			<PARAMETER NAME="UseLCs" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="0" />
			<PARAMETER NAME="ADDRESSSTALL_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="mfam_family_has_stratixii_style_ram(INTENDED_DEVICE_FAMILY) ? (is_used(addressstall_b) ? 1 : 0) : 0"/>
			</PARAMETER>
			<PARAMETER NAME="CLOCK_ENABLE_INPUT_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(CLOCK_ENABLE_INPUT_B == BYPASS || !m_inclken_b_used) ? 0 : 1"/>
			</PARAMETER>
			<PARAMETER NAME="CLOCK_ENABLE_OUTPUT_B" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(CLOCK_ENABLE_OUTPUT_B == BYPASS || !m_outclken_b_used) ? 0 : 1"/>
			</PARAMETER>
		</WIZARD_MAP>

		<WIZARD_MAP NAME="RAM_1PORT" WIZARD_NAME="RAM: 1-PORT" MODULE_NAME="altsyncram" >
			<WIZARD_CONDITION CONDITION="m_single_port" />
			<PARAMETER NAME="AclrData" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(INDATA_ACLR_A != NONE and INDATA_ACLR_A != UNUSED) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="AclrAddr" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" (ADDRESS_ACLR_A != NONE and ADDRESS_ACLR_A != UNUSED) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="AclrOutput" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" ( ( OUTDATA_REG_A == str(CLOCK0) || OUTDATA_REG_A == str(CLOCK1) || m_latch_clr_allowed) and ( OUTDATA_ACLR_A == CLEAR0 || OUTDATA_ACLR_A == CLEAR1)) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="AclrByte" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(is_used(byteena_a) and (BYTEENA_ACLR_A == CLEAR0 || BYTEENA_ACLR_A == CLEAR1) ? 1 : 0)" />
			</PARAMETER>			
			<PARAMETER NAME="BYTE_ENABLE" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="is_used(byteena_a) ? 1 : 0" />
			</PARAMETER>	
			<PARAMETER NAME="Clken" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(is_used(clocken0) ||is_used(clocken1)) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="NUMWORDS_A" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="NUMWORDS_A" />
			<PARAMETER NAME="RegAddr" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="1" />
			<PARAMETER NAME="RegData" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="1" />
			<PARAMETER NAME="READ_DURING_WRITE_MODE_PORT_A" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(READ_DURING_WRITE_MODE_PORT_A == DONT_CARE ? 2 : (READ_DURING_WRITE_MODE_PORT_A == NEW_DATA_WITH_NBE_READ ? 4 : (READ_DURING_WRITE_MODE_PORT_A == OLD_DATA ? 1 : 3)))"/>
			</PARAMETER>
			<PARAMETER NAME="RegOutput" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" (OUTDATA_REG_A == str(CLOCK0) || OUTDATA_REG_A == str(CLOCK1)) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="SingleClock" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="is_used(clock1) ? 0 : 1" />
			</PARAMETER>
			<PARAMETER NAME="UseDQRAM" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="1" />
			<PARAMETER NAME="WRCONTROL_ACLR_A" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(WRCONTROL_ACLR_A == CLEAR0 || WRCONTROL_ACLR_A == CLEAR1) ? 1 : 0" />
			</PARAMETER>
			<PARAMETER NAME="WidthAddr" TYPE="INTEGER" CNX_TYPE="PRIVATE" VALUE="WIDTHAD_A" />
			<PARAMETER NAME="WidthData" TYPE="INTEGER" CNX_TYPE="PRIVATE" VALUE="WIDTH_A" />
			<PARAMETER NAME="rden" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="is_used(rden_a) ? 1 : 0"/>
			</PARAMETER>
		</WIZARD_MAP>

		<WIZARD_MAP NAME="ROM_1PORT" WIZARD_NAME="ROM: 1-PORT" MODULE_NAME="altsyncram" >
			<WIZARD_CONDITION CONDITION="m_rom" />
			<PARAMETER NAME="AclrAddr" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" (ADDRESS_ACLR_A != NONE and ADDRESS_ACLR_A != UNUSED) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="AclrOutput" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" ( ( OUTDATA_REG_A == str(CLOCK0) || OUTDATA_REG_A == str(CLOCK1) || m_latch_clr_allowed) and ( OUTDATA_ACLR_A == CLEAR0 || OUTDATA_ACLR_A == CLEAR1)) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="Clken" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="(is_used(clocken0) ||is_used(clocken1)) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="NUMWORDS_A" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="NUMWORDS_A" />
			<PARAMETER NAME="RegAddr" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="1" />
			<PARAMETER NAME="RegOutput" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO=" (OUTDATA_REG_A == str(CLOCK0) || OUTDATA_REG_A == str(CLOCK1)) ? 1 : 0"/>
			</PARAMETER>
			<PARAMETER NAME="SingleClock" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="is_used(clock1) ? 0 : 1" />
			</PARAMETER>
			<PARAMETER NAME="UseDQRAM" CNX_TYPE="PRIVATE" TYPE="INTEGER" VALUE="0" />
			<PARAMETER NAME="WidthAddr" TYPE="INTEGER" CNX_TYPE="PRIVATE" VALUE="WIDTHAD_A" />
			<PARAMETER NAME="WidthData" TYPE="INTEGER" CNX_TYPE="PRIVATE" VALUE="WIDTH_A" />
			<PARAMETER NAME="rden" CNX_TYPE="PRIVATE" TYPE="INTEGER" >
				<FORCE_VALUE TO="is_used(rden_a) ? 1 : 0"/>
			</PARAMETER>

		</WIZARD_MAP>

	</WIZARD_DATA>
</ROOT>