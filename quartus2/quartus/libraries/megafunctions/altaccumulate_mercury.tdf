-- ALTACCUMULATE_MERCURY PARAMETRIZED MEGA FUNCTION
--  Copyright 1991-2009 Corporation  
--  Your use of Altera Corporation's design tools, logic functions  
--  and other software and tools, and its AMPP partner logic  
--  functions, and any output files from any of the foregoing  
--  (including device programming or simulation files), and any  
--  associated documentation or information are expressly subject  
--  to the terms and conditions of the Altera Program License  
--  Subscription Agreement, Altera MegaCore Function License  
--  Agreement, or other applicable license agreement, including,  
--  without limitation, that your use is for the sole purpose of  
--  programming logic devices manufactured by Altera and sold by  
--  Altera or its authorized distributors.  Please refer to the  
--  applicable agreement for further details. 
--  
--  9.0 Build 184  03/01/2009   
--

include "aglobal90.inc";
include "mercury_lcell";
include "apex20ke_lcell";

CONSTANT ADD_LUT_MASK 		= 	"96E8";
CONSTANT CARRY_SUM_OUT		=	"F000"; 
CONSTANT DATA_CARRY_OUT 	=	"00AA";

PARAMETERS
(
	USE_WYS = "ON",
	WIDTH_IN,
	WIDTH_OUT,
	CARRY_CHAIN = "MANUAL",
	CARRY_CHAIN_LENGTH = 32,
	LPM_REPRESENTATION = "UNSIGNED",
	EXTRA_LATENCY = 0,
	DEVICE_FAMILY
);
-- carry chain break point
DEFINE BREAKPOINT(i) = (i mod CARRY_CHAIN_LENGTH == 0);
-- number of breaks in the full carry chain (non pipelined case)
DEFINE EXTRA_CELL() = FLOOR (WIDTH_OUT / CARRY_CHAIN_LENGTH);
-- number of breaks inside a pipeline segment
DEFINE EXTRA_CELL_PIPELINE_1() = FLOOR (LENGTH_PER_SEGMENT() / CARRY_CHAIN_LENGTH);
DEFINE EXTRA_CELL_PIPELINE() = EXTRA_CELL_PIPELINE_1() * CARRY_CHAIN_LENGTH == LENGTH_PER_SEGMENT() ? EXTRA_CELL_PIPELINE_1()-1 : EXTRA_CELL_PIPELINE_1();
-- normalized position inside a pipeline segment
DEFINE NORMALIZE(i) = i - PIPELINE_SEGMENT(i) * LENGTH_PER_SEGMENT();
-- id of the break
DEFINE POSITION(i)	= i / CARRY_CHAIN_LENGTH - 1;
-- length per pipeline segment
DEFINE LENGTH_PER_SEGMENT() = CEIL(WIDTH_OUT / (EXTRA_LATENCY + 1));
-- the segment to which a cell belongs to
DEFINE PIPELINE_SEGMENT(i) = FLOOR (i / LENGTH_PER_SEGMENT());
-- first element of the pipeline segment
DEFINE FIRST_ELEMENT(i) = (i MOD LENGTH_PER_SEGMENT()) == 0;
-- last element of the segment
DEFINE LAST_ELEMENT(i) = ((i+1) MOD LENGTH_PER_SEGMENT()) == 0;

DEFINE EXTRA_CELL_LATENCY() = CEIL ( WIDTH_OUT / LENGTH_PER_SEGMENT()) - 2;

DEFINE EXTRA_OVERFLOW_BUFFER() = EXTRA_LATENCY-PIPELINE_SEGMENT(WIDTH_OUT-1)-1 > 1 ? EXTRA_LATENCY - PIPELINE_SEGMENT(WIDTH_OUT-1)-1 : 1;
DEFINE EXTRA_COUT_BUFFER() = EXTRA_OVERFLOW_BUFFER();


SUBDESIGN altaccumulate_mercury
(
	data[WIDTH_IN-1..0]			:	 INPUT;
	clock 						:	 INPUT;
	cin							:	 INPUT;
	clken 						:	 INPUT = VCC;
	sload 						:	 INPUT = GND;
	aclr 						: 	 INPUT = GND;
	add_sub 					: 	 INPUT = VCC;
	sign_data					:	 INPUT = GND;
	result[WIDTH_OUT-1..0]		: 	 OUTPUT;
	cout						:	 OUTPUT;
	overflow					:	 OUTPUT;
)

VARIABLE
	-- base add_sub cell 
	IF FAMILY_MERCURY() == 1 GENERATE
		acc_cell[WIDTH_OUT-1..0]		:	mercury_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																LUT_MASK = ADD_LUT_MASK);
	END GENERATE;
	IF FAMILY_APEX20KE() == 1 GENERATE
		acc_cell[WIDTH_OUT-1..0]		:	apex20ke_lcell WITH (OPERATION_MODE = "COUNTER",
																LUT_MASK = ADD_LUT_MASK);
	END GENERATE;																
	
	-- extra buffers and sload regr used to add break the chain
	IF EXTRA_LATENCY > 0 GENERATE
		extra_buffers[EXTRA_LATENCY..0][WIDTH_OUT-1..0]	: 	DFFE;
		IF WIDTH_OUT > EXTRA_LATENCY GENERATE
			sload_regr[EXTRA_LATENCY-1..0]						:	DFFE;
			IF EXTRA_LATENCY * LENGTH_PER_SEGMENT() >= WIDTH_OUT GENERATE
				IF FAMILY_MERCURY() == 1 GENERATE
					cout_out_cell[EXTRA_CELL_LATENCY()..0]					:	mercury_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																								LUT_MASK = CARRY_SUM_OUT);
					cout_in_cell[EXTRA_CELL_LATENCY()..0]					:	mercury_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																								LUT_MASK = DATA_CARRY_OUT);
				END GENERATE;
				IF FAMILY_APEX20KE() == 1 GENERATE
					cout_out_cell[EXTRA_CELL_LATENCY()..0]					:	apex20ke_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																								LUT_MASK = CARRY_SUM_OUT);
					cout_in_cell[EXTRA_CELL_LATENCY()..0]					:	apex20ke_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																								LUT_MASK = DATA_CARRY_OUT);
				END GENERATE;																							
			ELSE GENERATE
				IF FAMILY_MERCURY() == 1 GENERATE
					cout_out_cell[EXTRA_LATENCY-1..0]					:	mercury_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																								LUT_MASK = CARRY_SUM_OUT);
					cout_in_cell[EXTRA_LATENCY-1..0]					:	mercury_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																								LUT_MASK = DATA_CARRY_OUT);
				END GENERATE;
				IF FAMILY_APEX20KE() == 1 GENERATE
					cout_out_cell[EXTRA_LATENCY-1..0]					:	apex20ke_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																								LUT_MASK = CARRY_SUM_OUT);
					cout_in_cell[EXTRA_LATENCY-1..0]					:	apex20ke_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																								LUT_MASK = DATA_CARRY_OUT);
				END GENERATE;																							
			END GENERATE;
			IF USED(add_sub) GENERATE
				add_sub_regr[EXTRA_LATENCY-1..0]				:	DFFE;		
			END GENERATE;
		END GENERATE;
	END GENERATE;															
	
	-- cout buffers
	IF USED(cout) GENERATE
		IF EXTRA_LATENCY > 0 & WIDTH_OUT <= EXTRA_LATENCY GENERATE
			cout_regr[EXTRA_LATENCY-1..0]	:	DFFE;
		END GENERATE;
		IF EXTRA_LATENCY > 0 & WIDTH_OUT > EXTRA_LATENCY & ( EXTRA_LATENCY * LENGTH_PER_SEGMENT() >= WIDTH_OUT) GENERATE
			cout_buffer[EXTRA_COUT_BUFFER()..0]		:	DFFE;
		END GENERATE;
	END GENERATE;
	IF USED(cout) GENERATE
		tmp_cout	: SOFT;
	END GENERATE;
	
	-- overflow buffers
	IF USED(overflow) GENERATE
		IF LPM_REPRESENTATION == "SIGNED" # USED(sign_data) GENERATE
			data_a_regr						:	DFFE;
			res_regr						:	DFFE;
		END GENERATE;
		tmp_overflow					:	SOFT;
		IF !(LPM_REPRESENTATION == "SIGNED") GENERATE
			cout_node					:	SOFT;
		END GENERATE;
		IF EXTRA_LATENCY > 0 & WIDTH_OUT <= EXTRA_LATENCY GENERATE
			ovrflw_regr[EXTRA_LATENCY-1..0]				:	DFFE;	
		END GENERATE;
		IF EXTRA_LATENCY > 0 & WIDTH_OUT > EXTRA_LATENCY & ( EXTRA_LATENCY * LENGTH_PER_SEGMENT() >= WIDTH_OUT) GENERATE
			overflow_buffer[EXTRA_OVERFLOW_BUFFER()..0]		:	DFFE;
		END GENERATE;
		IF USED(sign_data) GENERATE
			tmp_sign_overflow 					:	SOFT;
			tmp_unsign_overflow					:	SOFT;
			sign_data_regr[EXTRA_LATENCY..0]	:	DFFE;
		END GENERATE;
		IF LPM_REPRESENTATION != "SIGNED" GENERATE
			unsign_ovrflw_regr				:	DFFE;
		END GENERATE;
	END GENERATE;		
	
	-- cells used to break the carry chain
	IF EXTRA_LATENCY > 0 & WIDTH_OUT > EXTRA_LATENCY GENERATE
		-- break pipelined carry chain
		IF (LENGTH_PER_SEGMENT() > CARRY_CHAIN_LENGTH) GENERATE
			IF FAMILY_MERCURY() == 1 GENERATE
				break_cin_cell[EXTRA_LATENCY..0][EXTRA_CELL_PIPELINE()-1..0] 	:	mercury_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																										LUT_MASK = CARRY_SUM_OUT);			
				break_cout_cell[EXTRA_LATENCY..0][EXTRA_CELL_PIPELINE()-1..0] 	:	mercury_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																										LUT_MASK = DATA_CARRY_OUT);			
			END GENERATE;
			IF FAMILY_APEX20KE() == 1 GENERATE
				break_cin_cell[EXTRA_LATENCY..0][EXTRA_CELL_PIPELINE()-1..0] 	:	apex20ke_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																										LUT_MASK = CARRY_SUM_OUT);			
				break_cout_cell[EXTRA_LATENCY..0][EXTRA_CELL_PIPELINE()-1..0] 	:	apex20ke_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																										LUT_MASK = DATA_CARRY_OUT);			
			END GENERATE;
														
		END GENERATE;
	ELSE GENERATE
		-- unpipelined carry chain
		IF (WIDTH_OUT > CARRY_CHAIN_LENGTH) GENERATE
			IF FAMILY_MERCURY() == 1 GENERATE
				cin_sum_cell[EXTRA_CELL()-1..0]		:	mercury_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																			LUT_MASK = CARRY_SUM_OUT);
				data_cout_cell[EXTRA_CELL()-1..0]	:	mercury_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																			LUT_MASK = DATA_CARRY_OUT);
			END GENERATE;
			IF FAMILY_APEX20KE() == 1 GENERATE
				cin_sum_cell[EXTRA_CELL()-1..0]		:	apex20ke_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																			LUT_MASK = CARRY_SUM_OUT);
				data_cout_cell[EXTRA_CELL()-1..0]	:	apex20ke_lcell WITH (OPERATION_MODE = "ARITHMETIC",
																			LUT_MASK = DATA_CARRY_OUT);
			END GENERATE;																					
		END GENERATE;
	END GENERATE;
	

BEGIN
	-- width of inputis less than width of output then sign extend or pad zeros
	IF WIDTH_IN < WIDTH_OUT GENERATE
		FOR i IN 0 TO WIDTH_IN-1 GENERATE
			-- for the first pipeline segment feed data directly, else feed into the buffer cells
			IF PIPELINE_SEGMENT(i) == 0 GENERATE
				IF USED(add_sub) GENERATE
					acc_cell[i].dataa = data[i] $ !add_sub;
				ELSE GENERATE
					acc_cell[i].dataa = data[i];
				END GENERATE;
				acc_cell[i].datac = data[i];
			ELSE GENERATE
				IF WIDTH_OUT > EXTRA_LATENCY GENERATE
					extra_buffers[0][i].d = data[i];					
				ELSE GENERATE
					IF USED(add_sub) GENERATE
						acc_cell[i].dataa= data[i] $ !add_sub;
					ELSE GENERATE
						acc_cell[i].dataa= data[i];					
					END GENERATE;
					acc_cell[i].datac = data[i];
				END GENERATE;			
			END GENERATE;
		END GENERATE;
		-- sign extend if signed repr or pad with zeros for extra bits
		FOR i IN WIDTH_IN TO WIDTH_OUT-1 GENERATE
			IF USED(sign_data) GENERATE
				IF PIPELINE_SEGMENT(i) == 0 GENERATE
					IF USED(add_sub) GENERATE
						acc_cell[i].dataa = (sign_data & data[WIDTH_IN-1]) $ !add_sub;
					ELSE GENERATE
						acc_cell[i].dataa = sign_data & data[WIDTH_IN-1];
					END GENERATE;
					acc_cell[i].datac = sign_data & data[WIDTH_IN-1];
				ELSE GENERATE
					IF WIDTH_OUT > EXTRA_LATENCY GENERATE
						extra_buffers[0][i].d = sign_data & data[WIDTH_IN-1];						
					ELSE GENERATE
						IF USED(add_sub) GENERATE
							acc_cell[i].dataa = (sign_data & data[WIDTH_IN-1]) $ !add_sub;
						ELSE GENERATE
							acc_cell[i].dataa = sign_data & data[WIDTH_IN-1];						
						END GENERATE;
						acc_cell[i].datac = sign_data & data[WIDTH_IN-1];
					END GENERATE;
				END GENERATE;
			ELSE GENERATE
				IF LPM_REPRESENTATION == "SIGNED" GENERATE
					IF PIPELINE_SEGMENT(i) == 0 GENERATE
						IF USED(add_sub) GENERATE
							acc_cell[i].dataa= data[WIDTH_IN-1] $ !add_sub;
						ELSE GENERATE
							acc_cell[i].dataa= data[WIDTH_IN-1];
						END GENERATE;
						acc_cell[i].datac = data[WIDTH_IN-1];
					ELSE GENERATE
						IF WIDTH_OUT > EXTRA_LATENCY GENERATE
							extra_buffers[0][i].d = data[WIDTH_IN-1];							
						ELSE GENERATE
							IF USED(add_sub) GENERATE
								acc_cell[i].dataa= data[WIDTH_IN-1] $ !add_sub;
							ELSE GENERATE
								acc_cell[i].dataa= data[WIDTH_IN-1];							
							END GENERATE;
							acc_cell[i].datac = data[WIDTH_IN-1];
						END GENERATE;
					END GENERATE;
				ELSE GENERATE
					IF PIPELINE_SEGMENT(i) == 0 GENERATE
						IF USED(add_sub) GENERATE
							acc_cell[i].dataa= GND $ !add_sub;						
						ELSE GENERATE
							acc_cell[i].dataa= GND;
						END GENERATE;
						acc_cell[i].datac = GND;
					ELSE GENERATE
						IF WIDTH_OUT > EXTRA_LATENCY GENERATE
							extra_buffers[0][i].d = GND;
						ELSE GENERATE
							IF USED(add_sub) GENERATE
								acc_cell[i].dataa= GND $ !add_sub;
							ELSE GENERATE
								acc_cell[i].dataa= GND;							
							END GENERATE;
							acc_cell[i].datac = GND;
						END GENERATE;
					END GENERATE;
				END GENERATE;
			END GENERATE;
		END GENERATE;
	ELSE GENERATE
		-- width_in == width_out
		FOR i IN 0 TO WIDTH_IN-1 GENERATE
			IF PIPELINE_SEGMENT(i) == 0 GENERATE
				IF USED(add_sub) GENERATE
					acc_cell[i].dataa= data[i] $ !add_sub;
				ELSE GENERATE
					acc_cell[i].dataa= data[i];				
				END GENERATE;				
				acc_cell[i].datac = data[i];
			ELSE GENERATE
				IF WIDTH_OUT > EXTRA_LATENCY GENERATE
					extra_buffers[0][i].d = data[i];						
				ELSE GENERATE
					IF USED(add_sub) GENERATE
						acc_cell[i].dataa= data[i] $ !add_sub;
					ELSE GENERATE
						acc_cell[i].dataa= data[i];					
					END GENERATE;
					acc_cell[i].datac = data[i];
				END GENERATE;
			END GENERATE;
		END GENERATE;	
	END GENERATE;

	-- feed the feedback data based on the sload value
	IF EXTRA_LATENCY == 0 # EXTRA_LATENCY > 0 & WIDTH_OUT <= EXTRA_LATENCY GENERATE
		IF USED(add_sub) GENERATE
			acc_cell[].datab = acc_cell[].regout;
		ELSE GENERATE
			acc_cell[].datab = acc_cell[].regout;	
		END GENERATE;
		acc_cell[].sload = sload;
	ELSE GENERATE
	-- in case of pipeline, feed the data back based on the appropriate registered sload
		FOR i IN 0 TO WIDTH_OUT-1 GENERATE
			IF PIPELINE_SEGMENT(i) == 0 GENERATE
				IF USED(add_sub) GENERATE
					acc_cell[i].datab = (acc_cell[i].regout);
				ELSE GENERATE
					acc_cell[i].datab = acc_cell[i].regout;	
				END GENERATE;
				acc_cell[i].sload = sload;
			ELSE GENERATE
				IF USED(add_sub) GENERATE
					acc_cell[i].datab = (acc_cell[i].regout);
				ELSE GENERATE
					acc_cell[i].datab = acc_cell[i].regout;	
				END GENERATE;
				acc_cell[i].sload = sload_regr[PIPELINE_SEGMENT(i)-1].q;
			END GENERATE;
		END GENERATE;
		sload_regr[0].d = sload;
		IF USED(add_sub) GENERATE
			add_sub_regr[0].d = !add_sub;
		END GENERATE;
		IF EXTRA_LATENCY > 1 GENERATE
			FOR i IN 1 TO EXTRA_LATENCY-1 GENERATE
				sload_regr[i].d = sload_regr[i-1].q;
				IF USED(add_sub) GENERATE
					add_sub_regr[i].d = add_sub_regr[i-1].q;
				END GENERATE;
			END GENERATE;
		END GENERATE;
		
	END GENERATE;
	-- connect cin	
	IF USED(cin) GENERATE	
		acc_cell[0].cin = cin;
	ELSE GENERATE
		IF USED(add_sub) GENERATE
			acc_cell[0].cin = !add_sub & !sload;
		ELSE GENERATE
			acc_cell[0].cin = GND;
		END GENERATE;
	END GENERATE;
	-- conect carry chain breaking it if needed 
	IF EXTRA_LATENCY == 0 # EXTRA_LATENCY > 0 & WIDTH_OUT <= EXTRA_LATENCY GENERATE
		IF WIDTH_OUT > 1 GENERATE
			FOR i IN 1 TO WIDTH_OUT-1 GENERATE
				IF BREAKPOINT(i) GENERATE
					cin_sum_cell[POSITION(i)].cin = acc_cell[i-1].cout;
					data_cout_cell[POSITION(i)].dataa = cin_sum_cell[POSITION(i)].combout;
					acc_cell[i].cin = data_cout_cell[POSITION(i)].cout;
				ELSE GENERATE
					acc_cell[i].cin = acc_cell[i-1].cout;
				END GENERATE;
			END GENERATE;
		END GENERATE;
		IF EXTRA_LATENCY == 0 GENERATE
			result[] = acc_cell[].regout;
		END GENERATE;
		-- add extra regrs for data, cout and oveflow when width <= latency
		IF EXTRA_LATENCY > 0 & WIDTH_OUT <= EXTRA_LATENCY GENERATE
			extra_buffers[0][].d = acc_cell[].regout;
			IF USED(overflow) GENERATE
				ovrflw_regr[0].d = tmp_overflow;
				overflow = ovrflw_regr[EXTRA_LATENCY-1].q;
			END GENERATE;
			IF USED(cout) GENERATE
				cout_regr[0].d = tmp_cout;
				cout = cout_regr[EXTRA_LATENCY-1].q;
			END GENERATE;
			result[] = extra_buffers[EXTRA_LATENCY-1][].q;
			IF EXTRA_LATENCY > 1 GENERATE
				FOR i IN 1 TO EXTRA_LATENCY-1 GENERATE
					extra_buffers[i][].d = extra_buffers[i-1][].q;
					IF USED(overflow) GENERATE
						ovrflw_regr[i].d = ovrflw_regr[i-1].q;
					END GENERATE;
					IF USED(cout) GENERATE
						cout_regr[i].d = cout_regr[i-1].q;
					END GENERATE;
				END GENERATE;
			END GENERATE;
		END GENERATE;
	ELSE GENERATE -- width > latency
		-- length of segment == 1 => each element is first element as well as last element
		IF LENGTH_PER_SEGMENT() == 1 GENERATE
			FOR i IN 0 TO WIDTH_OUT-1 GENERATE
				IF i != 0 GENERATE
					acc_cell[i].cin = cout_in_cell[PIPELINE_SEGMENT(i)-1].cout;
				END GENERATE;						
				IF i != WIDTH_OUT-1 GENERATE
					cout_out_cell[PIPELINE_SEGMENT(i)].cin = acc_cell[i].cout;
					cout_in_cell[PIPELINE_SEGMENT(i)].dataa = cout_out_cell[PIPELINE_SEGMENT(i)].regout;	
				END GENERATE;
			END GENERATE;
		ELSE GENERATE
		-- connect carry chain
		FOR i IN 1 TO WIDTH_OUT-1 GENERATE
			-- if last element feed cout to regr
			IF LAST_ELEMENT(i) GENERATE
				IF BREAKPOINT(NORMALIZE(i)) GENERATE
					break_cin_cell[PIPELINE_SEGMENT(i)][POSITION(NORMALIZE(i))].cin = acc_cell[i-1].cout;
					break_cout_cell[PIPELINE_SEGMENT(i)][POSITION(NORMALIZE(i))].dataa = break_cin_cell[PIPELINE_SEGMENT(i)][POSITION(NORMALIZE(i))].combout;
					acc_cell[i].cin = break_cout_cell[PIPELINE_SEGMENT(i)][POSITION(NORMALIZE(i))].cout;
				ELSE GENERATE
					acc_cell[i].cin = acc_cell[i-1].cout;
				END GENERATE;
				IF i != WIDTH_OUT-1 GENERATE
					cout_out_cell[PIPELINE_SEGMENT(i)].cin = acc_cell[i].cout;
					cout_in_cell[PIPELINE_SEGMENT(i)].dataa = cout_out_cell[PIPELINE_SEGMENT(i)].regout;	
				END GENERATE;					
			ELSE GENERATE
				-- if first element get cin from regr
				IF FIRST_ELEMENT(i) GENERATE
					acc_cell[i].cin = cout_in_cell[PIPELINE_SEGMENT(i)-1].cout & !sload_regr[PIPELINE_SEGMENT(i)-1].q;
				ELSE GENERATE
					-- else get cin from nbr
					IF BREAKPOINT(NORMALIZE(i)) GENERATE
						break_cin_cell[PIPELINE_SEGMENT(i)][POSITION(NORMALIZE(i))].cin = acc_cell[i-1].cout;
						break_cout_cell[PIPELINE_SEGMENT(i)][POSITION(NORMALIZE(i))].dataa = break_cin_cell[PIPELINE_SEGMENT(i)][POSITION(NORMALIZE(i))].combout;
						acc_cell[i].cin = break_cout_cell[PIPELINE_SEGMENT(i)][POSITION(NORMALIZE(i))].cout;
					ELSE GENERATE
						acc_cell[i].cin = acc_cell[i-1].cout;
					END GENERATE;
				END GENERATE;
			END GENERATE;
		END GENERATE;
		END GENERATE;
		-- connect data outputs and inputs
		FOR i IN 0 TO WIDTH_OUT-1 GENERATE
			IF PIPELINE_SEGMENT(i) != 0 GENERATE
				IF USED(add_sub) GENERATE
					acc_cell[i].dataa = extra_buffers[PIPELINE_SEGMENT(i)-1][i].q $ add_sub_regr[PIPELINE_SEGMENT(i)-1].q;
				ELSE GENERATE
					acc_cell[i].dataa = extra_buffers[PIPELINE_SEGMENT(i)-1][i].q;
				END GENERATE;
				acc_cell[i].datac = extra_buffers[PIPELINE_SEGMENT(i)-1][i].q;
			END GENERATE;
			IF PIPELINE_SEGMENT(i) != EXTRA_LATENCY GENERATE
				result[i] = extra_buffers[EXTRA_LATENCY-1][i].q;
				extra_buffers[PIPELINE_SEGMENT(i)][i].d = acc_cell[i].regout;
			ELSE GENERATE
				result[i] = acc_cell[i].regout;	
			END GENERATE;
			FOR j IN 1 TO EXTRA_LATENCY GENERATE
				IF j != PIPELINE_SEGMENT(i) GENERATE
					extra_buffers[j][i].d = extra_buffers[j-1][i].q;
				END GENERATE;
			END GENERATE; 
		END GENERATE;
		-- regr cout and overflow when last segment is empty
		IF USED(cout) GENERATE
			IF ( EXTRA_LATENCY * LENGTH_PER_SEGMENT() >= WIDTH_OUT) GENERATE
				cout_buffer[0].d = acc_cell[WIDTH_OUT-1].cout;
				IF EXTRA_LATENCY - PIPELINE_SEGMENT(WIDTH_OUT-1)-1 >= 1 GENERATE
					FOR i IN 1 TO EXTRA_COUT_BUFFER() GENERATE
						cout_buffer[i].d = cout_buffer[i-1].q;
					END GENERATE;
					IF USED(add_sub) GENERATE
						cout = cout_buffer[EXTRA_COUT_BUFFER()].q & !sload_regr[EXTRA_LATENCY-1].q # add_sub_regr[EXTRA_LATENCY-1].q & sload_regr[EXTRA_LATENCY-1].q;				
					ELSE GENERATE
						cout = cout_buffer[EXTRA_COUT_BUFFER()].q & !sload_regr[EXTRA_LATENCY-1].q ;
					END GENERATE;
				ELSE GENERATE
					IF USED(add_sub) GENERATE
						cout = cout_buffer[0].q & !sload_regr[EXTRA_LATENCY-1].q # add_sub_regr[EXTRA_LATENCY-1].q & sload_regr[EXTRA_LATENCY-1].q;				
					ELSE GENERATE
						cout = cout_buffer[0].q & !sload_regr[EXTRA_LATENCY-1].q ;
					END GENERATE;
				END GENERATE;
			END GENERATE;
		END GENERATE; 
		-- regr overflow for special cases
		IF USED(overflow) GENERATE
			IF (EXTRA_LATENCY * LENGTH_PER_SEGMENT() >= WIDTH_OUT) GENERATE
				overflow_buffer[0].d = tmp_overflow;
				IF EXTRA_LATENCY - PIPELINE_SEGMENT(WIDTH_OUT-1)-1 >= 1 GENERATE
					FOR i IN 1 TO EXTRA_OVERFLOW_BUFFER() GENERATE
						overflow_buffer[i].d = overflow_buffer[i-1].q;
					END GENERATE;
					IF LPM_REPRESENTATION == "SIGNED" GENERATE
						overflow = overflow_buffer[EXTRA_OVERFLOW_BUFFER()].q;
					ELSE GENERATE
						overflow = overflow_buffer[EXTRA_OVERFLOW_BUFFER()].q;
					END GENERATE;
				ELSE GENERATE
					overflow =overflow_buffer[0].q;
				END GENERATE;
			END GENERATE;
		END GENERATE;

	END GENERATE;	
	
	

	IF USED(aclr) GENERATE
		acc_cell[].aclr = aclr;		
		IF EXTRA_LATENCY > 0 GENERATE
			extra_buffers[][].clrn = !aclr;
			IF WIDTH_OUT > EXTRA_LATENCY GENERATE
				sload_regr[].clrn = !aclr;
				cout_out_cell[].aclr = aclr;
				cout_in_cell[].aclr = aclr;
				IF USED(add_sub) GENERATE
					add_sub_regr[].clrn = !aclr;
				END GENERATE;
			END GENERATE;
		END GENERATE;
		IF USED(overflow) GENERATE
			IF LPM_REPRESENTATION == "SIGNED" # USED(sign_data) GENERATE
				data_a_regr.clrn = !aclr;
				res_regr.clrn = !aclr;
			END GENERATE;
			IF USED(sign_data) GENERATE
				sign_data_regr[].clrn = !aclr;
			END GENERATE;
			IF EXTRA_LATENCY > 0 & WIDTH_OUT <= EXTRA_LATENCY GENERATE
				ovrflw_regr[].clrn = !aclr;
			END GENERATE;
			IF EXTRA_LATENCY > 0 & WIDTH_OUT > EXTRA_LATENCY & ( EXTRA_LATENCY * LENGTH_PER_SEGMENT() >= WIDTH_OUT) GENERATE
				overflow_buffer[].clrn = !aclr;
			END GENERATE;
			IF LPM_REPRESENTATION != "SIGNED" GENERATE
				unsign_ovrflw_regr.clrn = !aclr;
			END GENERATE;
		END GENERATE;
		IF USED(cout) GENERATE
			IF EXTRA_LATENCY > 0 & WIDTH_OUT <= EXTRA_LATENCY GENERATE
				cout_regr[].clrn = !aclr;
			END GENERATE;
			IF EXTRA_LATENCY > 0 & WIDTH_OUT > EXTRA_LATENCY & ( EXTRA_LATENCY * LENGTH_PER_SEGMENT() >= WIDTH_OUT) GENERATE
				cout_buffer[].clrn = !aclr;
			END GENERATE;
		END GENERATE;
	END GENERATE;

	IF USED(clock) GENERATE
		acc_cell[].clk = clock;
		IF EXTRA_LATENCY > 0 GENERATE
			extra_buffers[][].clk = clock;
			IF WIDTH_OUT > EXTRA_LATENCY GENERATE
				sload_regr[].clk = clock;
				cout_out_cell[].clk = clock;
				cout_in_cell[].clk = clock;
				IF USED(add_sub) GENERATE
					add_sub_regr[].clk = clock;
				END GENERATE;
			END GENERATE;
		END GENERATE;
		IF USED(overflow) GENERATE
			IF LPM_REPRESENTATION == "SIGNED" # USED(sign_data) GENERATE
				data_a_regr.clk = clock;
				res_regr.clk = clock;
			END GENERATE;
			IF EXTRA_LATENCY > 0 & WIDTH_OUT <= EXTRA_LATENCY GENERATE
				ovrflw_regr[].clk = clock;
			END GENERATE;
			IF EXTRA_LATENCY > 0 & WIDTH_OUT > EXTRA_LATENCY & ( EXTRA_LATENCY * LENGTH_PER_SEGMENT() >= WIDTH_OUT) GENERATE
				overflow_buffer[].clk = clock;
			END GENERATE;
			IF LPM_REPRESENTATION != "SIGNED" GENERATE
				unsign_ovrflw_regr.clk = clock;
			END GENERATE;
			IF USED(sign_data) GENERATE
				sign_data_regr[].clk = clock;
			END GENERATE;
		END GENERATE;
		IF USED(cout) GENERATE
			IF EXTRA_LATENCY > 0 & WIDTH_OUT <= EXTRA_LATENCY GENERATE
				cout_regr[].clk = clock;
			END GENERATE;
			IF EXTRA_LATENCY > 0 & WIDTH_OUT > EXTRA_LATENCY & ( EXTRA_LATENCY * LENGTH_PER_SEGMENT() >= WIDTH_OUT) GENERATE
				cout_buffer[].clk = clock;
			END GENERATE;
		END GENERATE;
	END GENERATE;

	IF USED(clken) GENERATE
		acc_cell[].ena = clken;
		IF EXTRA_LATENCY > 0 GENERATE
			extra_buffers[][].ena = clken;
			IF WIDTH_OUT > EXTRA_LATENCY GENERATE
				sload_regr[].ena = clken;
				cout_out_cell[].ena = clken;
				cout_in_cell[].ena = clken;
				IF USED(add_sub) GENERATE
					add_sub_regr[].ena = clken;
				END GENERATE;
			END GENERATE;
		END GENERATE;
		IF USED(overflow) GENERATE
			IF LPM_REPRESENTATION == "SIGNED" # USED(sign_data) GENERATE
				data_a_regr.ena = clken;
				res_regr.ena = clken;
			END GENERATE;
			IF EXTRA_LATENCY > 0 & WIDTH_OUT <= EXTRA_LATENCY GENERATE
				ovrflw_regr[].ena = clken;
			END GENERATE;
			IF EXTRA_LATENCY > 0 & WIDTH_OUT > EXTRA_LATENCY & ( EXTRA_LATENCY * LENGTH_PER_SEGMENT() >= WIDTH_OUT) GENERATE
				overflow_buffer[].ena = clken;
			END GENERATE;
			IF LPM_REPRESENTATION != "SIGNED" GENERATE
				unsign_ovrflw_regr.ena = clken;
			END GENERATE;
			IF USED(sign_data) GENERATE
				sign_data_regr[].ena = clken;
			END GENERATE;
		END GENERATE;
		IF USED(cout) GENERATE
			IF EXTRA_LATENCY > 0 & WIDTH_OUT <= EXTRA_LATENCY GENERATE
				cout_regr[].ena = clken;
			END GENERATE;
			IF EXTRA_LATENCY > 0 & WIDTH_OUT > EXTRA_LATENCY & ( EXTRA_LATENCY * LENGTH_PER_SEGMENT() >= WIDTH_OUT) GENERATE
				cout_buffer[].ena = clken;
			END GENERATE;
		END GENERATE;
	END GENERATE;
	
	-- overflow calculation
	IF USED(overflow) GENERATE
		IF USED(sign_data) GENERATE
			sign_data_regr[0].d = sign_data;
			IF EXTRA_LATENCY > 0 GENERATE
				FOR i IN 1 TO EXTRA_LATENCY GENERATE
					sign_data_regr[i].d = sign_data_regr[i-1].q;
				END GENERATE;
			END GENERATE;
		END GENERATE;
		IF EXTRA_LATENCY == 0  # WIDTH_OUT <= EXTRA_LATENCY GENERATE
			IF USED(sign_data) GENERATE
				IF USED(add_sub) GENERATE
					res_regr.d =  (!(data[WIDTH_IN-1] $ acc_cell[WIDTH_OUT-1].regout) $ !add_sub )& !sload;
				ELSE GENERATE
					res_regr.d =  (!(data[WIDTH_IN-1] $ acc_cell[WIDTH_OUT-1].regout)) & !sload;
				END GENERATE;		
				data_a_regr.d = acc_cell[WIDTH_OUT-1].regout;
				tmp_sign_overflow = (res_regr.q) & (data_a_regr.q $ acc_cell[WIDTH_OUT-1].regout);				
				cout_node = acc_cell[WIDTH_OUT-1].cout;
				IF USED(add_sub) GENERATE
					unsign_ovrflw_regr.d = (!add_sub $ cout_node) & !sload;			
				ELSE GENERATE
					unsign_ovrflw_regr.d = cout_node & !sload;
				END GENERATE;
				tmp_unsign_overflow = unsign_ovrflw_regr.q;
				tmp_overflow = tmp_sign_overflow & sign_data_regr[0].q # tmp_unsign_overflow & !sign_data_regr[0].q;
			ELSE GENERATE
				IF LPM_REPRESENTATION == "SIGNED" GENERATE
					-- store the output of previous stage which is also the input and the data input
					IF USED(add_sub) GENERATE
						res_regr.d =  (!(data[WIDTH_IN-1] $ acc_cell[WIDTH_OUT-1].regout) $ !add_sub )& !sload;
					ELSE GENERATE
						res_regr.d =  (!(data[WIDTH_IN-1] $ acc_cell[WIDTH_OUT-1].regout)) & !sload;
					END GENERATE;		
					data_a_regr.d = acc_cell[WIDTH_OUT-1].regout;
					tmp_overflow = (res_regr.q) & (data_a_regr.q $ acc_cell[WIDTH_OUT-1].regout);
				ELSE GENERATE
					cout_node = acc_cell[WIDTH_OUT-1].cout;
					IF USED(add_sub) GENERATE
						unsign_ovrflw_regr.d = (!add_sub $ cout_node) & !sload;			
					ELSE GENERATE
						unsign_ovrflw_regr.d = cout_node & !sload;
					END GENERATE;
					tmp_overflow = unsign_ovrflw_regr.q;
				END GENERATE;
			END GENERATE;
			IF EXTRA_LATENCY == 0 GENERATE
				overflow = tmp_overflow;
			END GENERATE;
		ELSE GENERATE
			IF ( EXTRA_LATENCY * LENGTH_PER_SEGMENT() >= WIDTH_OUT) GENERATE
				IF USED(sign_data) GENERATE
					IF USED(add_sub) GENERATE
						res_regr.d =  (!(extra_buffers[PIPELINE_SEGMENT(WIDTH_OUT-1)-1][WIDTH_OUT-1] $ acc_cell[WIDTH_OUT-1].regout) $ add_sub_regr[PIPELINE_SEGMENT(WIDTH_OUT-1)-1].q ) & !sload_regr[PIPELINE_SEGMENT(WIDTH_OUT-1)-1].q;
					ELSE GENERATE
						res_regr.d =  (!(extra_buffers[PIPELINE_SEGMENT(WIDTH_OUT-1)-1][WIDTH_OUT-1] $ acc_cell[WIDTH_OUT-1].regout)) & !sload_regr[PIPELINE_SEGMENT(WIDTH_OUT-1)-1].q;
					END GENERATE;		
					data_a_regr.d = acc_cell[WIDTH_OUT-1].regout;
					tmp_sign_overflow = (res_regr.q) & (data_a_regr.q $ acc_cell[WIDTH_OUT-1].regout);					
					cout_node = acc_cell[WIDTH_OUT-1].cout;
					IF USED(add_sub) GENERATE
						unsign_ovrflw_regr.d = (add_sub_regr[PIPELINE_SEGMENT(WIDTH_OUT-1)-1].q $ cout_node) & !sload_regr[PIPELINE_SEGMENT(WIDTH_OUT-1)-1].q;			
					ELSE GENERATE
						unsign_ovrflw_regr.d = cout_node & !sload_regr[PIPELINE_SEGMENT(WIDTH_OUT-1)-1].q;
					END GENERATE;
					tmp_unsign_overflow = unsign_ovrflw_regr.q;
					tmp_overflow = tmp_sign_overflow & sign_data_regr[PIPELINE_SEGMENT(WIDTH_OUT-1)].q # tmp_unsign_overflow & !sign_data_regr[PIPELINE_SEGMENT(WIDTH_OUT-1)].q;
				ELSE GENERATE
					IF LPM_REPRESENTATION == "SIGNED" GENERATE
						IF USED(add_sub) GENERATE
							res_regr.d =  (!(extra_buffers[PIPELINE_SEGMENT(WIDTH_OUT-1)-1][WIDTH_OUT-1] $ acc_cell[WIDTH_OUT-1].regout) $ add_sub_regr[PIPELINE_SEGMENT(WIDTH_OUT-1)-1].q ) & !sload_regr[PIPELINE_SEGMENT(WIDTH_OUT-1)-1].q;
						ELSE GENERATE
							res_regr.d =  (!(extra_buffers[PIPELINE_SEGMENT(WIDTH_OUT-1)-1][WIDTH_OUT-1] $ acc_cell[WIDTH_OUT-1].regout)) & !sload_regr[PIPELINE_SEGMENT(WIDTH_OUT-1)-1].q;
						END GENERATE;		
						data_a_regr.d = acc_cell[WIDTH_OUT-1].regout;
						tmp_overflow = (res_regr.q) & (data_a_regr.q $ acc_cell[WIDTH_OUT-1].regout);
					ELSE GENERATE
						cout_node = acc_cell[WIDTH_OUT-1].cout;
						IF USED(add_sub) GENERATE
							unsign_ovrflw_regr.d = (add_sub_regr[PIPELINE_SEGMENT(WIDTH_OUT-1)-1].q $ cout_node) & !sload_regr[PIPELINE_SEGMENT(WIDTH_OUT-1)-1].q;			
						ELSE GENERATE
							unsign_ovrflw_regr.d = cout_node & !sload_regr[PIPELINE_SEGMENT(WIDTH_OUT-1)-1].q;
						END GENERATE;
						tmp_overflow = unsign_ovrflw_regr.q;
					END GENERATE;	
				END GENERATE;
			ELSE GENERATE
				IF USED(sign_data) GENERATE
					IF USED(add_sub) GENERATE
						res_regr.d =  (!(extra_buffers[EXTRA_LATENCY-1][WIDTH_OUT-1] $ acc_cell[WIDTH_OUT-1].regout) $ add_sub_regr[EXTRA_LATENCY-1].q ) & !sload_regr[EXTRA_LATENCY-1].q;
					ELSE GENERATE
						res_regr.d =  (!(extra_buffers[EXTRA_LATENCY-1][WIDTH_OUT-1] $ acc_cell[WIDTH_OUT-1].regout)) & !sload_regr[EXTRA_LATENCY-1].q;
					END GENERATE;		
					data_a_regr.d = acc_cell[WIDTH_OUT-1].regout;
					tmp_sign_overflow = (res_regr.q) & (data_a_regr.q $ acc_cell[WIDTH_OUT-1].regout);
					cout_node = acc_cell[WIDTH_OUT-1].cout;
					IF USED(add_sub) GENERATE
						unsign_ovrflw_regr.d = (add_sub_regr[EXTRA_LATENCY-1].q $ cout_node) & !sload_regr[EXTRA_LATENCY-1].q;			
					ELSE GENERATE
						unsign_ovrflw_regr.d = cout_node & !sload_regr[EXTRA_LATENCY-1].q;
					END GENERATE;
					tmp_unsign_overflow = unsign_ovrflw_regr.q;
					tmp_overflow = tmp_sign_overflow & sign_data_regr[EXTRA_LATENCY].q # tmp_unsign_overflow & !sign_data_regr[EXTRA_LATENCY].q;													
				ELSE GENERATE
					IF LPM_REPRESENTATION == "SIGNED" GENERATE
						IF USED(add_sub) GENERATE
							res_regr.d =  (!(extra_buffers[EXTRA_LATENCY-1][WIDTH_OUT-1] $ acc_cell[WIDTH_OUT-1].regout) $ add_sub_regr[EXTRA_LATENCY-1].q ) & !sload_regr[EXTRA_LATENCY-1].q;
						ELSE GENERATE
							res_regr.d =  (!(extra_buffers[EXTRA_LATENCY-1][WIDTH_OUT-1] $ acc_cell[WIDTH_OUT-1].regout)) & !sload_regr[EXTRA_LATENCY-1].q;
						END GENERATE;		
						data_a_regr.d = acc_cell[WIDTH_OUT-1].regout;
						tmp_overflow = (res_regr.q) & (data_a_regr.q $ acc_cell[WIDTH_OUT-1].regout);
					ELSE GENERATE
						cout_node = acc_cell[WIDTH_OUT-1].cout;
						IF USED(add_sub) GENERATE
							unsign_ovrflw_regr.d = (add_sub_regr[EXTRA_LATENCY-1].q $ cout_node) & !sload_regr[EXTRA_LATENCY-1].q;			
						ELSE GENERATE
							unsign_ovrflw_regr.d = cout_node & !sload_regr[EXTRA_LATENCY-1].q;
						END GENERATE;
						tmp_overflow = unsign_ovrflw_regr.q;
					END GENERATE;	
				END GENERATE;
				overflow = tmp_overflow;
			END GENERATE;
		END GENERATE;
	END GENERATE;

	-- cout calculation
	IF USED(cout) GENERATE
		IF EXTRA_LATENCY == 0 # EXTRA_LATENCY > 0 & WIDTH_OUT <= EXTRA_LATENCY GENERATE
			IF USED(add_sub) GENERATE
				tmp_cout = !sload & acc_cell[WIDTH_OUT-1].cout # !add_sub & sload;
			ELSE GENERATE
				tmp_cout = !sload & acc_cell[WIDTH_OUT-1].cout;
			END GENERATE;	
		ELSE GENERATE
			IF USED(add_sub) GENERATE
				tmp_cout = !sload_regr[EXTRA_LATENCY-1].q & acc_cell[WIDTH_OUT-1].cout # add_sub_regr[EXTRA_LATENCY-1].q & sload_regr[EXTRA_LATENCY-1].q;
			ELSE GENERATE
				tmp_cout = !sload_regr[EXTRA_LATENCY-1].q & acc_cell[WIDTH_OUT-1].cout;
			END GENERATE;	
		END GENERATE;
		IF EXTRA_LATENCY == 0 # EXTRA_LATENCY > 0 & WIDTH_OUT > EXTRA_LATENCY GENERATE
			IF !(EXTRA_LATENCY > 0 & WIDTH_OUT > EXTRA_LATENCY & ( EXTRA_LATENCY * LENGTH_PER_SEGMENT() >= WIDTH_OUT)) GENERATE
				cout = tmp_cout;
			END GENERATE;
			IF EXTRA_LATENCY == 0 GENERATE
				cout = tmp_cout;
			END GENERATE;
		END GENERATE;		
	END GENERATE;

	IF !USED(cout) GENERATE
		cout = GND;
	END GENERATE;
	IF !USED(overflow) GENERATE
		overflow = GND;
	END GENERATE;
	IF !USED(result) GENERATE
		result[] = GND;
	END GENERATE;
END;

