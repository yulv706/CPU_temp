--------------------------------------------------------------------
--
--	LPM_ROM Parameterized Megafunction
--
--  Copyright 1991-2009 Corporation  
--  Your use of Altera Corporation's design tools, logic functions  
--  and other software and tools, and its AMPP partner logic  
--  functions, and any output files from any of the foregoing  
--  (including device programming or simulation files), and any  
--  associated documentation or information are expressly subject  
--  to the terms and conditions of the Altera Program License  
--  Subscription Agreement, Altera MegaCore Function License  
--  Agreement, or other applicable license agreement, including,  
--  without limitation, that your use is for the sole purpose of  
--  programming logic devices manufactured by Altera and sold by  
--  Altera or its authorized distributors.  Please refer to the  
--  applicable agreement for further details. 
--  
--  9.0 Build 184  03/01/2009   
--
--	Version 2.0
--
--------------------------------------------------------------------

INCLUDE "altrom.inc";

PARAMETERS
(
	LPM_WIDTH,
	LPM_WIDTHAD,
	LPM_NUMWORDS = 2^LPM_WIDTHAD,
	LPM_ADDRESS_CONTROL = "REGISTERED",
	LPM_OUTDATA = "REGISTERED",
	LPM_FILE,
	DEVICE_FAMILY
);

INCLUDE "aglobal90.inc";
OPTIONS TREAT_DEFAULT_VALUE_AS_UNUSED = ON;

CONSTANT NUMWORDS = (LPM_NUMWORDS == 0) ? 2^LPM_WIDTHAD : LPM_NUMWORDS;

SUBDESIGN lpm_rom
(
	address[LPM_WIDTHAD-1..0]	: INPUT = GND;
	inclock						: INPUT = VCC;
	outclock					: INPUT = VCC;
	memenab						: INPUT = VCC;
	q[LPM_WIDTH-1..0]			: OUTPUT;
)

VARIABLE
	IF (LPM_ADDRESS_CONTROL == "REGISTERED") GENERATE
		srom	: altrom WITH (WIDTH=LPM_WIDTH,
							AD_WIDTH=LPM_WIDTHAD,
							NUMWORDS=NUMWORDS,
							FILE=LPM_FILE,
							REGISTERINPUTMODE="ADDRESS_CONTROL");
	ELSE GENERATE
		srom	: altrom WITH (WIDTH=LPM_WIDTH,
							AD_WIDTH=LPM_WIDTHAD,
							NUMWORDS=NUMWORDS,
							FILE=LPM_FILE,
							REGISTERINPUTMODE="DEFAULT");
	END GENERATE;

	otri[LPM_WIDTH-1..0]	: TRI;

BEGIN

	ASSERT (LPM_WIDTH > 0)
			REPORT "Value of LPM_WIDTH parameter value must be greater than 0"
			SEVERITY ERROR
			HELP_ID LPM_ROM_WIDTH;


	ASSERT (LPM_WIDTHAD > 0)
			REPORT "Value of LPM_WIDTHAD parameter value must be greater than 0"
			SEVERITY ERROR
			HELP_ID LPM_ROM_WIDTHAD;

	ASSERT (NUMWORDS > 2^(LPM_WIDTHAD-1) & NUMWORDS <= 2^LPM_WIDTHAD)
			REPORT "Value of LPM_NUMWORDS parameter requires % address lines, but LPM_WIDTHAD value, which defines the number of address lines, is %"
				CEIL(LOG2(NUMWORDS)), LPM_WIDTHAD
			SEVERITY ERROR
			HELP_ID LPM_ROM_NUMWORDS;

	ASSERT (LPM_ADDRESS_CONTROL == "REGISTERED" # LPM_ADDRESS_CONTROL == "UNREGISTERED")
			REPORT "Illegal value for LPM_ADDRESS_CONTROL parameter (%) -- value must be REGISTERED (the default) or UNREGISTERED"
				LPM_ADDRESS_CONTROL
			SEVERITY ERROR
			HELP_ID LPM_ROM_ADDRESS_CONTROL;

	ASSERT (LPM_OUTDATA == "REGISTERED" # LPM_OUTDATA == "UNREGISTERED")
			REPORT "Illegal value for LPM_OUTDATA parameter (%) -- value must be REGISTERED or UNREGISTERED (the default)"
				LPM_OUTDATA
			SEVERITY ERROR
			HELP_ID LPM_ROM_OUTDATA;

	ASSERT (  LPM_ADDRESS_CONTROL == "REGISTERED" & USED(inclock)
			# LPM_ADDRESS_CONTROL == "UNREGISTERED" & USED(inclock) == 0)
			REPORT "Value of LPM_ADDRESS_CONTROL parameter (%) is not consistent with the use of the inclock port"
				LPM_ADDRESS_CONTROL
			SEVERITY ERROR
			HELP_ID LPM_ROM_ADDRESS_CONTROL_CLOCK;

	ASSERT (  LPM_OUTDATA == "REGISTERED" & USED(outclock)
			# LPM_OUTDATA == "UNREGISTERED" & USED(outclock) == 0)
			REPORT "Value of LPM_OUTDATA parameter (%) is not consistent with the use of the outclock port"
				LPM_OUTDATA
			SEVERITY ERROR
			HELP_ID LPM_ROM_OUTDATA_CLOCK;

	ASSERT (FAMILY_IS_KNOWN() == 1)
			REPORT "Megafunction lpm_rom does not recognize the current device family (%) -- ensure that you are using the newest version of the megafunction"
				DEVICE_FAMILY
			SEVERITY WARNING
			HELP_ID LPM_ROM_FAMILY_UNKNOWN;

	srom.address[] = address[];
	IF (USED(inclock)) GENERATE
		srom.clocki = inclock;
	END GENERATE;
	IF (USED(outclock)) GENERATE
		srom.clocko = outclock;
	END GENERATE;
	otri[] = srom.q[];
	otri[].oe = memenab;
	q[] = otri[];
	IF !USED(q) GENERATE
		q[] = GND;
	END GENERATE;
END;
