-- **************************************************************************
--  Priority encoder - A_PRIORITY_ENCODER
--
--  Copyright 1991-2009 Corporation  
--  Your use of Altera Corporation's design tools, logic functions  
--  and other software and tools, and its AMPP partner logic  
--  functions, and any output files from any of the foregoing  
--  (including device programming or simulation files), and any  
--  associated documentation or information are expressly subject  
--  to the terms and conditions of the Altera Program License  
--  Subscription Agreement, Altera MegaCore Function License  
--  Agreement, or other applicable license agreement, including,  
--  without limitation, that your use is for the sole purpose of  
--  programming logic devices manufactured by Altera and sold by  
--  Altera or its authorized distributors.  Please refer to the  
--  applicable agreement for further details. 
--  
--  9.0 Build 184  03/01/2009   
--
--	Version 2.0
--
--
-- **************************************************************************

INCLUDE "a_priority_encoder";

--------------------------------------------------------------------
PARAMETERS
(
	WIDTH,
	LSB_PRIORITY = "NO"	-- Set to "YES" for lowest_priority encoding.
						-- The default is highest-priority encoding
);

--------------------------------------------------------------------
CONSTANT WIDTHAD	= (WIDTH >= 2) ? CEIL(LOG2(WIDTH)) : 1;
CONSTANT HALF_WIDTH	= 2^(WIDTHAD-1);
CONSTANT GO_DEEPER	= (WIDTHAD > 1) ? 1 : 0;

--------------------------------------------------------------------
SUBDESIGN a_priority_encoder
(
	d[WIDTH-1..0]		: INPUT;
	q[WIDTHAD-1..0] 	: OUTPUT;
	zero 				: OUTPUT;
)

--------------------------------------------------------------------
VARIABLE
	IF (GO_DEEPER == 1) GENERATE
		pe1: a_priority_encoder WITH (WIDTH = HALF_WIDTH);
		pe2: a_priority_encoder WITH (WIDTH = HALF_WIDTH);
	END GENERATE;

--------------------------------------------------------------------
BEGIN
	assert (WIDTH >= 2) 
		report "WIDTH must be at least 2" severity error;

	IF (GO_DEEPER == 1) GENERATE
		pe1.d[] = d[HALF_WIDTH-1..0];
		IF 2^WIDTHAD==WIDTH GENERATE
			pe2.d[] = d[WIDTH-1..HALF_WIDTH];
		ELSE GENERATE
			pe2.d[] = (0,d[WIDTH-1..HALF_WIDTH]);
		END GENERATE;

		IF (LSB_PRIORITY == "YES") GENERATE
			IF pe1.zero THEN
				q[WIDTHAD-2..0] = pe2.q[];
			ELSE
				q[WIDTHAD-2..0] = pe1.q[];
			END IF;
			q[WIDTHAD-1] = pe1.zero;
		ELSE GENERATE
			IF pe2.zero THEN
				q[WIDTHAD-2..0] = pe1.q[];
			ELSE
				q[WIDTHAD-2..0] = pe2.q[];
			END IF;
			q[WIDTHAD-1] = !pe2.zero;
		END GENERATE;

		zero = pe1.zero & pe2.zero;

	ELSE GENERATE
		IF (LSB_PRIORITY == "YES") GENERATE
			q[0] = !d[0];
		ELSE GENERATE
			q[0] = d[WIDTH-1];
		END GENERATE;
		
		zero = !(d[0] # d[WIDTH-1]);
	END GENERATE;
	IF !USED(q) GENERATE
		q[] = GND;
	END GENERATE;
	IF !USED(zero) GENERATE
		zero = GND;
	END GENERATE;
END;

