------------------------------------------------------------------
-- altdq parameterized megafunction
-- Generated with 'clearbox' loader - do not edit
------------------------------------------------------------------


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.

--  Version 9.0 Build 184 04/29/2009

OPTIONS NAME_SUBSTITUTION = ON;

OPTIONS TREAT_DEFAULT_VALUE_AS_UNUSED = ON;

PARAMETERS
(
	DDIOINCLK_INPUT = "NEGATED_INCLK",
	EXTEND_OE_DISABLE = "OFF",
	INVERT_INPUT_CLOCKS = "ON",
	NUMBER_OF_DQ,
	OE_REG = "UNREGISTERED",
	POWER_UP_HIGH = "OFF",
	CBXI_PARAMETER = "NOTHING"
);
FUNCTION @CBXI_PARAMETER (aclr, aset, datain_h[NUMBER_OF_DQ-1..0], datain_l[NUMBER_OF_DQ-1..0], ddioinclk, inclock, inclocken, oe, outclock, outclocken)
RETURNS (dataout_h[NUMBER_OF_DQ-1..0], dataout_l[NUMBER_OF_DQ-1..0], padio[NUMBER_OF_DQ-1..0]);


SUBDESIGN altdq
(
	aclr		:	INPUT = GND;
	aset		:	INPUT = GND;
	datain_h[NUMBER_OF_DQ-1..0]		:	INPUT;
	datain_l[NUMBER_OF_DQ-1..0]		:	INPUT;
	dataout_h[NUMBER_OF_DQ-1..0]		:	OUTPUT;
	dataout_l[NUMBER_OF_DQ-1..0]		:	OUTPUT;
	ddioinclk		:	INPUT = GND;
	inclock		:	INPUT;
	inclocken		:	INPUT = VCC;
	oe		:	INPUT = VCC;
	outclock		:	INPUT;
	outclocken		:	INPUT = VCC;
	padio[NUMBER_OF_DQ-1..0]		:	BIDIR;
)
VARIABLE
	IF CBXI_PARAMETER != "NOTHING" GENERATE
		auto_generated : @CBXI_PARAMETER WITH ( CBXI_PARAMETER = "NOTHING" );
	END GENERATE;
BEGIN
	ASSERT (CBXI_PARAMETER != "NOTHING")
	REPORT "Valid clear box generator not found or Errors encountered during clear box generation"
	SEVERITY ERROR;
	IF (CBXI_PARAMETER != "NOTHING") GENERATE
		IF USED(aclr) GENERATE
			auto_generated.aclr = aclr;
		END GENERATE;
		IF USED(aset) GENERATE
			auto_generated.aset = aset;
		END GENERATE;
		IF USED(datain_h) GENERATE
			auto_generated.datain_h[] = datain_h[];
		END GENERATE;
		IF USED(datain_l) GENERATE
			auto_generated.datain_l[] = datain_l[];
		END GENERATE;
		IF USED(dataout_h) GENERATE
			dataout_h[] = auto_generated.dataout_h[];
		ELSE GENERATE
			dataout_h[] = GND;
		END GENERATE;
		IF USED(dataout_l) GENERATE
			dataout_l[] = auto_generated.dataout_l[];
		ELSE GENERATE
			dataout_l[] = GND;
		END GENERATE;
		IF USED(ddioinclk) GENERATE
			auto_generated.ddioinclk = ddioinclk;
		END GENERATE;
		IF USED(inclock) GENERATE
			auto_generated.inclock = inclock;
		END GENERATE;
		IF USED(inclocken) GENERATE
			auto_generated.inclocken = inclocken;
		END GENERATE;
		IF USED(oe) GENERATE
			auto_generated.oe = oe;
		END GENERATE;
		IF USED(outclock) GENERATE
			auto_generated.outclock = outclock;
		END GENERATE;
		IF USED(outclocken) GENERATE
			auto_generated.outclocken = outclocken;
		END GENERATE;
		IF USED(padio) GENERATE
			padio[] = auto_generated.padio[];
		END GENERATE;
	END GENERATE;
END;
