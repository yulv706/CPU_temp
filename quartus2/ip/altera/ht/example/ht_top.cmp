-- Generated by HT 1.3.2 [Altera, IP Toolbench v1.2.7 build38]
-- ************************************************************
-- THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
-- ************************************************************
-- Copyright (C) 1991-2004 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.

component ht_top
	PORT (
		Rstn	: IN STD_LOGIC;
		PwrOk	: IN STD_LOGIC;
		RefClk	: IN STD_LOGIC;
		RxPllAreset_i	: IN STD_LOGIC;
		TxPllAreset_i	: IN STD_LOGIC;
		RxCAD_i	: IN STD_LOGIC_VECTOR (7 DOWNTO 0);
		RxCTL_i	: IN STD_LOGIC;
		RxClk_i	: IN STD_LOGIC;
		RxNpEna_i	: IN STD_LOGIC;
		RxPEna_i	: IN STD_LOGIC;
		RxREna_i	: IN STD_LOGIC;
		TxNpDat_i	: IN STD_LOGIC_VECTOR (63 DOWNTO 0);
		TxNpMty_i	: IN STD_LOGIC_VECTOR (2 DOWNTO 0);
		TxNpDatEna_i	: IN STD_LOGIC;
		TxNpSop_i	: IN STD_LOGIC;
		TxNpEop_i	: IN STD_LOGIC;
		TxPDat_i	: IN STD_LOGIC_VECTOR (63 DOWNTO 0);
		TxPMty_i	: IN STD_LOGIC_VECTOR (2 DOWNTO 0);
		TxPDatEna_i	: IN STD_LOGIC;
		TxPSop_i	: IN STD_LOGIC;
		TxPEop_i	: IN STD_LOGIC;
		TxRDat_i	: IN STD_LOGIC_VECTOR (63 DOWNTO 0);
		TxRMty_i	: IN STD_LOGIC_VECTOR (2 DOWNTO 0);
		TxRDatEna_i	: IN STD_LOGIC;
		TxRSop_i	: IN STD_LOGIC;
		TxREop_i	: IN STD_LOGIC;
		RespErr_i	: IN STD_LOGIC;
		SignaledTabrt_i	: IN STD_LOGIC;
		RefClkWrmRst	: OUT STD_LOGIC;
		RefClkCldRst	: OUT STD_LOGIC;
		RxLnkClkD4	: OUT STD_LOGIC;
		RxLnkClkD4Locked_o	: OUT STD_LOGIC;
		TxCAD_o	: OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
		TxCTL_o	: OUT STD_LOGIC;
		TxClk_o	: OUT STD_LOGIC;
		RxNpDat_o	: OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
		RxNpVal_o	: OUT STD_LOGIC;
		RxNpDav_o	: OUT STD_LOGIC;
		RxNpSop_o	: OUT STD_LOGIC;
		RxNpEop_o	: OUT STD_LOGIC;
		RxNpMty_o	: OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
		RxNpBarHit_o	: OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
		RxPDat_o	: OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
		RxPVal_o	: OUT STD_LOGIC;
		RxPDav_o	: OUT STD_LOGIC;
		RxPSop_o	: OUT STD_LOGIC;
		RxPEop_o	: OUT STD_LOGIC;
		RxPMty_o	: OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
		RxPBarHit_o	: OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
		RxRDat_o	: OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
		RxRVal_o	: OUT STD_LOGIC;
		RxRDav_o	: OUT STD_LOGIC;
		RxRSop_o	: OUT STD_LOGIC;
		RxREop_o	: OUT STD_LOGIC;
		RxRMty_o	: OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
		TxNpDav_o	: OUT STD_LOGIC;
		TxNpWrRjct_o	: OUT STD_LOGIC;
		TxPDav_o	: OUT STD_LOGIC;
		TxPWrRjct_o	: OUT STD_LOGIC;
		TxRDav_o	: OUT STD_LOGIC;
		TxRWrRjct_o	: OUT STD_LOGIC;
		CsrCmdReg_o	: OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
		CsrCapCmdReg_o	: OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
		CsrStatReg_o	: OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
		CsrCapLnk0CtrlReg_o	: OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
		CsrCapLnk1CtrlReg_o	: OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
		CsrCapLnk0CfgReg_o	: OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
		CsrCapLnk1CfgReg_o	: OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
		CsrCapFtrReg_o	: OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
		CsrCapLnk0ErrReg_o	: OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
		CsrCapLnk1ErrReg_o	: OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
		CsrCapErrHndlngReg_o	: OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
		Bar0Reg_o	: OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
		Bar1Reg_o	: OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
		Bar2Reg_o	: OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
		Bar3Reg_o	: OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
		Bar4Reg_o	: OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
		Bar5Reg_o	: OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
		ClmdRCmdBufOvrFlwErr_o	: OUT STD_LOGIC;
		ClmdPCmdBufOvrFlwErr_o	: OUT STD_LOGIC;
		ClmdNPCmdBufOvrFlwErr_o	: OUT STD_LOGIC
	);
end component;
