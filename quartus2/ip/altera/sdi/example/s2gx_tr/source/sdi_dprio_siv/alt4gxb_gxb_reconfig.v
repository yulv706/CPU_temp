// megafunction wizard: %ALTGX_RECONFIG%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: alt2gxb_reconfig 

// ============================================================
// File Name: alt4gxb_gxb_reconfig.v
// Megafunction Name(s):
// 			alt2gxb_reconfig
//
// Simulation Library Files(s):
// 			
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 9.0 Build 129 02/04/2009 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2009 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//alt2gxb_reconfig CBX_AUTO_BLACKBOX="ALL" CHANNEL_ADDRESS_WIDTH=4 DEVICE_FAMILY="Stratix IV" ENABLE_BUF_CAL="TRUE" MIF_ADDRESS_WIDTH=6 NUMBER_OF_CHANNELS=16 NUMBER_OF_RECONFIG_PORTS=4 RECONFIG_FROMGXB_WIDTH=68 RECONFIG_TOGXB_WIDTH=4 busy channel_reconfig_done logical_channel_address reconfig_address_en reconfig_address_out reconfig_clk reconfig_data reconfig_fromgxb reconfig_mode_sel reconfig_togxb reset_reconfig_address write_all
//VERSION_BEGIN 9.0 cbx_alt2gxb_reconfig 2009:01:26:16:31:17:SJ cbx_alt_cal 2009:01:29:13:39:29:SJ cbx_alt_dprio 2008:07:22:18:38:30:SJ cbx_altsyncram 2008:11:06:10:05:41:SJ cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_lpm_add_sub 2008:12:09:22:11:50:SJ cbx_lpm_compare 2009:02:03:01:43:16:SJ cbx_lpm_counter 2008:05:19:10:42:20:SJ cbx_lpm_decode 2008:05:19:10:39:27:SJ cbx_lpm_mux 2008:05:19:10:30:36:SJ cbx_lpm_shiftreg 2008:05:19:10:27:41:SJ cbx_mgl 2009:01:29:16:12:07:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ cbx_stratixiii 2008:12:24:11:49:14:SJ cbx_util_mgl 2008:11:21:14:58:47:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//alt_dprio address_width=16 CBX_AUTO_BLACKBOX="ALL" device_family="Stratix IV" quad_address_width=7 address busy datain dataout dpclk dpriodisable dprioin dprioload dprioout quad_address rden status_out wren wren_data
//VERSION_BEGIN 9.0 cbx_alt_dprio 2008:07:22:18:38:30:SJ cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_lpm_add_sub 2008:12:09:22:11:50:SJ cbx_lpm_compare 2009:02:03:01:43:16:SJ cbx_lpm_counter 2008:05:19:10:42:20:SJ cbx_lpm_decode 2008:05:19:10:39:27:SJ cbx_lpm_shiftreg 2008:05:19:10:27:41:SJ cbx_mgl 2009:01:29:16:12:07:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ  VERSION_END

//synthesis_resources = lpm_compare 3 lpm_counter 1 lpm_decode 1 lut 1 reg 102 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to addr_shift_reg[31]} DPRIO_INTERFACE_REG=ON;{-to wr_out_data_shift_reg[31]} DPRIO_INTERFACE_REG=ON;{-to rd_out_data_shift_reg[13]} DPRIO_INTERFACE_REG=ON;{-to in_data_shift_reg[0]} DPRIO_INTERFACE_REG=ON;{-to startup_cntr[0]} DPRIO_INTERFACE_REG=ON;{-to startup_cntr[1]} DPRIO_INTERFACE_REG=ON;{-to startup_cntr[2]} DPRIO_INTERFACE_REG=ON"} *)
module  alt4gxb_gxb_reconfig_alt_dprio_ogk
	( 
	address,
	busy,
	datain,
	dataout,
	dpclk,
	dpriodisable,
	dprioin,
	dprioload,
	dprioout,
	quad_address,
	rden,
	status_out,
	wren,
	wren_data) /* synthesis synthesis_clearbox=2 */;
	input   [15:0]  address;
	output   busy;
	input   [15:0]  datain;
	output   [15:0]  dataout;
	input   dpclk;
	output   dpriodisable;
	output   dprioin;
	output   dprioload;
	input   dprioout;
	input   [6:0]  quad_address;
	input   rden;
	output   [3:0]  status_out;
	input   wren;
	input   wren_data;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [15:0]  datain;
	tri0   rden;
	tri0   wren;
	tri0   wren_data;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW"} *)
	reg	[31:0]	addr_shift_reg;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW"} *)
	reg	[15:0]	in_data_shift_reg;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW"} *)
	reg	[15:0]	rd_out_data_shift_reg;
	wire	[2:0]	wire_startup_cntr_d;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW"} *)
	reg	[2:0]	startup_cntr;
	wire	[2:0]	wire_startup_cntr_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[2:0]	state_mc_reg;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW"} *)
	reg	[31:0]	wr_out_data_shift_reg;
	wire  wire_pre_amble_cmpr_aeb;
	wire  wire_pre_amble_cmpr_agb;
	wire  wire_rd_data_output_cmpr_ageb;
	wire  wire_rd_data_output_cmpr_alb;
	wire  wire_state_mc_cmpr_aeb;
	wire  [5:0]   wire_state_mc_counter_q;
	wire  [7:0]   wire_state_mc_decode_eq;
	wire	wire_dprioin_mux_dataout;
	wire  busy_state;
	wire  idle_state;
	wire  rd_addr_done;
	wire  rd_addr_state;
	wire  rd_data_done;
	wire  rd_data_input_state;
	wire  rd_data_output_state;
	wire  rd_data_state;
	wire rdinc;
	wire  read_state;
	wire  s0_to_0;
	wire  s0_to_1;
	wire  s1_to_0;
	wire  s1_to_1;
	wire  s2_to_0;
	wire  s2_to_1;
	wire  startup_done;
	wire  startup_idle;
	wire  wr_addr_done;
	wire  wr_addr_state;
	wire  wr_data_done;
	wire  wr_data_state;
	wire  write_state;

	// synopsys translate_off
	initial
		addr_shift_reg = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_pre_amble_cmpr_aeb == 1'b1) addr_shift_reg <= {{2{{2{1'b0}}}}, {3{1'b0}}, quad_address, 2'b10, address};
			else  addr_shift_reg <= {addr_shift_reg[30:0], 1'b0};
	// synopsys translate_off
	initial
		in_data_shift_reg = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		if (rd_data_input_state == 1'b1)   in_data_shift_reg <= {in_data_shift_reg[14:0], dprioout};
	// synopsys translate_off
	initial
		rd_out_data_shift_reg = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_pre_amble_cmpr_aeb == 1'b1) rd_out_data_shift_reg <= {{2{1'b0}}, {2{1'b1}}, {3{1'b0}}, quad_address, 2'b10};
			else  rd_out_data_shift_reg <= {rd_out_data_shift_reg[14:0], 1'b0};
	// synopsys translate_off
	initial
		startup_cntr[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		if (wire_startup_cntr_ena[0:0] == 1'b1)   startup_cntr[0:0] <= wire_startup_cntr_d[0:0];
	// synopsys translate_off
	initial
		startup_cntr[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		if (wire_startup_cntr_ena[1:1] == 1'b1)   startup_cntr[1:1] <= wire_startup_cntr_d[1:1];
	// synopsys translate_off
	initial
		startup_cntr[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		if (wire_startup_cntr_ena[2:2] == 1'b1)   startup_cntr[2:2] <= wire_startup_cntr_d[2:2];
	assign
		wire_startup_cntr_d = {(startup_cntr[2] ^ (startup_cntr[1] & startup_cntr[0])), (startup_cntr[0] ^ startup_cntr[1]), (~ startup_cntr[0])};
	assign
		wire_startup_cntr_ena = {3{((((rden | wren) | rdinc) | (~ startup_idle)) & (~ startup_done))}};
	// synopsys translate_off
	initial
		state_mc_reg = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		  state_mc_reg <= {(s2_to_1 | (((~ s2_to_0) & (~ s2_to_1)) & state_mc_reg[2])), (s1_to_1 | (((~ s1_to_0) & (~ s1_to_1)) & state_mc_reg[1])), (s0_to_1 | (((~ s0_to_0) & (~ s0_to_1)) & state_mc_reg[0]))};
	// synopsys translate_off
	initial
		wr_out_data_shift_reg = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_pre_amble_cmpr_aeb == 1'b1) wr_out_data_shift_reg <= {{2{1'b0}}, 2'b01, {3{1'b0}}, quad_address, 2'b10, datain};
			else  wr_out_data_shift_reg <= {wr_out_data_shift_reg[30:0], 1'b0};
	lpm_compare   pre_amble_cmpr
	( 
	.aeb(wire_pre_amble_cmpr_aeb),
	.agb(wire_pre_amble_cmpr_agb),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_state_mc_counter_q),
	.datab(6'b011111)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		pre_amble_cmpr.lpm_width = 6,
		pre_amble_cmpr.lpm_type = "lpm_compare";
	lpm_compare   rd_data_output_cmpr
	( 
	.aeb(),
	.agb(),
	.ageb(wire_rd_data_output_cmpr_ageb),
	.alb(wire_rd_data_output_cmpr_alb),
	.aleb(),
	.aneb(),
	.dataa(wire_state_mc_counter_q),
	.datab(6'b110000)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		rd_data_output_cmpr.lpm_width = 6,
		rd_data_output_cmpr.lpm_type = "lpm_compare";
	lpm_compare   state_mc_cmpr
	( 
	.aeb(wire_state_mc_cmpr_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_state_mc_counter_q),
	.datab({6{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		state_mc_cmpr.lpm_width = 6,
		state_mc_cmpr.lpm_type = "lpm_compare";
	lpm_counter   state_mc_counter
	( 
	.clock(dpclk),
	.cnt_en((write_state | read_state)),
	.cout(),
	.eq(),
	.q(wire_state_mc_counter_q)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.aload(1'b0),
	.aset(1'b0),
	.cin(1'b1),
	.clk_en(1'b1),
	.data({6{1'b0}}),
	.sclr(1'b0),
	.sload(1'b0),
	.sset(1'b0),
	.updown(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		state_mc_counter.lpm_port_updown = "PORT_UNUSED",
		state_mc_counter.lpm_width = 6,
		state_mc_counter.lpm_type = "lpm_counter";
	lpm_decode   state_mc_decode
	( 
	.data(state_mc_reg),
	.eq(wire_state_mc_decode_eq)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0),
	.enable(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		state_mc_decode.lpm_decodes = 8,
		state_mc_decode.lpm_width = 3,
		state_mc_decode.lpm_type = "lpm_decode";
	or(wire_dprioin_mux_dataout, ((((((wr_addr_state | rd_addr_state) & addr_shift_reg[31]) & wire_pre_amble_cmpr_agb) | ((~ wire_pre_amble_cmpr_agb) & (wr_addr_state | rd_addr_state))) | (((wr_data_state & wr_out_data_shift_reg[31]) & wire_pre_amble_cmpr_agb) | ((~ wire_pre_amble_cmpr_agb) & wr_data_state))) | (((rd_data_output_state & rd_out_data_shift_reg[15]) & wire_pre_amble_cmpr_agb) | ((~ wire_pre_amble_cmpr_agb) & rd_data_output_state))), ~(((write_state | rd_addr_state) | rd_data_output_state)));
	assign
		busy = busy_state,
		busy_state = (write_state | read_state),
		dataout = in_data_shift_reg,
		dpriodisable = (~ (startup_cntr[2] & (startup_cntr[0] | startup_cntr[1]))),
		dprioin = wire_dprioin_mux_dataout,
		dprioload = (~ ((startup_cntr[0] ^ startup_cntr[1]) & (~ startup_cntr[2]))),
		idle_state = wire_state_mc_decode_eq[0],
		rd_addr_done = (rd_addr_state & wire_state_mc_cmpr_aeb),
		rd_addr_state = (wire_state_mc_decode_eq[5] & startup_done),
		rd_data_done = (rd_data_state & wire_state_mc_cmpr_aeb),
		rd_data_input_state = (wire_rd_data_output_cmpr_ageb & rd_data_state),
		rd_data_output_state = (wire_rd_data_output_cmpr_alb & rd_data_state),
		rd_data_state = (wire_state_mc_decode_eq[7] & startup_done),
		rdinc = 1'b0,
		read_state = (rd_addr_state | rd_data_state),
		s0_to_0 = ((wr_data_state & wr_data_done) | (rd_data_state & rd_data_done)),
		s0_to_1 = (((idle_state & (wren | ((~ wren) & ((rden | rdinc) | wren_data)))) | (wr_addr_state & wr_addr_done)) | (rd_addr_state & rd_addr_done)),
		s1_to_0 = (((wr_data_state & wr_data_done) | (rd_data_state & rd_data_done)) | (idle_state & (wren | (((~ wren) & (~ wren_data)) & rden)))),
		s1_to_1 = (((idle_state & ((~ wren) & (rdinc | wren_data))) | (wr_addr_state & wr_addr_done)) | (rd_addr_state & rd_addr_done)),
		s2_to_0 = ((((wr_addr_state & wr_addr_done) | (wr_data_state & wr_data_done)) | (rd_data_state & rd_data_done)) | (idle_state & (wren | wren_data))),
		s2_to_1 = ((idle_state & (((~ wren) & (~ wren_data)) & (rdinc | rden))) | (rd_addr_state & rd_addr_done)),
		startup_done = ((startup_cntr[2] & (~ startup_cntr[0])) & startup_cntr[1]),
		startup_idle = ((~ startup_cntr[0]) & (~ (startup_cntr[2] ^ startup_cntr[1]))),
		status_out = {rd_data_done, rd_addr_done, wr_data_done, wr_addr_done},
		wr_addr_done = (wr_addr_state & wire_state_mc_cmpr_aeb),
		wr_addr_state = (wire_state_mc_decode_eq[1] & startup_done),
		wr_data_done = (wr_data_state & wire_state_mc_cmpr_aeb),
		wr_data_state = (wire_state_mc_decode_eq[3] & startup_done),
		write_state = (wr_addr_state | wr_data_state);
endmodule //alt4gxb_gxb_reconfig_alt_dprio_ogk

//synthesis_resources = alt_cal 1 lpm_compare 11 lpm_counter 4 lpm_decode 3 lpm_mux 5 lut 2 reg 180 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to address_pres_reg[9]} DPRIO_CHANNEL_NUM=9;{-to address_pres_reg[8]} DPRIO_CHANNEL_NUM=8;{-to address_pres_reg[7]} DPRIO_CHANNEL_NUM=7;{-to address_pres_reg[6]} DPRIO_CHANNEL_NUM=6;{-to address_pres_reg[5]} DPRIO_CHANNEL_NUM=5;{-to address_pres_reg[4]} DPRIO_CHANNEL_NUM=4;{-to address_pres_reg[3]} DPRIO_CHANNEL_NUM=3;{-to address_pres_reg[2]} DPRIO_CHANNEL_NUM=2;{-to address_pres_reg[1]} DPRIO_CHANNEL_NUM=1;{-to address_pres_reg[0]} DPRIO_CHANNEL_NUM=0;{-to cru_num_reg[3]} DPRIO_CRUCLK_NUM=3;{-to cru_num_reg[2]} DPRIO_CRUCLK_NUM=2;{-to cru_num_reg[1]} DPRIO_CRUCLK_NUM=1;{-to cru_num_reg[0]} DPRIO_CRUCLK_NUM=0;{-to tx_pll_inclk_reg[3]} DPRIO_TX_PLL0_REFCLK_NUM=3;{-to tx_pll_inclk_reg[2]} DPRIO_TX_PLL0_REFCLK_NUM=2;{-to tx_pll_inclk_reg[1]} DPRIO_TX_PLL0_REFCLK_NUM=1;{-to tx_pll_inclk_reg[0]} DPRIO_TX_PLL0_REFCLK_NUM=0;{-to tx_cmu_sel[2]}  DPRIO_TX_PLL_NUM=2;{-to tx_cmu_sel[1]}  DPRIO_TX_PLL_NUM=1;{-to le7} IMPLEMENT_AS_CLOCK_ENABLE = ON;{-to tx_cmu_sel[0]}  DPRIO_TX_PLL_NUM=0"} *)
module  alt4gxb_gxb_reconfig_alt2gxb_reconfig_ao91
	( 
	busy,
	channel_reconfig_done,
	logical_channel_address,
	reconfig_address_en,
	reconfig_address_out,
	reconfig_clk,
	reconfig_data,
	reconfig_fromgxb,
	reconfig_mode_sel,
	reconfig_togxb,
	reset_reconfig_address,
	write_all) /* synthesis synthesis_clearbox=2 */;
	output   busy;
	output   channel_reconfig_done;
	input   [3:0]  logical_channel_address;
	output   reconfig_address_en;
	output   [5:0]  reconfig_address_out;
	input   reconfig_clk;
	input   [15:0]  reconfig_data;
	input   [67:0]  reconfig_fromgxb;
	input   [2:0]  reconfig_mode_sel;
	output   [3:0]  reconfig_togxb;
	input   reset_reconfig_address;
	input   write_all;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [3:0]  logical_channel_address;
	tri0   [15:0]  reconfig_data;
	tri0   [2:0]  reconfig_mode_sel;
	tri0   reset_reconfig_address;
	tri0   write_all;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_calibration_busy;
	wire  [15:0]   wire_calibration_dprio_addr;
	wire  [15:0]   wire_calibration_dprio_dataout;
	wire  wire_calibration_dprio_rden;
	wire  wire_calibration_dprio_wren;
	wire  [0:0]   wire_calibration_retain_addr;
	wire  wire_dprio_busy;
	wire  [15:0]   wire_dprio_dataout;
	wire  wire_dprio_dpriodisable;
	wire  wire_dprio_dprioin;
	wire  wire_dprio_dprioload;
	wire  [3:0]   wire_dprio_status_out;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON"} *)
	reg	[9:0]	address_pres_reg;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW"} *)
	reg	[3:0]	cru_num_reg;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	delay_mif_head;
	wire	wire_delay_mif_head_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	delay_second_mif_head;
	wire	wire_delay_second_mif_head_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	disable_clr_offset_1_reg;
	wire	wire_disable_clr_offset_1_reg_clrn;
	wire	wire_disable_clr_offset_1_reg_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	disable_clr_offset_2_reg;
	wire	wire_disable_clr_offset_2_reg_clrn;
	wire	wire_disable_clr_offset_2_reg_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	disable_clr_offset_3_reg;
	wire	wire_disable_clr_offset_3_reg_clrn;
	wire	wire_disable_clr_offset_3_reg_ena;
	wire	[15:0]	wire_dprio_dataout_reg_d;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[15:0]	dprio_dataout_reg;
	wire	[15:0]	wire_dprio_dataout_reg_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dprio_pulse_reg;
	wire	wire_dprio_pulse_reg_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	end_mif_reg;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	is_adce_reg;
	wire	wire_is_adce_reg_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	is_pma_cent_reg;
	reg	load_offset_reg;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	logical_pll_num_reg;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	mif_stage;
	wire	wire_mif_stage_sclr;
	wire	[4:0]	wire_mif_type_reg_d;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[4:0]	mif_type_reg;
	wire	[4:0]	wire_mif_type_reg_ena;
	wire	[4:0]	wire_mif_type_reg_sclr;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[2:0]	reconf_mode_sel_reg;
	wire	[2:0]	wire_reconf_mode_sel_reg_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[15:0]	reconfig_data_reg;
	wire	[15:0]	wire_reconfig_data_reg_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	reconfig_done_reg;
	wire	wire_reconfig_done_reg_ena;
	reg	reset_reconf_addr_reg;
	wire	wire_reset_reconf_addr_reg_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[0:0]	state_mc_reg;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW"} *)
	reg	[2:0]	tx_cmu_sel;
	wire	[3:0]	wire_tx_pll_inclk_reg_d;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW"} *)
	reg	[3:0]	tx_pll_inclk_reg;
	wire	[3:0]	wire_tx_pll_inclk_reg_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	wr_addr_inc_reg;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	wr_rd_pulse_reg;
	wire	wire_wr_rd_pulse_reg_ena;
	wire	wire_wr_rd_pulse_reg_sclr;
	wire  wire_le7_out;
	wire  wire_dprio_addr_offset_cmpr_aeb;
	wire  wire_is_cmu_refsel_idx_aeb;
	wire  wire_is_cru_idx0_aeb;
	wire  wire_is_rcxpat_chnl_en_ch_word_aeb;
	wire  wire_is_second_mif_header_address_aeb;
	wire  wire_is_special_address_aeb;
	wire  wire_is_tx_pma_pll_sel_idx_aeb;
	wire  wire_is_tx_pma_w6_cmp_aeb;
	wire  [3:0]   wire_addr_cntr_q;
	wire  [4:0]   wire_dprio_addr_offset_cnt_q;
	wire  [5:0]   wire_mif_addr_cntr_q;
	wire  [15:0]   wire_chl_addr_decode_eq;
	wire  [7:0]   wire_reconf_mode_dec_eq;
	wire  [0:0]   wire_aeq_ch_done_mux_result;
	wire  [0:0]   wire_dprioout_mux_result;
	wire  [4:0]   wire_max_word_per_mif_type_result;
	wire  [4:0]   wire_max_word_per_rx_pma_result;
	wire  [5:0]   wire_pll_first_word_mux_result;
	wire  [15:0]  a2gr_dprio_addr;
	wire  [15:0]  a2gr_dprio_data;
	wire  a2gr_dprio_rden;
	wire  a2gr_dprio_wren;
	wire  adce_busy_state;
	wire  adce_state;
	wire  [15:0]  aeq_ch_done;
	wire  busy_state;
	wire  cal_busy;
	wire  [3:0]  cal_dprioout_wire;
	wire  [63:0]  cal_testbuses;
	wire  [4:0]  cent_clk_div_max;
	wire  [4:0]  cent_clk_div_offset;
	wire  [1:0]  channel_address;
	wire  [1:0]  channel_address_out;
	wire  chl_addr_inc;
	wire  clr_offset;
	wire  [4:0]  cmu_max;
	wire  [4:0]  cmu_offset;
	wire  [15:0]  cruclk_mux_data;
	wire  delay_mif_head_out;
	wire  delay_second_mif_head_out;
	wire  disable_rx_pma_w0_offset_clr;
	wire  [4:0]  dprio_addr_offset_cnt_out;
	wire  [15:0]  dprio_datain;
	wire  [15:0]  dprio_datain_64_67;
	wire  [15:0]  dprio_datain_68_6B;
	wire  [15:0]  dprio_datain_7c_7f;
	wire  [15:0]  dprio_datain_7c_7f_inv;
	wire  [15:0]  dprio_datain_preemp1t;
	wire  [15:0]  dprio_datain_vodctrl;
	wire  dprio_pulse;
	wire  dprio_wr_done;
	wire  [5:0]  duplex_pma_first_pll;
	wire  [5:0]  duplex_pma_pcs_first_pll;
	wire  en_mif_addr_cntr;
	wire  en_write_trigger;
	wire  header_proc;
	wire  idle_state;
	wire  internal_write_pulse;
	wire  is_adce;
	wire  is_adce_all_control;
	wire  is_adce_mif;
	wire  is_adce_single_control;
	wire  is_analog_control;
	wire  is_cent_clk_div;
	wire  is_channel_reconfig;
	wire  is_cmu;
	wire  is_cmu_refsel;
	wire  is_cruclk_addr0;
	wire  is_end_mif;
	wire  is_illegal_reg_d;
	wire  is_illegal_reg_out;
	wire  is_mif_header;
	wire  is_mif_stage;
	wire  is_offset_end;
	wire  is_pll_end_mif;
	wire  is_pll_first_word;
	wire  is_pll_reconfig;
	wire  is_pll_reset_stage;
	wire  is_pma_mif_type;
	wire  is_rcxpat_chnl_en_ch;
	wire  is_rx_mif_type;
	wire  is_rx_pcs;
	wire  is_rx_pma;
	wire  is_second_mif_header;
	wire  is_tier_1;
	wire  is_tier_2;
	wire  is_tx_local_div_ctrl;
	wire  is_tx_pcs;
	wire  is_tx_pma;
	wire  is_tx_pma_pll_sel;
	wire  is_tx_pma_w6;
	wire  load_mif_header;
	wire  load_offset;
	wire  local_ch_dec;
	wire  [15:0]  merged_dprioin;
	wire  mif_reconfig_done;
	wire  pll_address;
	wire  [5:0]  pll_first_word_addr;
	wire  [1:0]  pll_sel_num;
	wire  [6:0]  quad_address;
	wire  [6:0]  quad_address_out;
	wire  rd_pulse;
	wire read;
	wire  [15:0]  read_address;
	wire  [15:0]  read_reconfig_addr;
	wire  read_state;
	wire  reconf_done_reg_out;
	wire  [15:0]  reconfig_datain;
	wire  reset_addr_done;
	wire  reset_reconf_addr;
	wire  reset_system;
	wire  [4:0]  rx_pcs_max;
	wire  [4:0]  rx_pma_adce_max;
	wire  [4:0]  rx_pma_max;
	wire  rx_reconfig;
	wire  s0_to_0;
	wire  s0_to_1;
	wire  s0_to_2;
	wire  s2_to_0;
	wire  [0:0]  state_mc_reg_in;
	wire  [4:0]  tx_pcs_max;
	wire  [2:0]  tx_pll_sel_wire;
	wire  [5:0]  tx_pma_first_pll;
	wire  [4:0]  tx_pma_max;
	wire  [5:0]  tx_pma_pcs_first_pll;
	wire  [15:0]  tx_pma_pll_select_data;
	wire  tx_reconfig;
	wire  [8:0]  w600w;
	wire  wr_pulse;
	wire  write_addr_inc;
	wire  [15:0]  write_address;
	wire  write_all_int;
	wire  write_done;
	wire  write_happened;
	wire  write_mif_word_done;
	wire  [15:0]  write_reconfig_addr;
	wire  write_skip;
	wire  write_state;
	wire  write_word_64_67_data_valid;
	wire  write_word_68_6B_data_valid;
	wire  write_word_7c_7f_data_valid;
	wire  write_word_7c_7f_inv_data_valid;
	wire  write_word_done;
	wire  write_word_preemp1t_data_valid;
	wire  write_word_vodctrl_data_valid;

	alt_cal   calibration
	( 
	.busy(wire_calibration_busy),
	.cal_error(),
	.clock(reconfig_clk),
	.dprio_addr(wire_calibration_dprio_addr),
	.dprio_busy(wire_dprio_busy),
	.dprio_datain(wire_dprio_dataout),
	.dprio_dataout(wire_calibration_dprio_dataout),
	.dprio_rden(wire_calibration_dprio_rden),
	.dprio_wren(wire_calibration_dprio_wren),
	.quad_addr(),
	.remap_addr(address_pres_reg),
	.reset(reset_reconfig_address),
	.retain_addr(wire_calibration_retain_addr),
	.testbuses(cal_testbuses)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.start(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		calibration.channel_address_width = 4,
		calibration.number_of_channels = 16,
		calibration.sim_model_mode = "FALSE",
		calibration.lpm_type = "alt_cal";
	alt4gxb_gxb_reconfig_alt_dprio_ogk   dprio
	( 
	.address((({16{wire_calibration_busy}} & wire_calibration_dprio_addr) | ({16{(~ wire_calibration_busy)}} & a2gr_dprio_addr))),
	.busy(wire_dprio_busy),
	.datain((({16{wire_calibration_busy}} & wire_calibration_dprio_dataout) | ({16{(~ wire_calibration_busy)}} & a2gr_dprio_data))),
	.dataout(wire_dprio_dataout),
	.dpclk(reconfig_clk),
	.dpriodisable(wire_dprio_dpriodisable),
	.dprioin(wire_dprio_dprioin),
	.dprioload(wire_dprio_dprioload),
	.dprioout(wire_dprioout_mux_result),
	.quad_address(quad_address_out),
	.rden(((wire_calibration_busy & wire_calibration_dprio_rden) | ((~ wire_calibration_busy) & a2gr_dprio_rden))),
	.status_out(wire_dprio_status_out),
	.wren(((wire_calibration_busy & wire_calibration_dprio_wren) | ((~ wire_calibration_busy) & a2gr_dprio_wren))),
	.wren_data(wire_calibration_retain_addr));
	// synopsys translate_off
	initial
		address_pres_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		  address_pres_reg <= {quad_address, pll_address, ((channel_address & {2{(~ pll_address)}}) | (pll_sel_num & {2{pll_address}}))};
	// synopsys translate_off
	initial
		cru_num_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (load_mif_header == 1'b1)   cru_num_reg <= reconfig_data_reg[6:3];
	// synopsys translate_off
	initial
		delay_mif_head = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_delay_mif_head_ena == 1'b1)   delay_mif_head <= (is_mif_header & is_tier_1);
	assign
		wire_delay_mif_head_ena = ((((write_state & (~ reconf_done_reg_out)) & (~ write_mif_word_done)) & (~ reset_reconf_addr)) & (~ reset_system));
	// synopsys translate_off
	initial
		delay_second_mif_head = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_delay_second_mif_head_ena == 1'b1)   delay_second_mif_head <= (is_second_mif_header & (~ write_done));
	assign
		wire_delay_second_mif_head_ena = ((((write_state & (~ write_mif_word_done)) & (~ reset_reconf_addr)) & (~ reset_system)) & is_tier_1);
	// synopsys translate_off
	initial
		disable_clr_offset_1_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  negedge wire_disable_clr_offset_1_reg_clrn)
		if (wire_disable_clr_offset_1_reg_clrn == 1'b0) disable_clr_offset_1_reg <= 1'b0;
		else if  (wire_disable_clr_offset_1_reg_ena == 1'b1)   disable_clr_offset_1_reg <= (is_cruclk_addr0 & is_rx_pma);
	assign
		wire_disable_clr_offset_1_reg_ena = (is_rx_pma & (~ disable_clr_offset_1_reg)),
		wire_disable_clr_offset_1_reg_clrn = (~ (mif_reconfig_done | reset_addr_done));
	// synopsys translate_off
	initial
		disable_clr_offset_2_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  negedge wire_disable_clr_offset_2_reg_clrn)
		if (wire_disable_clr_offset_2_reg_clrn == 1'b0) disable_clr_offset_2_reg <= 1'b0;
		else if  (wire_disable_clr_offset_2_reg_ena == 1'b1)   disable_clr_offset_2_reg <= ((disable_clr_offset_1_reg & write_mif_word_done) & is_rx_pma);
	assign
		wire_disable_clr_offset_2_reg_ena = (is_rx_pma & (~ disable_clr_offset_2_reg)),
		wire_disable_clr_offset_2_reg_clrn = (~ (mif_reconfig_done | reset_addr_done));
	// synopsys translate_off
	initial
		disable_clr_offset_3_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  negedge wire_disable_clr_offset_3_reg_clrn)
		if (wire_disable_clr_offset_3_reg_clrn == 1'b0) disable_clr_offset_3_reg <= 1'b0;
		else if  (wire_disable_clr_offset_3_reg_ena == 1'b1)   disable_clr_offset_3_reg <= ((disable_clr_offset_2_reg & write_mif_word_done) & is_rx_pma);
	assign
		wire_disable_clr_offset_3_reg_ena = (is_rx_pma & (~ disable_clr_offset_3_reg)),
		wire_disable_clr_offset_3_reg_clrn = (~ (mif_reconfig_done | reset_addr_done));
	// synopsys translate_off
	initial
		dprio_dataout_reg[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[0:0] == 1'b1)   dprio_dataout_reg[0:0] <= wire_dprio_dataout_reg_d[0:0];
	// synopsys translate_off
	initial
		dprio_dataout_reg[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[1:1] == 1'b1)   dprio_dataout_reg[1:1] <= wire_dprio_dataout_reg_d[1:1];
	// synopsys translate_off
	initial
		dprio_dataout_reg[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[2:2] == 1'b1)   dprio_dataout_reg[2:2] <= wire_dprio_dataout_reg_d[2:2];
	// synopsys translate_off
	initial
		dprio_dataout_reg[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[3:3] == 1'b1)   dprio_dataout_reg[3:3] <= wire_dprio_dataout_reg_d[3:3];
	// synopsys translate_off
	initial
		dprio_dataout_reg[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[4:4] == 1'b1)   dprio_dataout_reg[4:4] <= wire_dprio_dataout_reg_d[4:4];
	// synopsys translate_off
	initial
		dprio_dataout_reg[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[5:5] == 1'b1)   dprio_dataout_reg[5:5] <= wire_dprio_dataout_reg_d[5:5];
	// synopsys translate_off
	initial
		dprio_dataout_reg[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[6:6] == 1'b1)   dprio_dataout_reg[6:6] <= wire_dprio_dataout_reg_d[6:6];
	// synopsys translate_off
	initial
		dprio_dataout_reg[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[7:7] == 1'b1)   dprio_dataout_reg[7:7] <= wire_dprio_dataout_reg_d[7:7];
	// synopsys translate_off
	initial
		dprio_dataout_reg[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[8:8] == 1'b1)   dprio_dataout_reg[8:8] <= wire_dprio_dataout_reg_d[8:8];
	// synopsys translate_off
	initial
		dprio_dataout_reg[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[9:9] == 1'b1)   dprio_dataout_reg[9:9] <= wire_dprio_dataout_reg_d[9:9];
	// synopsys translate_off
	initial
		dprio_dataout_reg[10:10] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[10:10] == 1'b1)   dprio_dataout_reg[10:10] <= wire_dprio_dataout_reg_d[10:10];
	// synopsys translate_off
	initial
		dprio_dataout_reg[11:11] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[11:11] == 1'b1)   dprio_dataout_reg[11:11] <= wire_dprio_dataout_reg_d[11:11];
	// synopsys translate_off
	initial
		dprio_dataout_reg[12:12] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[12:12] == 1'b1)   dprio_dataout_reg[12:12] <= wire_dprio_dataout_reg_d[12:12];
	// synopsys translate_off
	initial
		dprio_dataout_reg[13:13] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[13:13] == 1'b1)   dprio_dataout_reg[13:13] <= wire_dprio_dataout_reg_d[13:13];
	// synopsys translate_off
	initial
		dprio_dataout_reg[14:14] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[14:14] == 1'b1)   dprio_dataout_reg[14:14] <= wire_dprio_dataout_reg_d[14:14];
	// synopsys translate_off
	initial
		dprio_dataout_reg[15:15] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[15:15] == 1'b1)   dprio_dataout_reg[15:15] <= wire_dprio_dataout_reg_d[15:15];
	assign
		wire_dprio_dataout_reg_d = {wire_dprio_dataout[15:0]};
	assign
		wire_dprio_dataout_reg_ena = {16{(dprio_pulse & (~ idle_state))}};
	// synopsys translate_off
	initial
		dprio_pulse_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_pulse_reg_ena == 1'b1)   dprio_pulse_reg <= wire_dprio_busy;
	assign
		wire_dprio_pulse_reg_ena = (read_state | write_state);
	// synopsys translate_off
	initial
		end_mif_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (is_tier_1 == 1'b1)   end_mif_reg <= mif_reconfig_done;
	// synopsys translate_off
	initial
		is_adce_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_is_adce_reg_ena == 1'b1)   is_adce_reg <= ((reconfig_data_reg[15] & (~ clr_offset)) | (clr_offset & is_adce_reg));
	assign
		wire_is_adce_reg_ena = (delay_second_mif_head_out | clr_offset);
	// synopsys translate_off
	initial
		is_pma_cent_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reset_addr_done)
		if (reset_addr_done == 1'b1) is_pma_cent_reg <= 1'b0;
		else if  (clr_offset == 1'b1)   is_pma_cent_reg <= (is_cmu & (~ is_cent_clk_div));
	// synopsys translate_off
	initial
		load_offset_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (is_tier_1 == 1'b1)   load_offset_reg <= clr_offset;
	// synopsys translate_off
	initial
		logical_pll_num_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (is_mif_header == 1'b1)   logical_pll_num_reg <= reconfig_data_reg[0];
	// synopsys translate_off
	initial
		mif_stage = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (is_tier_1 == 1'b1) 
			if (wire_mif_stage_sclr == 1'b1) mif_stage <= 1'b0;
			else  mif_stage <= (((~ mif_stage) & (is_mif_header | mif_reconfig_done)) | ((~ ((is_mif_header | mif_reconfig_done) & dprio_pulse)) & mif_stage));
	assign
		wire_mif_stage_sclr = (reset_system | is_illegal_reg_out);
	// synopsys translate_off
	initial
		mif_type_reg[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_mif_type_reg_ena[0:0] == 1'b1) 
			if (wire_mif_type_reg_sclr[0:0] == 1'b1) mif_type_reg[0:0] <= 1'b0;
			else  mif_type_reg[0:0] <= wire_mif_type_reg_d[0:0];
	// synopsys translate_off
	initial
		mif_type_reg[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_mif_type_reg_ena[1:1] == 1'b1) 
			if (wire_mif_type_reg_sclr[1:1] == 1'b1) mif_type_reg[1:1] <= 1'b0;
			else  mif_type_reg[1:1] <= wire_mif_type_reg_d[1:1];
	// synopsys translate_off
	initial
		mif_type_reg[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_mif_type_reg_ena[2:2] == 1'b1) 
			if (wire_mif_type_reg_sclr[2:2] == 1'b1) mif_type_reg[2:2] <= 1'b0;
			else  mif_type_reg[2:2] <= wire_mif_type_reg_d[2:2];
	// synopsys translate_off
	initial
		mif_type_reg[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_mif_type_reg_ena[3:3] == 1'b1) 
			if (wire_mif_type_reg_sclr[3:3] == 1'b1) mif_type_reg[3:3] <= 1'b0;
			else  mif_type_reg[3:3] <= wire_mif_type_reg_d[3:3];
	// synopsys translate_off
	initial
		mif_type_reg[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_mif_type_reg_ena[4:4] == 1'b1) 
			if (wire_mif_type_reg_sclr[4:4] == 1'b1) mif_type_reg[4:4] <= 1'b0;
			else  mif_type_reg[4:4] <= wire_mif_type_reg_d[4:4];
	assign
		wire_mif_type_reg_d = ((reconfig_data_reg[15:11] & {5{(~ clr_offset)}}) | ({5{clr_offset}} & mif_type_reg));
	assign
		wire_mif_type_reg_ena = {5{(load_mif_header | clr_offset)}},
		wire_mif_type_reg_sclr = {(((~ load_mif_header) & clr_offset) & is_tx_pcs), (((~ load_mif_header) & clr_offset) & is_rx_pcs), (((~ load_mif_header) & clr_offset) & is_tx_pma), (((~ load_mif_header) & clr_offset) & is_rx_pma), ((((~ load_mif_header) & clr_offset) & is_cmu) & is_cent_clk_div)};
	// synopsys translate_off
	initial
		reconf_mode_sel_reg[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconf_mode_sel_reg_ena[0:0] == 1'b1)   reconf_mode_sel_reg[0:0] <= reconfig_mode_sel[0:0];
	// synopsys translate_off
	initial
		reconf_mode_sel_reg[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconf_mode_sel_reg_ena[1:1] == 1'b1)   reconf_mode_sel_reg[1:1] <= reconfig_mode_sel[1:1];
	// synopsys translate_off
	initial
		reconf_mode_sel_reg[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconf_mode_sel_reg_ena[2:2] == 1'b1)   reconf_mode_sel_reg[2:2] <= reconfig_mode_sel[2:2];
	assign
		wire_reconf_mode_sel_reg_ena = {3{(idle_state & (~ mif_stage))}};
	// synopsys translate_off
	initial
		reconfig_data_reg[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[0:0] == 1'b1)   reconfig_data_reg[0:0] <= reconfig_data[0:0];
	// synopsys translate_off
	initial
		reconfig_data_reg[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[1:1] == 1'b1)   reconfig_data_reg[1:1] <= reconfig_data[1:1];
	// synopsys translate_off
	initial
		reconfig_data_reg[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[2:2] == 1'b1)   reconfig_data_reg[2:2] <= reconfig_data[2:2];
	// synopsys translate_off
	initial
		reconfig_data_reg[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[3:3] == 1'b1)   reconfig_data_reg[3:3] <= reconfig_data[3:3];
	// synopsys translate_off
	initial
		reconfig_data_reg[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[4:4] == 1'b1)   reconfig_data_reg[4:4] <= reconfig_data[4:4];
	// synopsys translate_off
	initial
		reconfig_data_reg[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[5:5] == 1'b1)   reconfig_data_reg[5:5] <= reconfig_data[5:5];
	// synopsys translate_off
	initial
		reconfig_data_reg[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[6:6] == 1'b1)   reconfig_data_reg[6:6] <= reconfig_data[6:6];
	// synopsys translate_off
	initial
		reconfig_data_reg[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[7:7] == 1'b1)   reconfig_data_reg[7:7] <= reconfig_data[7:7];
	// synopsys translate_off
	initial
		reconfig_data_reg[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[8:8] == 1'b1)   reconfig_data_reg[8:8] <= reconfig_data[8:8];
	// synopsys translate_off
	initial
		reconfig_data_reg[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[9:9] == 1'b1)   reconfig_data_reg[9:9] <= reconfig_data[9:9];
	// synopsys translate_off
	initial
		reconfig_data_reg[10:10] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[10:10] == 1'b1)   reconfig_data_reg[10:10] <= reconfig_data[10:10];
	// synopsys translate_off
	initial
		reconfig_data_reg[11:11] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[11:11] == 1'b1)   reconfig_data_reg[11:11] <= reconfig_data[11:11];
	// synopsys translate_off
	initial
		reconfig_data_reg[12:12] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[12:12] == 1'b1)   reconfig_data_reg[12:12] <= reconfig_data[12:12];
	// synopsys translate_off
	initial
		reconfig_data_reg[13:13] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[13:13] == 1'b1)   reconfig_data_reg[13:13] <= reconfig_data[13:13];
	// synopsys translate_off
	initial
		reconfig_data_reg[14:14] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[14:14] == 1'b1)   reconfig_data_reg[14:14] <= reconfig_data[14:14];
	// synopsys translate_off
	initial
		reconfig_data_reg[15:15] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[15:15] == 1'b1)   reconfig_data_reg[15:15] <= reconfig_data[15:15];
	assign
		wire_reconfig_data_reg_ena = {16{(idle_state & write_all)}};
	// synopsys translate_off
	initial
		reconfig_done_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_done_reg_ena == 1'b1) 
			if (reset_system == 1'b1) reconfig_done_reg <= 1'b0;
			else  reconfig_done_reg <= (((mif_reconfig_done & is_tier_1) & (~ reconfig_done_reg)) | (reconfig_done_reg & (((is_mif_header & (~ write_state)) & is_tier_1) | (~ is_tier_1))));
	assign
		wire_reconfig_done_reg_ena = (is_mif_stage | (idle_state & (~ is_mif_stage)));
	// synopsys translate_off
	initial
		reset_reconf_addr_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reset_reconf_addr_reg_ena == 1'b1)   reset_reconf_addr_reg <= (((~ reset_reconf_addr_reg) & reset_reconfig_address) | (reset_reconf_addr_reg & (~ reset_addr_done)));
	assign
		wire_reset_reconf_addr_reg_ena = (idle_state & is_tier_1);
	// synopsys translate_off
	initial
		state_mc_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		  state_mc_reg <= state_mc_reg_in;
	// synopsys translate_off
	initial
		tx_cmu_sel = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_le7_out == 1'b1)   tx_cmu_sel <= reconfig_data_reg[2:0];
	// synopsys translate_off
	initial
		tx_pll_inclk_reg[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_tx_pll_inclk_reg_ena[0:0] == 1'b1)   tx_pll_inclk_reg[0:0] <= wire_tx_pll_inclk_reg_d[0:0];
	// synopsys translate_off
	initial
		tx_pll_inclk_reg[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_tx_pll_inclk_reg_ena[1:1] == 1'b1)   tx_pll_inclk_reg[1:1] <= wire_tx_pll_inclk_reg_d[1:1];
	// synopsys translate_off
	initial
		tx_pll_inclk_reg[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_tx_pll_inclk_reg_ena[2:2] == 1'b1)   tx_pll_inclk_reg[2:2] <= wire_tx_pll_inclk_reg_d[2:2];
	// synopsys translate_off
	initial
		tx_pll_inclk_reg[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_tx_pll_inclk_reg_ena[3:3] == 1'b1)   tx_pll_inclk_reg[3:3] <= wire_tx_pll_inclk_reg_d[3:3];
	assign
		wire_tx_pll_inclk_reg_d = reconfig_data_reg[10:7];
	assign
		wire_tx_pll_inclk_reg_ena = {4{((is_mif_header & (~ write_mif_word_done)) & is_tier_1)}};
	// synopsys translate_off
	initial
		wr_addr_inc_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		  wr_addr_inc_reg <= (wr_pulse | (((~ wr_pulse) & (~ rd_pulse)) & wr_addr_inc_reg));
	// synopsys translate_off
	initial
		wr_rd_pulse_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_wr_rd_pulse_reg_ena == 1'b1) 
			if (wire_wr_rd_pulse_reg_sclr == 1'b1) wr_rd_pulse_reg <= 1'b0;
			else  wr_rd_pulse_reg <= (~ wr_rd_pulse_reg);
	assign
		wire_wr_rd_pulse_reg_ena = ((((~ dprio_pulse) & (delay_mif_head_out | (delay_second_mif_head_out & (is_cruclk_addr0 | write_skip)))) | (is_tier_1 & mif_reconfig_done)) | ((dprio_pulse & ((~ is_tier_1) | (is_tier_1 & ((((is_rcxpat_chnl_en_ch | is_cruclk_addr0) | write_skip) | is_mif_header) | (is_cent_clk_div & (~ is_cmu_refsel)))))) & (~ read_state))),
		wire_wr_rd_pulse_reg_sclr = (reset_system | (is_tier_1 & mif_reconfig_done));
	lcell   le7
	( 
	.in(is_mif_header),
	.out(wire_le7_out));
	lpm_compare   dprio_addr_offset_cmpr
	( 
	.aeb(wire_dprio_addr_offset_cmpr_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_dprio_addr_offset_cnt_q),
	.datab(wire_max_word_per_mif_type_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		dprio_addr_offset_cmpr.lpm_width = 5,
		dprio_addr_offset_cmpr.lpm_type = "lpm_compare";
	lpm_compare   is_cmu_refsel_idx
	( 
	.aeb(wire_is_cmu_refsel_idx_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b00110)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_cmu_refsel_idx.lpm_width = 5,
		is_cmu_refsel_idx.lpm_type = "lpm_compare";
	lpm_compare   is_cru_idx0
	( 
	.aeb(wire_is_cru_idx0_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab({5{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_cru_idx0.lpm_width = 5,
		is_cru_idx0.lpm_type = "lpm_compare";
	lpm_compare   is_rcxpat_chnl_en_ch_word
	( 
	.aeb(wire_is_rcxpat_chnl_en_ch_word_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b00001)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_rcxpat_chnl_en_ch_word.lpm_width = 5,
		is_rcxpat_chnl_en_ch_word.lpm_type = "lpm_compare";
	lpm_compare   is_second_mif_header_address
	( 
	.aeb(wire_is_second_mif_header_address_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_mif_addr_cntr_q),
	.datab(6'b000001)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_second_mif_header_address.lpm_width = 6,
		is_second_mif_header_address.lpm_type = "lpm_compare";
	lpm_compare   is_special_address
	( 
	.aeb(wire_is_special_address_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_mif_addr_cntr_q),
	.datab({6{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_special_address.lpm_width = 6,
		is_special_address.lpm_type = "lpm_compare";
	lpm_compare   is_tx_pma_pll_sel_idx
	( 
	.aeb(wire_is_tx_pma_pll_sel_idx_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b00101)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_tx_pma_pll_sel_idx.lpm_width = 5,
		is_tx_pma_pll_sel_idx.lpm_type = "lpm_compare";
	lpm_compare   is_tx_pma_w6_cmp
	( 
	.aeb(wire_is_tx_pma_w6_cmp_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b00110)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_tx_pma_w6_cmp.lpm_width = 5,
		is_tx_pma_w6_cmp.lpm_type = "lpm_compare";
	lpm_counter   addr_cntr
	( 
	.clock(reconfig_clk),
	.cnt_en((chl_addr_inc & is_analog_control)),
	.cout(),
	.data(logical_channel_address),
	.eq(),
	.q(wire_addr_cntr_q),
	.sclr((write_done & (reconf_done_reg_out | (~ (is_tier_1 | is_analog_control))))),
	.sload(((idle_state & (write_all | read)) & ((reconfig_mode_sel[2] | reconfig_mode_sel[1]) | reconfig_mode_sel[0])))
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.aload(1'b0),
	.aset(1'b0),
	.cin(1'b1),
	.clk_en(1'b1),
	.sset(1'b0),
	.updown(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		addr_cntr.lpm_modulus = 16,
		addr_cntr.lpm_port_updown = "PORT_UNUSED",
		addr_cntr.lpm_width = 4,
		addr_cntr.lpm_type = "lpm_counter";
	lpm_counter   dprio_addr_offset_cnt
	( 
	.clock(reconfig_clk),
	.cnt_en((en_mif_addr_cntr & (~ disable_rx_pma_w0_offset_clr))),
	.cout(),
	.data(((cmu_offset & {5{(~ is_cent_clk_div)}}) | (cent_clk_div_offset & {5{is_cent_clk_div}}))),
	.eq(),
	.q(wire_dprio_addr_offset_cnt_q),
	.sclr((clr_offset | is_mif_header)),
	.sload(((load_offset & is_cmu) | ((delay_second_mif_head_out & is_cmu) & (~ is_channel_reconfig))))
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.aload(1'b0),
	.aset(1'b0),
	.cin(1'b1),
	.clk_en(1'b1),
	.sset(1'b0),
	.updown(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		dprio_addr_offset_cnt.lpm_port_updown = "PORT_UNUSED",
		dprio_addr_offset_cnt.lpm_width = 5,
		dprio_addr_offset_cnt.lpm_type = "lpm_counter";
	lpm_counter   mif_addr_cntr
	( 
	.clock(reconfig_clk),
	.cnt_en(((en_mif_addr_cntr | ((((((is_mif_header & write_state) | (is_second_mif_header & write_state)) & (~ write_done)) & (~ mif_reconfig_done)) & (~ reconf_done_reg_out)) & (~ dprio_pulse))) & is_tier_1)),
	.cout(),
	.data(pll_first_word_addr),
	.eq(),
	.q(wire_mif_addr_cntr_q),
	.sclr((((reset_reconf_addr | is_end_mif) & (~ ((is_mif_header | is_second_mif_header) & write_state))) | ((wire_dprio_status_out[1] | wire_dprio_status_out[3]) & reset_system))),
	.sload(((((is_second_mif_header & (~ write_done)) & write_state) & is_pll_reconfig) & (~ is_channel_reconfig)))
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.aload(1'b0),
	.aset(1'b0),
	.cin(1'b1),
	.clk_en(1'b1),
	.sset(1'b0),
	.updown(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		mif_addr_cntr.lpm_modulus = 62,
		mif_addr_cntr.lpm_port_updown = "PORT_UNUSED",
		mif_addr_cntr.lpm_width = 6,
		mif_addr_cntr.lpm_type = "lpm_counter";
	lpm_decode   chl_addr_decode
	( 
	.data(wire_addr_cntr_q),
	.eq(wire_chl_addr_decode_eq)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0),
	.enable(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		chl_addr_decode.lpm_decodes = 16,
		chl_addr_decode.lpm_width = 4,
		chl_addr_decode.lpm_type = "lpm_decode";
	lpm_decode   reconf_mode_dec
	( 
	.data(reconf_mode_sel_reg),
	.enable(((~ idle_state) | mif_stage)),
	.eq(wire_reconf_mode_dec_eq)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		reconf_mode_dec.lpm_decodes = 8,
		reconf_mode_dec.lpm_width = 3,
		reconf_mode_dec.lpm_type = "lpm_decode";
	lpm_mux   aeq_ch_done_mux
	( 
	.data(aeq_ch_done),
	.result(wire_aeq_ch_done_mux_result),
	.sel(w600w[3:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		aeq_ch_done_mux.lpm_size = 16,
		aeq_ch_done_mux.lpm_width = 1,
		aeq_ch_done_mux.lpm_widths = 4,
		aeq_ch_done_mux.lpm_type = "lpm_mux";
	lpm_mux   dprioout_mux
	( 
	.data(cal_dprioout_wire),
	.result(wire_dprioout_mux_result),
	.sel(quad_address[1:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		dprioout_mux.lpm_size = 4,
		dprioout_mux.lpm_width = 1,
		dprioout_mux.lpm_widths = 2,
		dprioout_mux.lpm_type = "lpm_mux";
	lpm_mux   max_word_per_mif_type
	( 
	.data({((cmu_max & {5{(~ is_cent_clk_div)}}) | (cent_clk_div_max & {5{is_cent_clk_div}})), wire_max_word_per_rx_pma_result, tx_pma_max, rx_pcs_max, tx_pcs_max}),
	.result(wire_max_word_per_mif_type_result),
	.sel({is_cmu, is_pma_mif_type, is_rx_mif_type})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		max_word_per_mif_type.lpm_size = 5,
		max_word_per_mif_type.lpm_width = 5,
		max_word_per_mif_type.lpm_widths = 3,
		max_word_per_mif_type.lpm_type = "lpm_mux";
	lpm_mux   max_word_per_rx_pma
	( 
	.data({rx_pma_adce_max, rx_pma_max}),
	.result(wire_max_word_per_rx_pma_result),
	.sel((is_rx_pma & is_adce_mif))
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		max_word_per_rx_pma.lpm_size = 2,
		max_word_per_rx_pma.lpm_width = 5,
		max_word_per_rx_pma.lpm_widths = 1,
		max_word_per_rx_pma.lpm_type = "lpm_mux";
	lpm_mux   pll_first_word_mux
	( 
	.data({duplex_pma_pcs_first_pll, tx_pma_pcs_first_pll, duplex_pma_first_pll, tx_pma_first_pll}),
	.result(wire_pll_first_word_mux_result),
	.sel({mif_type_reg[4], mif_type_reg[1]})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		pll_first_word_mux.lpm_size = 4,
		pll_first_word_mux.lpm_width = 6,
		pll_first_word_mux.lpm_widths = 2,
		pll_first_word_mux.lpm_type = "lpm_mux";
	assign
		a2gr_dprio_addr = ((((write_address & {16{is_analog_control}}) | ((write_reconfig_addr & {16{(~ is_analog_control)}}) & {16{(~ header_proc)}})) & {16{write_state}}) | (((read_address & {16{is_analog_control}}) | ({16{(~ is_analog_control)}} & read_reconfig_addr)) & {16{read_state}})),
		a2gr_dprio_data = ((dprio_datain & {16{(~ header_proc)}}) & {16{write_state}}),
		a2gr_dprio_rden = rd_pulse,
		a2gr_dprio_wren = wr_pulse,
		adce_busy_state = 1'b0,
		adce_state = 1'b0,
		aeq_ch_done = {16{1'b0}},
		busy = ((busy_state | internal_write_pulse) | cal_busy),
		busy_state = ((read_state | write_state) | adce_state),
		cal_busy = wire_calibration_busy,
		cal_dprioout_wire = {reconfig_fromgxb[51], reconfig_fromgxb[34], reconfig_fromgxb[17], reconfig_fromgxb[0]},
		cal_testbuses = {reconfig_fromgxb[67:52], reconfig_fromgxb[50:35], reconfig_fromgxb[33:18], reconfig_fromgxb[16:1]},
		cent_clk_div_max = 5'b00110,
		cent_clk_div_offset = 5'b00101,
		channel_address = wire_addr_cntr_q[1:0],
		channel_address_out = address_pres_reg[1:0],
		channel_reconfig_done = reconf_done_reg_out,
		chl_addr_inc = ((read_state & dprio_pulse) | ((write_state & dprio_pulse) & write_happened)),
		clr_offset = (is_offset_end & en_mif_addr_cntr),
		cmu_max = 5'b00110,
		cmu_offset = 5'b00011,
		cruclk_mux_data = {(((~ write_skip) & ((((~ cru_num_reg[1]) & (~ cru_num_reg[0])) | cru_num_reg[3]) | ((cru_num_reg[2] & cru_num_reg[1]) & cru_num_reg[0]))) | (write_skip & dprio_dataout_reg[15])), (((~ write_skip) & (((((~ cru_num_reg[3]) & (~ cru_num_reg[2])) & cru_num_reg[0]) | cru_num_reg[3]) | ((cru_num_reg[2] & cru_num_reg[1]) & (~ cru_num_reg[0])))) | (write_skip & dprio_dataout_reg[14])), (((~ write_skip) & ((cru_num_reg[3] | cru_num_reg[2]) | cru_num_reg[1])) | (write_skip & dprio_dataout_reg[13])), (((~ write_skip) & (((~ cru_num_reg[1]) & cru_num_reg[0]) | (cru_num_reg[2] & cru_num_reg[1]))) | (write_skip & dprio_dataout_reg[12])), (({6{(~ write_skip)}} & reconfig_data_reg[11:6]) | ({6{write_skip}} & dprio_dataout_reg[11:6])), dprio_dataout_reg[5:4], (({4{(~ write_skip)}} & reconfig_data_reg[3:0]) | ({4{write_skip}} & dprio_dataout_reg[3:0]))},
		delay_mif_head_out = delay_mif_head,
		delay_second_mif_head_out = delay_second_mif_head,
		disable_rx_pma_w0_offset_clr = (disable_clr_offset_2_reg & (~ disable_clr_offset_3_reg)),
		dprio_addr_offset_cnt_out = wire_dprio_addr_offset_cnt_q,
		dprio_datain = ((((((((dprio_datain_vodctrl & {16{write_word_vodctrl_data_valid}}) | (dprio_datain_preemp1t & {16{write_word_preemp1t_data_valid}})) | (dprio_datain_64_67 & {16{write_word_64_67_data_valid}})) | ((dprio_datain_68_6B | {16{local_ch_dec}}) & {16{write_word_68_6B_data_valid}})) | (dprio_datain_7c_7f & {16{write_word_7c_7f_data_valid}})) | (dprio_datain_7c_7f_inv & {16{write_word_7c_7f_inv_data_valid}})) & {16{is_analog_control}}) | ({16{((is_tier_1 | is_tier_2) | is_tx_local_div_ctrl)}} & reconfig_datain)),
		dprio_datain_64_67 = {16{1'b0}},
		dprio_datain_68_6B = {16{1'b0}},
		dprio_datain_7c_7f = {16{1'b0}},
		dprio_datain_7c_7f_inv = {16{1'b0}},
		dprio_datain_preemp1t = {16{1'b0}},
		dprio_datain_vodctrl = {16{1'b0}},
		dprio_pulse = ((dprio_pulse_reg ^ wire_dprio_busy) & (~ wire_dprio_busy)),
		dprio_wr_done = wire_dprio_status_out[1],
		duplex_pma_first_pll = 6'b010110,
		duplex_pma_pcs_first_pll = 6'b110001,
		en_mif_addr_cntr = ((read_state & dprio_wr_done) | ((write_state & dprio_wr_done) & write_happened)),
		en_write_trigger = 1'b1,
		header_proc = ((((delay_mif_head | is_mif_header) | delay_second_mif_head_out) | is_second_mif_header) & is_tier_1),
		idle_state = (~ state_mc_reg),
		internal_write_pulse = 1'b0,
		is_adce = (is_adce_single_control | is_adce_all_control),
		is_adce_all_control = 1'b0,
		is_adce_mif = is_adce_reg,
		is_adce_single_control = 1'b0,
		is_analog_control = wire_reconf_mode_dec_eq[0],
		is_cent_clk_div = is_pma_cent_reg,
		is_channel_reconfig = ((wire_reconf_mode_dec_eq[1] | wire_reconf_mode_dec_eq[5]) | wire_reconf_mode_dec_eq[6]),
		is_cmu = (((((mif_type_reg[0] & (~ is_tx_pcs)) & (~ is_rx_pcs)) & (~ is_tx_pma)) & (~ is_rx_pma)) & is_pll_reconfig),
		is_cmu_refsel = (((wire_is_cmu_refsel_idx_aeb & is_tier_1) & is_cmu) & is_cent_clk_div),
		is_cruclk_addr0 = ((wire_is_cru_idx0_aeb & is_tier_1) & is_rx_pma),
		is_end_mif = end_mif_reg,
		is_illegal_reg_d = 1'b0,
		is_illegal_reg_out = 1'b0,
		is_mif_header = wire_is_special_address_aeb,
		is_mif_stage = mif_stage,
		is_offset_end = wire_dprio_addr_offset_cmpr_aeb,
		is_pll_end_mif = 1'b0,
		is_pll_first_word = 1'b0,
		is_pll_reconfig = (wire_reconf_mode_dec_eq[4] | wire_reconf_mode_dec_eq[5]),
		is_pll_reset_stage = 1'b0,
		is_pma_mif_type = (is_tx_pma | is_rx_pma),
		is_rcxpat_chnl_en_ch = ((wire_is_rcxpat_chnl_en_ch_word_aeb & is_tier_1) & is_tx_pcs),
		is_rx_mif_type = (is_rx_pcs | is_rx_pma),
		is_rx_pcs = ((mif_type_reg[3] & (~ is_tx_pcs)) & is_channel_reconfig),
		is_rx_pma = ((((mif_type_reg[1] & (~ is_tx_pcs)) & (~ is_rx_pcs)) & (~ is_tx_pma)) & is_channel_reconfig),
		is_second_mif_header = wire_is_second_mif_header_address_aeb,
		is_tier_1 = (((wire_reconf_mode_dec_eq[1] | wire_reconf_mode_dec_eq[6]) | wire_reconf_mode_dec_eq[4]) | wire_reconf_mode_dec_eq[5]),
		is_tier_2 = wire_reconf_mode_dec_eq[2],
		is_tx_local_div_ctrl = wire_reconf_mode_dec_eq[3],
		is_tx_pcs = (mif_type_reg[4] & is_channel_reconfig),
		is_tx_pma = (((mif_type_reg[2] & (~ is_tx_pcs)) & (~ is_rx_pcs)) & is_channel_reconfig),
		is_tx_pma_pll_sel = ((wire_is_tx_pma_pll_sel_idx_aeb & is_tier_1) & is_tx_pma),
		is_tx_pma_w6 = (wire_is_tx_pma_w6_cmp_aeb & is_tx_pma),
		load_mif_header = ((is_mif_header & (~ write_mif_word_done)) & is_tier_1),
		load_offset = load_offset_reg,
		local_ch_dec = wire_aeq_ch_done_mux_result,
		merged_dprioin = {((((is_cmu_refsel & (~ write_skip)) & ((((~ tx_pll_inclk_reg[1]) & (~ tx_pll_inclk_reg[0])) | (tx_pll_inclk_reg[3] & (~ tx_pll_inclk_reg[1]))) | ((tx_pll_inclk_reg[2] & tx_pll_inclk_reg[1]) & tx_pll_inclk_reg[0]))) | (((~ is_cmu_refsel) & (~ write_skip)) & reconfig_data_reg[15])) | (write_skip & dprio_dataout_reg[15])), ((((is_cmu_refsel & (~ write_skip)) & (((((~ tx_pll_inclk_reg[3]) & (~ tx_pll_inclk_reg[2])) & tx_pll_inclk_reg[0]) | (tx_pll_inclk_reg[3] & (~ tx_pll_inclk_reg[1]))) | ((tx_pll_inclk_reg[2] & tx_pll_inclk_reg[1]) & (~ tx_pll_inclk_reg[0])))) | (((~ is_cmu_refsel) & (~ write_skip)) & reconfig_data_reg[14])) | (write_skip & dprio_dataout_reg[14])), ((((is_cmu_refsel & (~ write_skip)) & ((tx_pll_inclk_reg[3] | tx_pll_inclk_reg[2]) | tx_pll_inclk_reg[1])) | (((~ is_cmu_refsel) & (~ write_skip)) & reconfig_data_reg[13])) | (write_skip & dprio_dataout_reg[13])), ((((is_cmu_refsel & (~ write_skip)) & (((~ tx_pll_inclk_reg[1]) & tx_pll_inclk_reg[0]) | (tx_pll_inclk_reg[2] & tx_pll_inclk_reg[1]))) | (((~ is_cmu_refsel) & (~ write_skip)) & reconfig_data_reg[12])) | (write_skip & dprio_dataout_reg[12])), (({9{(~ write_skip)}} & reconfig_data_reg[11:3]) | ({9{write_skip}} & dprio_dataout_reg[11:3])), ((({2{(is_rcxpat_chnl_en_ch & (~ write_skip))}} & dprio_dataout_reg[2:1]) | ({2{((~ is_rcxpat_chnl_en_ch) & (~ write_skip))}} & reconfig_data_reg[2:1])) | ({2{write_skip}} & dprio_dataout_reg[2:1])), (((~ write_skip) & reconfig_data_reg[0]) | (write_skip & dprio_dataout_reg[0]))},
		mif_reconfig_done = (((~ (((((mif_type_reg[4] | mif_type_reg[3]) | mif_type_reg[2]) | mif_type_reg[1]) & is_channel_reconfig) | (mif_type_reg[0] & is_pll_reconfig))) & (~ is_mif_header)) & (~ is_second_mif_header)),
		pll_address = is_cmu,
		pll_first_word_addr = wire_pll_first_word_mux_result,
		pll_sel_num = {1'b0, logical_pll_num_reg},
		quad_address = {{5{1'b0}}, wire_addr_cntr_q[3:2]},
		quad_address_out = address_pres_reg[9:3],
		rd_pulse = (((((~ dprio_pulse) & (~ write_done)) & (~ wr_rd_pulse_reg)) & (~ is_illegal_reg_d)) & (write_state & (((~ header_proc) & (~ reset_reconf_addr)) & ((~ is_tier_1) | (is_tier_1 & (((is_rcxpat_chnl_en_ch | is_cruclk_addr0) | write_skip) | (is_cent_clk_div & (~ is_cmu_refsel)))))))),
		read = 1'b0,
		read_address = {16{1'b0}},
		read_reconfig_addr = {16{1'b0}},
		read_state = 1'b0,
		reconf_done_reg_out = reconfig_done_reg,
		reconfig_address_en = (((write_done | idle_state) & (~ ((~ is_pll_reset_stage) & is_pll_first_word))) & (~ (is_pll_reset_stage & is_pll_end_mif))),
		reconfig_address_out = ((wire_mif_addr_cntr_q & {6{((~ mif_reconfig_done) & (~ is_end_mif))}}) & {6{is_tier_1}}),
		reconfig_datain = (((({16{is_cruclk_addr0}} & cruclk_mux_data) | ({16{is_tx_pma_pll_sel}} & tx_pma_pll_select_data)) | (merged_dprioin & {16{(~ ((((is_tx_pma_pll_sel | is_cruclk_addr0) | is_tx_local_div_ctrl) | is_pll_reset_stage) | (is_cent_clk_div & (~ is_cmu_refsel))))}})) | ({16{((is_tx_local_div_ctrl | is_pll_reset_stage) | (is_cent_clk_div & (~ is_cmu_refsel)))}} & dprio_dataout_reg)),
		reconfig_togxb = {wire_calibration_busy, wire_dprio_dprioload, wire_dprio_dpriodisable, wire_dprio_dprioin},
		reset_addr_done = (is_mif_header & reset_reconf_addr),
		reset_reconf_addr = reset_reconf_addr_reg,
		reset_system = 1'b0,
		rx_pcs_max = 5'b10110,
		rx_pma_adce_max = 5'b10010,
		rx_pma_max = 5'b01011,
		rx_reconfig = 1'b1,
		s0_to_0 = write_done,
		s0_to_1 = (write_all_int & idle_state),
		s0_to_2 = ((idle_state & is_adce) & write_all),
		s2_to_0 = (adce_state & (~ adce_busy_state)),
		state_mc_reg_in = ((s0_to_2 | s0_to_1) | ((((~ s2_to_0) & (~ s0_to_1)) & (~ s0_to_0)) & state_mc_reg[0])),
		tx_pcs_max = 5'b00011,
		tx_pll_sel_wire = tx_cmu_sel,
		tx_pma_first_pll = 6'b001001,
		tx_pma_max = 5'b00110,
		tx_pma_pcs_first_pll = 6'b001101,
		tx_pma_pll_select_data = {(((~ write_skip) & ((tx_pll_sel_wire[1] & tx_pll_sel_wire[0]) | (tx_pll_sel_wire[2] & (~ tx_pll_sel_wire[0])))) | (write_skip & dprio_dataout_reg[15])), (((~ write_skip) & ((tx_pll_sel_wire[1] & (~ tx_pll_sel_wire[0])) | (tx_pll_sel_wire[2] & (~ tx_pll_sel_wire[0])))) | (write_skip & dprio_dataout_reg[14])), (((~ write_skip) & tx_pll_sel_wire[0]) | (write_skip & dprio_dataout_reg[13])), (({13{(~ write_skip)}} & reconfig_data_reg[12:0]) | ({13{write_skip}} & dprio_dataout_reg[12:0]))},
		tx_reconfig = 1'b1,
		w600w = {quad_address, channel_address},
		wr_pulse = ((((write_state & (~ dprio_pulse)) & (~ write_done)) & ((wr_rd_pulse_reg & ((~ is_tier_1) | ((is_tier_1 & (~ header_proc)) & (((is_rcxpat_chnl_en_ch | is_cruclk_addr0) | write_skip) | (is_cent_clk_div & (~ is_cmu_refsel)))))) | ((is_tier_1 & (~ header_proc)) & ((((~ is_rcxpat_chnl_en_ch) & (~ is_cruclk_addr0)) & (~ write_skip)) & (~ (is_cent_clk_div & (~ is_cmu_refsel))))))) & (~ is_illegal_reg_d)),
		write_addr_inc = 1'b0,
		write_address = {1'b0, address_pres_reg[2], channel_address_out, {2{1'b1}}, {6{1'b0}}, {4{1'b0}}},
		write_all_int = (write_all & en_write_trigger),
		write_done = (((((((write_word_done & write_addr_inc) & write_happened) & is_analog_control) | (((delay_mif_head_out | delay_second_mif_head_out) | write_mif_word_done) | (reset_addr_done & is_tier_1))) | ((dprio_pulse & write_happened) & (is_tier_2 | is_tx_local_div_ctrl))) | (is_illegal_reg_out & write_state)) | reset_system),
		write_happened = wr_addr_inc_reg,
		write_mif_word_done = ((dprio_pulse & write_happened) & is_tier_1),
		write_reconfig_addr = {1'b0, is_cmu, (channel_address_out[1] & (~ is_cmu)), ((channel_address_out[0] & (~ is_cmu)) | (((is_cmu & (~ tx_pll_sel_wire[2])) & (~ tx_pll_sel_wire[1])) & tx_pll_sel_wire[0])), ((is_pma_mif_type | is_tx_local_div_ctrl) | is_cmu), ((is_rx_mif_type & (~ is_cruclk_addr0)) | (is_cmu & (~ is_cent_clk_div))), {5{1'b0}}, ({2{(~ is_cruclk_addr0)}} & dprio_addr_offset_cnt_out[4:3]), (is_cruclk_addr0 | ((~ is_cruclk_addr0) & dprio_addr_offset_cnt_out[2])), (is_cruclk_addr0 | ((~ is_cruclk_addr0) & dprio_addr_offset_cnt_out[1])), (((~ is_cruclk_addr0) & (~ disable_rx_pma_w0_offset_clr)) & (is_tx_pma_w6 | dprio_addr_offset_cnt_out[0]))},
		write_skip = ((((is_tx_pcs | is_tx_pma) & (~ tx_reconfig)) | ((is_rx_pcs | is_rx_pma) & (~ rx_reconfig))) | (is_cmu & (~ tx_reconfig))),
		write_state = state_mc_reg,
		write_word_64_67_data_valid = 1'b0,
		write_word_68_6B_data_valid = 1'b0,
		write_word_7c_7f_data_valid = 1'b0,
		write_word_7c_7f_inv_data_valid = 1'b0,
		write_word_done = 1'b0,
		write_word_preemp1t_data_valid = 1'b0,
		write_word_vodctrl_data_valid = 1'b0;
endmodule //alt4gxb_gxb_reconfig_alt2gxb_reconfig_ao91
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module alt4gxb_gxb_reconfig (
	logical_channel_address,
	reconfig_clk,
	reconfig_data,
	reconfig_fromgxb,
	reconfig_mode_sel,
	reset_reconfig_address,
	write_all,
	busy,
	channel_reconfig_done,
	reconfig_address_en,
	reconfig_address_out,
	reconfig_togxb)/* synthesis synthesis_clearbox = 2 */;

	input	[3:0]  logical_channel_address;
	input	  reconfig_clk;
	input	[15:0]  reconfig_data;
	input	[67:0]  reconfig_fromgxb;
	input	[2:0]  reconfig_mode_sel;
	input	  reset_reconfig_address;
	input	  write_all;
	output	  busy;
	output	  channel_reconfig_done;
	output	  reconfig_address_en;
	output	[5:0]  reconfig_address_out;
	output	[3:0]  reconfig_togxb;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0	[3:0]  logical_channel_address;
	tri0	[15:0]  reconfig_data;
	tri0	[2:0]  reconfig_mode_sel;
	tri0	  reset_reconfig_address;
	tri0	  write_all;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  sub_wire0;
	wire  sub_wire1;
	wire [5:0] sub_wire2;
	wire [3:0] sub_wire3;
	wire  sub_wire4;
	wire  channel_reconfig_done = sub_wire0;
	wire  busy = sub_wire1;
	wire [5:0] reconfig_address_out = sub_wire2[5:0];
	wire [3:0] reconfig_togxb = sub_wire3[3:0];
	wire  reconfig_address_en = sub_wire4;

	alt4gxb_gxb_reconfig_alt2gxb_reconfig_ao91	alt4gxb_gxb_reconfig_alt2gxb_reconfig_ao91_component (
				.write_all (write_all),
				.reconfig_mode_sel (reconfig_mode_sel),
				.reset_reconfig_address (reset_reconfig_address),
				.logical_channel_address (logical_channel_address),
				.reconfig_clk (reconfig_clk),
				.reconfig_data (reconfig_data),
				.reconfig_fromgxb (reconfig_fromgxb),
				.channel_reconfig_done (sub_wire0),
				.busy (sub_wire1),
				.reconfig_address_out (sub_wire2),
				.reconfig_togxb (sub_wire3),
				.reconfig_address_en (sub_wire4))/* synthesis synthesis_clearbox=2
	 clearbox_macroname = alt2gxb_reconfig
	 clearbox_defparam = "channel_address_width=4;intended_device_family=Stratix IV;mif_address_width=6;number_of_channels=16;number_of_reconfig_ports=4;enable_buf_cal=true;reconfig_fromgxb_width=68;reconfig_togxb_width=4;" */;

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: ADCE NUMERIC "0"
// Retrieval info: PRIVATE: CMU_PLL NUMERIC "0"
// Retrieval info: PRIVATE: DATA_RATE NUMERIC "0"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Stratix IV"
// Retrieval info: PRIVATE: PMA NUMERIC "0"
// Retrieval info: PRIVATE: PROTO_SWITCH NUMERIC "0"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "0"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Stratix IV"
// Retrieval info: CONSTANT: NUMBER_OF_CHANNELS NUMERIC "16"
// Retrieval info: CONSTANT: NUMBER_OF_RECONFIG_PORTS NUMERIC "4"
// Retrieval info: CONSTANT: enable_buf_cal STRING "true"
// Retrieval info: CONSTANT: reconfig_fromgxb_width NUMERIC "68"
// Retrieval info: CONSTANT: reconfig_togxb_width NUMERIC "4"
// Retrieval info: USED_PORT: busy 0 0 0 0 OUTPUT NODEFVAL busy
// Retrieval info: USED_PORT: reconfig_clk 0 0 0 0 INPUT NODEFVAL reconfig_clk
// Retrieval info: USED_PORT: reconfig_fromgxb 0 0 68 0 INPUT NODEFVAL reconfig_fromgxb[67..0]
// Retrieval info: USED_PORT: reconfig_togxb 0 0 4 0 OUTPUT NODEFVAL reconfig_togxb[3..0]
// Retrieval info: CONNECT: reconfig_togxb 0 0 4 0 @reconfig_togxb 0 0 4 0
// Retrieval info: CONNECT: @reconfig_clk 0 0 0 0 reconfig_clk 0 0 0 0
// Retrieval info: CONNECT: @reconfig_fromgxb 0 0 68 0 reconfig_fromgxb 0 0 68 0
// Retrieval info: CONNECT: busy 0 0 0 0 @busy 0 0 0 0
// Retrieval info: GEN_FILE: TYPE_NORMAL alt4gxb_gxb_reconfig.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL alt4gxb_gxb_reconfig.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL alt4gxb_gxb_reconfig.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL alt4gxb_gxb_reconfig.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL alt4gxb_gxb_reconfig_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL alt4gxb_gxb_reconfig_bb.v TRUE
