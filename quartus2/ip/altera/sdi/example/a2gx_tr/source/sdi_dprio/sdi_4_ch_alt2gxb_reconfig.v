// megafunction wizard: %ALT2GXB_RECONFIG%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: alt2gxb_reconfig 

// ============================================================
// File Name: sdi_4_ch_alt2gxb_reconfig.v
// Megafunction Name(s):
// 			alt2gxb_reconfig
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 7.1 Internal Build 134 03/14/2007 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2007 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//alt2gxb_reconfig CBX_AUTO_BLACKBOX="ALL" CHANNEL_ADDRESS_WIDTH=4 DEVICE_FAMILY="Stratix II GX" NUMBER_OF_CHANNELS=16 NUMBER_OF_RECONFIG_PORTS=4 busy channel_reconfig_done logical_channel_address reconfig_address_en reconfig_address_out reconfig_clk reconfig_data reconfig_fromgxb reconfig_mode_sel reconfig_togxb write_all
//VERSION_BEGIN 7.1 cbx_alt2gxb_reconfig 2007:03:11:18:50:10:SJ cbx_alt_dprio 2007:03:02:00:53:28:SJ cbx_altsyncram 2007:03:09:13:00:58:SJ cbx_cycloneii 2007:01:23:09:39:40:SJ cbx_lpm_add_sub 2007:01:08:11:15:18:SJ cbx_lpm_compare 2007:02:05:11:33:54:SJ cbx_lpm_counter 2007:01:15:11:49:48:SJ cbx_lpm_decode 2006:11:21:10:27:00:SJ cbx_lpm_mux 2006:11:21:10:27:10:SJ cbx_lpm_shiftreg 2006:11:21:10:20:38:SJ cbx_mgl 2007:03:08:14:59:42:SJ cbx_stratix 2007:02:23:17:47:34:SJ cbx_stratixii 2007:02:12:17:08:26:SJ cbx_stratixiii 2007:03:13:14:47:12:SJ cbx_util_mgl 2007:01:15:12:22:48:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//alt_dprio CBX_AUTO_BLACKBOX="ALL" device_family="Stratix II GX" address busy datain dataout dpclk dpriodisable dprioin dprioload dprioout is_pcs_address quad_address rden status_out wren
//VERSION_BEGIN 7.1 cbx_alt_dprio 2007:03:02:00:53:28:SJ cbx_cycloneii 2007:01:23:09:39:40:SJ cbx_lpm_add_sub 2007:01:08:11:15:18:SJ cbx_lpm_compare 2007:02:05:11:33:54:SJ cbx_lpm_counter 2007:01:15:11:49:48:SJ cbx_lpm_decode 2006:11:21:10:27:00:SJ cbx_lpm_shiftreg 2006:11:21:10:20:38:SJ cbx_mgl 2007:03:08:14:59:42:SJ cbx_stratix 2007:02:23:17:47:34:SJ cbx_stratixii 2007:02:12:17:08:26:SJ  VERSION_END

//synthesis_resources = lpm_add_sub 1 lpm_compare 3 lpm_counter 1 lpm_decode 1 lut 1 reg 110 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  sdi_4_ch_alt2gxb_reconfig_alt_dprio_fnh
	( 
	address,
	busy,
	datain,
	dataout,
	dpclk,
	dpriodisable,
	dprioin,
	dprioload,
	dprioout,
	is_pcs_address,
	quad_address,
	rden,
	status_out,
	wren) /* synthesis synthesis_clearbox=1 */
		/* synthesis ALTERA_ATTRIBUTE="{-to addr_shift_reg[31]} DPRIO_INTERFACE_REG=ON;{-to wr_out_data_shift_reg[31]} DPRIO_INTERFACE_REG=ON;{-to rd_out_data_shift_reg[13]} DPRIO_INTERFACE_REG=ON;{-to in_data_shift_reg[0]} DPRIO_INTERFACE_REG=ON;{-to startup_cntr[0]} DPRIO_INTERFACE_REG=ON;{-to startup_cntr[1]} DPRIO_INTERFACE_REG=ON;{-to startup_cntr[2]} DPRIO_INTERFACE_REG=ON" */;
	input   [7:0]  address;
	output   busy;
	input   [15:0]  datain;
	output   [15:0]  dataout;
	input   dpclk;
	output   dpriodisable;
	output   dprioin;
	output   dprioload;
	input   dprioout;
	input   is_pcs_address;
	input   [5:0]  quad_address;
	input   rden;
	output   [3:0]  status_out;
	input   wren;

	wire	[31:0]	wire_addr_shift_reg_d;
	wire	[31:0]	wire_addr_shift_reg_asdata;
	reg	[31:0]	addr_shift_reg/* synthesis ALTERA_ATTRIBUTE="PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW" */;
	wire	[31:0]	wire_addr_shift_reg_sload;
	reg	[15:0]	in_data_shift_reg/* synthesis ALTERA_ATTRIBUTE="PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW" */;
	reg	[15:0]	rd_out_data_shift_reg/* synthesis ALTERA_ATTRIBUTE="PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW" */;
	reg	[7:0]	real_address/* synthesis ALTERA_ATTRIBUTE="POWER_UP_LEVEL=LOW" */;
	wire	[2:0]	wire_startup_cntr_d;
	reg	[2:0]	startup_cntr/* synthesis ALTERA_ATTRIBUTE="PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW" */;
	wire	[2:0]	wire_startup_cntr_ena;
	reg	[2:0]	state_mc_reg/* synthesis ALTERA_ATTRIBUTE="POWER_UP_LEVEL=LOW" */;
	reg	[31:0]	wr_out_data_shift_reg/* synthesis ALTERA_ATTRIBUTE="PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW" */;
	wire  [7:0]   wire_odd_addr_trans_result;
	wire  wire_pre_amble_cmpr_aeb;
	wire  wire_pre_amble_cmpr_agb;
	wire  wire_rd_data_output_cmpr_ageb;
	wire  wire_rd_data_output_cmpr_alb;
	wire  wire_state_mc_cmpr_aeb;
	wire  [5:0]   wire_state_mc_counter_q;
	wire  [7:0]   wire_state_mc_decode_eq;
	wire	wire_dprioin_mux_dataout;
	wire  [7:0]  address_in;
	wire  busy_state;
	wire  idle_state;
	wire  rd_addr_done;
	wire  rd_addr_state;
	wire  rd_data_done;
	wire  rd_data_input_state;
	wire  rd_data_output_state;
	wire  rd_data_state;
	wire rdinc;
	wire  read_state;
	wire  s0_to_0;
	wire  s0_to_1;
	wire  s1_to_0;
	wire  s1_to_1;
	wire  s2_to_0;
	wire  s2_to_1;
	wire  startup_done;
	wire  startup_idle;
	wire  wr_addr_done;
	wire  wr_addr_state;
	wire  wr_data_done;
	wire  wr_data_state;
	wire  write_state;

	// synopsys translate_off
	initial
		addr_shift_reg[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[0:0] == 1'b1) addr_shift_reg[0:0] <= wire_addr_shift_reg_asdata[0:0];
			else  addr_shift_reg[0:0] <= wire_addr_shift_reg_d[0:0];
	// synopsys translate_off
	initial
		addr_shift_reg[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[1:1] == 1'b1) addr_shift_reg[1:1] <= wire_addr_shift_reg_asdata[1:1];
			else  addr_shift_reg[1:1] <= wire_addr_shift_reg_d[1:1];
	// synopsys translate_off
	initial
		addr_shift_reg[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[2:2] == 1'b1) addr_shift_reg[2:2] <= wire_addr_shift_reg_asdata[2:2];
			else  addr_shift_reg[2:2] <= wire_addr_shift_reg_d[2:2];
	// synopsys translate_off
	initial
		addr_shift_reg[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[3:3] == 1'b1) addr_shift_reg[3:3] <= wire_addr_shift_reg_asdata[3:3];
			else  addr_shift_reg[3:3] <= wire_addr_shift_reg_d[3:3];
	// synopsys translate_off
	initial
		addr_shift_reg[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[4:4] == 1'b1) addr_shift_reg[4:4] <= wire_addr_shift_reg_asdata[4:4];
			else  addr_shift_reg[4:4] <= wire_addr_shift_reg_d[4:4];
	// synopsys translate_off
	initial
		addr_shift_reg[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[5:5] == 1'b1) addr_shift_reg[5:5] <= wire_addr_shift_reg_asdata[5:5];
			else  addr_shift_reg[5:5] <= wire_addr_shift_reg_d[5:5];
	// synopsys translate_off
	initial
		addr_shift_reg[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[6:6] == 1'b1) addr_shift_reg[6:6] <= wire_addr_shift_reg_asdata[6:6];
			else  addr_shift_reg[6:6] <= wire_addr_shift_reg_d[6:6];
	// synopsys translate_off
	initial
		addr_shift_reg[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[7:7] == 1'b1) addr_shift_reg[7:7] <= wire_addr_shift_reg_asdata[7:7];
			else  addr_shift_reg[7:7] <= wire_addr_shift_reg_d[7:7];
	// synopsys translate_off
	initial
		addr_shift_reg[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[8:8] == 1'b1) addr_shift_reg[8:8] <= wire_addr_shift_reg_asdata[8:8];
			else  addr_shift_reg[8:8] <= wire_addr_shift_reg_d[8:8];
	// synopsys translate_off
	initial
		addr_shift_reg[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[9:9] == 1'b1) addr_shift_reg[9:9] <= wire_addr_shift_reg_asdata[9:9];
			else  addr_shift_reg[9:9] <= wire_addr_shift_reg_d[9:9];
	// synopsys translate_off
	initial
		addr_shift_reg[10:10] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[10:10] == 1'b1) addr_shift_reg[10:10] <= wire_addr_shift_reg_asdata[10:10];
			else  addr_shift_reg[10:10] <= wire_addr_shift_reg_d[10:10];
	// synopsys translate_off
	initial
		addr_shift_reg[11:11] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[11:11] == 1'b1) addr_shift_reg[11:11] <= wire_addr_shift_reg_asdata[11:11];
			else  addr_shift_reg[11:11] <= wire_addr_shift_reg_d[11:11];
	// synopsys translate_off
	initial
		addr_shift_reg[12:12] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[12:12] == 1'b1) addr_shift_reg[12:12] <= wire_addr_shift_reg_asdata[12:12];
			else  addr_shift_reg[12:12] <= wire_addr_shift_reg_d[12:12];
	// synopsys translate_off
	initial
		addr_shift_reg[13:13] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[13:13] == 1'b1) addr_shift_reg[13:13] <= wire_addr_shift_reg_asdata[13:13];
			else  addr_shift_reg[13:13] <= wire_addr_shift_reg_d[13:13];
	// synopsys translate_off
	initial
		addr_shift_reg[14:14] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[14:14] == 1'b1) addr_shift_reg[14:14] <= wire_addr_shift_reg_asdata[14:14];
			else  addr_shift_reg[14:14] <= wire_addr_shift_reg_d[14:14];
	// synopsys translate_off
	initial
		addr_shift_reg[15:15] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[15:15] == 1'b1) addr_shift_reg[15:15] <= wire_addr_shift_reg_asdata[15:15];
			else  addr_shift_reg[15:15] <= wire_addr_shift_reg_d[15:15];
	// synopsys translate_off
	initial
		addr_shift_reg[16:16] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[16:16] == 1'b1) addr_shift_reg[16:16] <= wire_addr_shift_reg_asdata[16:16];
			else  addr_shift_reg[16:16] <= wire_addr_shift_reg_d[16:16];
	// synopsys translate_off
	initial
		addr_shift_reg[17:17] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[17:17] == 1'b1) addr_shift_reg[17:17] <= wire_addr_shift_reg_asdata[17:17];
			else  addr_shift_reg[17:17] <= wire_addr_shift_reg_d[17:17];
	// synopsys translate_off
	initial
		addr_shift_reg[18:18] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[18:18] == 1'b1) addr_shift_reg[18:18] <= wire_addr_shift_reg_asdata[18:18];
			else  addr_shift_reg[18:18] <= wire_addr_shift_reg_d[18:18];
	// synopsys translate_off
	initial
		addr_shift_reg[19:19] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[19:19] == 1'b1) addr_shift_reg[19:19] <= wire_addr_shift_reg_asdata[19:19];
			else  addr_shift_reg[19:19] <= wire_addr_shift_reg_d[19:19];
	// synopsys translate_off
	initial
		addr_shift_reg[20:20] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[20:20] == 1'b1) addr_shift_reg[20:20] <= wire_addr_shift_reg_asdata[20:20];
			else  addr_shift_reg[20:20] <= wire_addr_shift_reg_d[20:20];
	// synopsys translate_off
	initial
		addr_shift_reg[21:21] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[21:21] == 1'b1) addr_shift_reg[21:21] <= wire_addr_shift_reg_asdata[21:21];
			else  addr_shift_reg[21:21] <= wire_addr_shift_reg_d[21:21];
	// synopsys translate_off
	initial
		addr_shift_reg[22:22] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[22:22] == 1'b1) addr_shift_reg[22:22] <= wire_addr_shift_reg_asdata[22:22];
			else  addr_shift_reg[22:22] <= wire_addr_shift_reg_d[22:22];
	// synopsys translate_off
	initial
		addr_shift_reg[23:23] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[23:23] == 1'b1) addr_shift_reg[23:23] <= wire_addr_shift_reg_asdata[23:23];
			else  addr_shift_reg[23:23] <= wire_addr_shift_reg_d[23:23];
	// synopsys translate_off
	initial
		addr_shift_reg[24:24] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[24:24] == 1'b1) addr_shift_reg[24:24] <= wire_addr_shift_reg_asdata[24:24];
			else  addr_shift_reg[24:24] <= wire_addr_shift_reg_d[24:24];
	// synopsys translate_off
	initial
		addr_shift_reg[25:25] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[25:25] == 1'b1) addr_shift_reg[25:25] <= wire_addr_shift_reg_asdata[25:25];
			else  addr_shift_reg[25:25] <= wire_addr_shift_reg_d[25:25];
	// synopsys translate_off
	initial
		addr_shift_reg[26:26] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[26:26] == 1'b1) addr_shift_reg[26:26] <= wire_addr_shift_reg_asdata[26:26];
			else  addr_shift_reg[26:26] <= wire_addr_shift_reg_d[26:26];
	// synopsys translate_off
	initial
		addr_shift_reg[27:27] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[27:27] == 1'b1) addr_shift_reg[27:27] <= wire_addr_shift_reg_asdata[27:27];
			else  addr_shift_reg[27:27] <= wire_addr_shift_reg_d[27:27];
	// synopsys translate_off
	initial
		addr_shift_reg[28:28] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[28:28] == 1'b1) addr_shift_reg[28:28] <= wire_addr_shift_reg_asdata[28:28];
			else  addr_shift_reg[28:28] <= wire_addr_shift_reg_d[28:28];
	// synopsys translate_off
	initial
		addr_shift_reg[29:29] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[29:29] == 1'b1) addr_shift_reg[29:29] <= wire_addr_shift_reg_asdata[29:29];
			else  addr_shift_reg[29:29] <= wire_addr_shift_reg_d[29:29];
	// synopsys translate_off
	initial
		addr_shift_reg[30:30] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[30:30] == 1'b1) addr_shift_reg[30:30] <= wire_addr_shift_reg_asdata[30:30];
			else  addr_shift_reg[30:30] <= wire_addr_shift_reg_d[30:30];
	// synopsys translate_off
	initial
		addr_shift_reg[31:31] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_addr_shift_reg_sload[31:31] == 1'b1) addr_shift_reg[31:31] <= wire_addr_shift_reg_asdata[31:31];
			else  addr_shift_reg[31:31] <= wire_addr_shift_reg_d[31:31];
	assign
		wire_addr_shift_reg_asdata = {{2{2'b00}}, 4'b0000, quad_address, 2'b10, 8'b10000000, address_in},
		wire_addr_shift_reg_d = {addr_shift_reg[30:8], real_address[7], address_in};
	assign
		wire_addr_shift_reg_sload = {{24{wire_pre_amble_cmpr_aeb}}, 8'b00000000};
	// synopsys translate_off
	initial
		in_data_shift_reg = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		if (rd_data_input_state == 1'b1)   in_data_shift_reg <= {in_data_shift_reg[14:0], dprioout};
	// synopsys translate_off
	initial
		rd_out_data_shift_reg = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_pre_amble_cmpr_aeb == 1'b1) rd_out_data_shift_reg <= {2'b00, {2{1'b1}}, 4'b0000, quad_address, 2'b10};
			else  rd_out_data_shift_reg <= {rd_out_data_shift_reg[14:0], 1'b0};
	// synopsys translate_off
	initial
		real_address = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_pre_amble_cmpr_aeb == 1'b1) real_address <= (({8{is_pcs_address}} & wire_odd_addr_trans_result) | ({8{(~ is_pcs_address)}} & addr_shift_reg[7:0]));
			else  real_address <= {real_address[6:0], 1'b0};
	// synopsys translate_off
	initial
		startup_cntr[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		if (wire_startup_cntr_ena[0:0] == 1'b1)   startup_cntr[0:0] <= wire_startup_cntr_d[0:0];
	// synopsys translate_off
	initial
		startup_cntr[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		if (wire_startup_cntr_ena[1:1] == 1'b1)   startup_cntr[1:1] <= wire_startup_cntr_d[1:1];
	// synopsys translate_off
	initial
		startup_cntr[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		if (wire_startup_cntr_ena[2:2] == 1'b1)   startup_cntr[2:2] <= wire_startup_cntr_d[2:2];
	assign
		wire_startup_cntr_d = {(startup_cntr[2] ^ (startup_cntr[1] & startup_cntr[0])), (startup_cntr[0] ^ startup_cntr[1]), (~ startup_cntr[0])};
	assign
		wire_startup_cntr_ena = {3{((((rden | wren) | rdinc) | (~ startup_idle)) & (~ startup_done))}};
	// synopsys translate_off
	initial
		state_mc_reg = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		  state_mc_reg <= {(s2_to_1 | (((~ s2_to_0) & (~ s2_to_1)) & state_mc_reg[2])), (s1_to_1 | (((~ s1_to_0) & (~ s1_to_1)) & state_mc_reg[1])), (s0_to_1 | (((~ s0_to_0) & (~ s0_to_1)) & state_mc_reg[0]))};
	// synopsys translate_off
	initial
		wr_out_data_shift_reg = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		
			if (wire_pre_amble_cmpr_aeb == 1'b1) wr_out_data_shift_reg <= {2'b00, 2'b01, 4'b0000, quad_address, 2'b10, datain};
			else  wr_out_data_shift_reg <= {wr_out_data_shift_reg[30:0], 1'b0};
	lpm_add_sub   odd_addr_trans
	( 
	.add_sub(is_pcs_address),
	.cout(),
	.dataa(addr_shift_reg[7:0]),
	.datab(8'b00000001),
	.overflow(),
	.result(wire_odd_addr_trans_result)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.cin(),
	.clken(1'b1),
	.clock(1'b0)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		odd_addr_trans.lpm_width = 8,
		odd_addr_trans.lpm_type = "lpm_add_sub",
		odd_addr_trans.lpm_hint = "ONE_INPUT_IS_CONSTANT=YES";
	lpm_compare   pre_amble_cmpr
	( 
	.aeb(wire_pre_amble_cmpr_aeb),
	.agb(wire_pre_amble_cmpr_agb),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_state_mc_counter_q),
	.datab(6'b011111)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		pre_amble_cmpr.lpm_width = 6,
		pre_amble_cmpr.lpm_type = "lpm_compare";
	lpm_compare   rd_data_output_cmpr
	( 
	.aeb(),
	.agb(),
	.ageb(wire_rd_data_output_cmpr_ageb),
	.alb(wire_rd_data_output_cmpr_alb),
	.aleb(),
	.aneb(),
	.dataa(wire_state_mc_counter_q),
	.datab(6'b110000)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		rd_data_output_cmpr.lpm_width = 6,
		rd_data_output_cmpr.lpm_type = "lpm_compare";
	lpm_compare   state_mc_cmpr
	( 
	.aeb(wire_state_mc_cmpr_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_state_mc_counter_q),
	.datab(6'b111111)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		state_mc_cmpr.lpm_width = 6,
		state_mc_cmpr.lpm_type = "lpm_compare";
	lpm_counter   state_mc_counter
	( 
	.clock(dpclk),
	.cnt_en((write_state | read_state)),
	.cout(),
	.eq(),
	.q(wire_state_mc_counter_q)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.aload(1'b0),
	.aset(1'b0),
	.cin(1'b1),
	.clk_en(1'b1),
	.data({6{1'b0}}),
	.sclr(1'b0),
	.sload(1'b0),
	.sset(1'b0),
	.updown(1'b1)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		state_mc_counter.lpm_port_updown = "PORT_UNUSED",
		state_mc_counter.lpm_width = 6,
		state_mc_counter.lpm_type = "lpm_counter";
	lpm_decode   state_mc_decode
	( 
	.data(state_mc_reg),
	.eq(wire_state_mc_decode_eq)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0),
	.enable(1'b1)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		state_mc_decode.lpm_decodes = 8,
		state_mc_decode.lpm_width = 3,
		state_mc_decode.lpm_type = "lpm_decode";
	or(wire_dprioin_mux_dataout, ((((((wr_addr_state | rd_addr_state) & addr_shift_reg[31]) & wire_pre_amble_cmpr_agb) | ((~ wire_pre_amble_cmpr_agb) & (wr_addr_state | rd_addr_state))) | (((wr_data_state & wr_out_data_shift_reg[31]) & wire_pre_amble_cmpr_agb) | ((~ wire_pre_amble_cmpr_agb) & wr_data_state))) | (((rd_data_output_state & rd_out_data_shift_reg[15]) & wire_pre_amble_cmpr_agb) | ((~ wire_pre_amble_cmpr_agb) & rd_data_output_state))), ~{((write_state | rd_addr_state) | rd_data_output_state)});
	assign
		address_in = address,
		busy = busy_state,
		busy_state = (write_state | read_state),
		dataout = in_data_shift_reg,
		dpriodisable = (~ (startup_cntr[2] & (startup_cntr[0] | startup_cntr[1]))),
		dprioin = wire_dprioin_mux_dataout,
		dprioload = (~ ((startup_cntr[0] ^ startup_cntr[1]) & (~ startup_cntr[2]))),
		idle_state = wire_state_mc_decode_eq[0],
		rd_addr_done = (rd_addr_state & wire_state_mc_cmpr_aeb),
		rd_addr_state = (wire_state_mc_decode_eq[5] & startup_done),
		rd_data_done = (rd_data_state & wire_state_mc_cmpr_aeb),
		rd_data_input_state = (wire_rd_data_output_cmpr_ageb & rd_data_state),
		rd_data_output_state = (wire_rd_data_output_cmpr_alb & rd_data_state),
		rd_data_state = (wire_state_mc_decode_eq[7] & startup_done),
		rdinc = 1'b0,
		read_state = (rd_addr_state | rd_data_state),
		s0_to_0 = ((wr_data_state & wr_data_done) | (rd_data_state & rd_data_done)),
		s0_to_1 = (((idle_state & (wren | ((~ wren) & (rden | rdinc)))) | (wr_addr_state & wr_addr_done)) | (rd_addr_state & rd_addr_done)),
		s1_to_0 = (((wr_data_state & wr_data_done) | (rd_data_state & rd_data_done)) | (idle_state & (wren | ((~ wren) & rden)))),
		s1_to_1 = (((idle_state & ((~ wren) & rdinc)) | (wr_addr_state & wr_addr_done)) | (rd_addr_state & rd_addr_done)),
		s2_to_0 = ((((wr_addr_state & wr_addr_done) | (wr_data_state & wr_data_done)) | (rd_data_state & rd_data_done)) | (idle_state & wren)),
		s2_to_1 = ((idle_state & ((~ wren) & (rdinc | rden))) | (rd_addr_state & rd_addr_done)),
		startup_done = ((startup_cntr[2] & (~ startup_cntr[0])) & startup_cntr[1]),
		startup_idle = ((~ startup_cntr[0]) & (~ (startup_cntr[2] ^ startup_cntr[1]))),
		status_out = {rd_data_done, rd_addr_done, wr_data_done, wr_addr_done},
		wr_addr_done = (wr_addr_state & wire_state_mc_cmpr_aeb),
		wr_addr_state = (wire_state_mc_decode_eq[1] & startup_done),
		wr_data_done = (wr_data_state & wire_state_mc_cmpr_aeb),
		wr_data_state = (wire_state_mc_decode_eq[3] & startup_done),
		write_state = (wr_addr_state | wr_data_state);
endmodule //sdi_4_ch_alt2gxb_reconfig_alt_dprio_fnh

//synthesis_resources = lpm_add_sub 2 lpm_compare 9 lpm_counter 3 lpm_decode 3 lpm_mux 1 lut 1 reg 164 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  sdi_4_ch_alt2gxb_reconfig_alt2gxb_reconfig_n3v
	( 
	busy,
	channel_reconfig_done,
	logical_channel_address,
	reconfig_address_en,
	reconfig_address_out,
	reconfig_clk,
	reconfig_data,
	reconfig_fromgxb,
	reconfig_mode_sel,
	reconfig_togxb,
	write_all) /* synthesis synthesis_clearbox=1 */
		/* synthesis ALTERA_ATTRIBUTE="{-to address_pres_reg[7]} DPRIO_CHANNEL_NUM=7;{-to address_pres_reg[6]} DPRIO_CHANNEL_NUM=6;{-to address_pres_reg[5]} DPRIO_CHANNEL_NUM=5;{-to address_pres_reg[4]} DPRIO_CHANNEL_NUM=4;{-to address_pres_reg[3]} DPRIO_CHANNEL_NUM=3;{-to address_pres_reg[2]} DPRIO_CHANNEL_NUM=2;{-to address_pres_reg[1]} DPRIO_CHANNEL_NUM=1;{-to address_pres_reg[0]} DPRIO_CHANNEL_NUM=0;{-to cru_num_reg[2]} DPRIO_CRUCLK_NUM=2;{-to cru_num_reg[1]} DPRIO_CRUCLK_NUM=1;{-to cru_num_reg[0]} DPRIO_CRUCLK_NUM=0;{-to tx_cmu_sel} DPRIO_TX_PLL_NUM=0" */;
	output   busy;
	output   channel_reconfig_done;
	input   [3:0]  logical_channel_address;
	output   reconfig_address_en;
	output   [4:0]  reconfig_address_out;
	input   reconfig_clk;
	input   [15:0]  reconfig_data;
	input   [3:0]  reconfig_fromgxb;
	input   [2:0]  reconfig_mode_sel;
	output   [2:0]  reconfig_togxb;
	input   write_all;

	wire  wire_dprio_busy;
	wire  [15:0]   wire_dprio_dataout;
	wire  wire_dprio_dpriodisable;
	wire  wire_dprio_dprioin;
	wire  wire_dprio_dprioload;
	wire  [3:0]   wire_dprio_status_out;
	reg	[7:0]	address_pres_reg/* synthesis ALTERA_ATTRIBUTE="PRESERVE_REGISTER=ON" */;
	wire	[2:0]	wire_cru_num_reg_d;
	reg	[2:0]	cru_num_reg/* synthesis ALTERA_ATTRIBUTE="PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW" */;
	wire	[2:0]	wire_cru_num_reg_ena;
	reg	delay_mif_head/* synthesis ALTERA_ATTRIBUTE="POWER_UP_LEVEL=LOW" */;
	wire	wire_delay_mif_head_ena;
	wire	[15:0]	wire_dprio_dataout_reg_d;
	reg	[15:0]	dprio_dataout_reg/* synthesis ALTERA_ATTRIBUTE="POWER_UP_LEVEL=LOW" */;
	wire	[15:0]	wire_dprio_dataout_reg_ena;
	reg	dprio_pulse_reg/* synthesis ALTERA_ATTRIBUTE="POWER_UP_LEVEL=LOW" */;
	wire	wire_dprio_pulse_reg_ena;
	reg	mif_stage/* synthesis ALTERA_ATTRIBUTE="POWER_UP_LEVEL=LOW" */;
	reg	[2:0]	reconf_mode_sel_reg/* synthesis ALTERA_ATTRIBUTE="POWER_UP_LEVEL=LOW" */;
	wire	[2:0]	wire_reconf_mode_sel_reg_ena;
	reg	[15:0]	reconfig_data_reg/* synthesis ALTERA_ATTRIBUTE="POWER_UP_LEVEL=LOW" */;
	wire	[15:0]	wire_reconfig_data_reg_ena;
	reg	reconfig_done_reg/* synthesis ALTERA_ATTRIBUTE="POWER_UP_LEVEL=LOW" */;
	wire	wire_reconfig_done_reg_ena;
	reg	tx_cmu_sel/* synthesis ALTERA_ATTRIBUTE="PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW" */;
	wire	wire_tx_cmu_sel_ena;
	reg	wr_addr_inc_reg/* synthesis ALTERA_ATTRIBUTE="POWER_UP_LEVEL=LOW" */;
	reg	wr_rd_pulse_reg/* synthesis ALTERA_ATTRIBUTE="POWER_UP_LEVEL=LOW" */;
	wire	wire_wr_rd_pulse_reg_ena;
	reg	write_state_reg;
	wire  [5:0]   wire_mif_addr_trans_result;
	wire  wire_addr_cmpr_aeb;
	wire  wire_cmpr_mif_sec_agb;
	wire  wire_is_cru_idx0_aeb;
	wire  wire_is_cru_idx1_aeb;
	wire  wire_is_end_mif_word_aeb;
	wire  wire_is_end_mif_word_agb;
	wire  wire_is_special_address_aeb;
	wire  [3:0]   wire_addr_cntr_q;
	wire  [4:0]   wire_mif_addr_cntr_q;
	wire  [15:0]   wire_chl_addr_decode_eq;
	wire  [7:0]   wire_reconf_mode_dec_eq;
	wire  [0:0]   wire_dprioout_mux_result;
	wire  [7:0]  a2gr_dprio_addr;
	wire  [15:0]  a2gr_dprio_data;
	wire  [5:0]  a2gr_dprio_quad_addr;
	wire  a2gr_dprio_rden;
	wire  a2gr_dprio_wren;
	wire  busy_state;
	wire  [1:0]  channel_address;
	wire  [1:0]  channel_address_out;
	wire  chl_addr_inc;
	wire  [2:0]  cruclk_addr1_msb_in;
	wire  [15:0]  cruclk_mux_data;
	wire  delay_mif_head_out;
	wire  [15:0]  dprio_datain;
	wire  [15:0]  dprio_datain_60_63;
	wire  [15:0]  dprio_datain_64_67;
	wire  [15:0]  dprio_datain_68_6B;
	wire  [15:0]  dprio_datain_7c_7f;
	wire  dprio_pulse;
	wire  dprio_wr_done;
	wire  en_mif_addr_cntr;
	wire  header_proc;
	wire  idle_state;
	wire  internal_write_pulse;
	wire  is_analog_control;
	wire  is_ch_reconf_end;
	wire  is_cruclk_addr0;
	wire  is_cruclk_addr1;
	wire  is_end_mif;
	wire  is_mif_header;
	wire  is_pll_addr;
	wire  is_pll_reset_stage;
	wire  is_pma;
	wire  is_tier_1;
	wire  is_tier_2;
	wire  is_tx_local_div_ctrl;
	wire  load_pll_first_word;
	wire  [15:0]  merged_dprioin;
	wire  [5:0]  mif_dec_datab;
	wire  [4:0]  pll_first_word_addr;
	wire  [7:0]  pll_reset_addr;
	wire  [5:0]  quad_address;
	wire  [5:0]  quad_address_out;
	wire  rd_pulse;
	wire read;
	wire  [7:0]  read_address;
	wire  [7:0]  read_reconfig_addr;
	wire  read_state;
	wire  reconf_done_reg_out;
	wire  [15:0]  reconfig_datain;
	wire  reset_addr_done;
	wire  reset_reconf_addr;
	wire  s0_to_0;
	wire  s0_to_1;
	wire  [4:0]  tx_switch_rate_addr;
	wire  wr_pulse;
	wire  write_addr_inc;
	wire  [7:0]  write_address;
	wire  write_all_int;
	wire  write_done;
	wire  write_happened;
	wire  write_mif_word_done;
	wire  [7:0]  write_reconfig_addr;
	wire  write_state;
	wire  write_word_60_63_data_valid;
	wire  write_word_64_67_data_valid;
	wire  write_word_68_6B_data_valid;
	wire  write_word_7c_7f_data_valid;
	wire  write_word_done;

	sdi_4_ch_alt2gxb_reconfig_alt_dprio_fnh   dprio
	( 
	.address(a2gr_dprio_addr),
	.busy(wire_dprio_busy),
	.datain(a2gr_dprio_data),
	.dataout(wire_dprio_dataout),
	.dpclk(reconfig_clk),
	.dpriodisable(wire_dprio_dpriodisable),
	.dprioin(wire_dprio_dprioin),
	.dprioload(wire_dprio_dprioload),
	.dprioout(wire_dprioout_mux_result),
	.is_pcs_address(((~ is_pma) & (~ is_analog_control))),
	.quad_address(a2gr_dprio_quad_addr),
	.rden(a2gr_dprio_rden),
	.status_out(wire_dprio_status_out),
	.wren(a2gr_dprio_wren));
	// synopsys translate_off
	initial
		address_pres_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		  address_pres_reg <= {quad_address, channel_address};
	// synopsys translate_off
	initial
		cru_num_reg[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_cru_num_reg_ena[0:0] == 1'b1)   cru_num_reg[0:0] <= wire_cru_num_reg_d[0:0];
	// synopsys translate_off
	initial
		cru_num_reg[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_cru_num_reg_ena[1:1] == 1'b1)   cru_num_reg[1:1] <= wire_cru_num_reg_d[1:1];
	// synopsys translate_off
	initial
		cru_num_reg[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_cru_num_reg_ena[2:2] == 1'b1)   cru_num_reg[2:2] <= wire_cru_num_reg_d[2:2];
	assign
		wire_cru_num_reg_d = reconfig_data_reg[15:13];
	assign
		wire_cru_num_reg_ena = {3{((is_mif_header & (~ write_mif_word_done)) & is_tier_1)}};
	// synopsys translate_off
	initial
		delay_mif_head = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_delay_mif_head_ena == 1'b1)   delay_mif_head <= (is_mif_header & is_tier_1);
	assign
		wire_delay_mif_head_ena = (write_state & (~ write_mif_word_done));
	// synopsys translate_off
	initial
		dprio_dataout_reg[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[0:0] == 1'b1)   dprio_dataout_reg[0:0] <= wire_dprio_dataout_reg_d[0:0];
	// synopsys translate_off
	initial
		dprio_dataout_reg[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[1:1] == 1'b1)   dprio_dataout_reg[1:1] <= wire_dprio_dataout_reg_d[1:1];
	// synopsys translate_off
	initial
		dprio_dataout_reg[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[2:2] == 1'b1)   dprio_dataout_reg[2:2] <= wire_dprio_dataout_reg_d[2:2];
	// synopsys translate_off
	initial
		dprio_dataout_reg[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[3:3] == 1'b1)   dprio_dataout_reg[3:3] <= wire_dprio_dataout_reg_d[3:3];
	// synopsys translate_off
	initial
		dprio_dataout_reg[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[4:4] == 1'b1)   dprio_dataout_reg[4:4] <= wire_dprio_dataout_reg_d[4:4];
	// synopsys translate_off
	initial
		dprio_dataout_reg[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[5:5] == 1'b1)   dprio_dataout_reg[5:5] <= wire_dprio_dataout_reg_d[5:5];
	// synopsys translate_off
	initial
		dprio_dataout_reg[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[6:6] == 1'b1)   dprio_dataout_reg[6:6] <= wire_dprio_dataout_reg_d[6:6];
	// synopsys translate_off
	initial
		dprio_dataout_reg[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[7:7] == 1'b1)   dprio_dataout_reg[7:7] <= wire_dprio_dataout_reg_d[7:7];
	// synopsys translate_off
	initial
		dprio_dataout_reg[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[8:8] == 1'b1)   dprio_dataout_reg[8:8] <= wire_dprio_dataout_reg_d[8:8];
	// synopsys translate_off
	initial
		dprio_dataout_reg[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[9:9] == 1'b1)   dprio_dataout_reg[9:9] <= wire_dprio_dataout_reg_d[9:9];
	// synopsys translate_off
	initial
		dprio_dataout_reg[10:10] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[10:10] == 1'b1)   dprio_dataout_reg[10:10] <= wire_dprio_dataout_reg_d[10:10];
	// synopsys translate_off
	initial
		dprio_dataout_reg[11:11] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[11:11] == 1'b1)   dprio_dataout_reg[11:11] <= wire_dprio_dataout_reg_d[11:11];
	// synopsys translate_off
	initial
		dprio_dataout_reg[12:12] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[12:12] == 1'b1)   dprio_dataout_reg[12:12] <= wire_dprio_dataout_reg_d[12:12];
	// synopsys translate_off
	initial
		dprio_dataout_reg[13:13] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[13:13] == 1'b1)   dprio_dataout_reg[13:13] <= wire_dprio_dataout_reg_d[13:13];
	// synopsys translate_off
	initial
		dprio_dataout_reg[14:14] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[14:14] == 1'b1)   dprio_dataout_reg[14:14] <= wire_dprio_dataout_reg_d[14:14];
	// synopsys translate_off
	initial
		dprio_dataout_reg[15:15] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_dataout_reg_ena[15:15] == 1'b1)   dprio_dataout_reg[15:15] <= wire_dprio_dataout_reg_d[15:15];
	assign
		wire_dprio_dataout_reg_d = {wire_dprio_dataout[15:0]};
	assign
		wire_dprio_dataout_reg_ena = {16{(dprio_pulse & (~ idle_state))}};
	// synopsys translate_off
	initial
		dprio_pulse_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_dprio_pulse_reg_ena == 1'b1)   dprio_pulse_reg <= wire_dprio_busy;
	assign
		wire_dprio_pulse_reg_ena = (read_state | write_state);
	// synopsys translate_off
	initial
		mif_stage = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (is_tier_1 == 1'b1)   mif_stage <= (((~ mif_stage) & is_mif_header) | ((~ (is_mif_header & dprio_pulse)) & mif_stage));
	// synopsys translate_off
	initial
		reconf_mode_sel_reg[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconf_mode_sel_reg_ena[0:0] == 1'b1)   reconf_mode_sel_reg[0:0] <= reconfig_mode_sel[0:0];
	// synopsys translate_off
	initial
		reconf_mode_sel_reg[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconf_mode_sel_reg_ena[1:1] == 1'b1)   reconf_mode_sel_reg[1:1] <= reconfig_mode_sel[1:1];
	// synopsys translate_off
	initial
		reconf_mode_sel_reg[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconf_mode_sel_reg_ena[2:2] == 1'b1)   reconf_mode_sel_reg[2:2] <= reconfig_mode_sel[2:2];
	assign
		wire_reconf_mode_sel_reg_ena = {3{(idle_state & (~ mif_stage))}};
	// synopsys translate_off
	initial
		reconfig_data_reg[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[0:0] == 1'b1)   reconfig_data_reg[0:0] <= reconfig_data[0:0];
	// synopsys translate_off
	initial
		reconfig_data_reg[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[1:1] == 1'b1)   reconfig_data_reg[1:1] <= reconfig_data[1:1];
	// synopsys translate_off
	initial
		reconfig_data_reg[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[2:2] == 1'b1)   reconfig_data_reg[2:2] <= reconfig_data[2:2];
	// synopsys translate_off
	initial
		reconfig_data_reg[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[3:3] == 1'b1)   reconfig_data_reg[3:3] <= reconfig_data[3:3];
	// synopsys translate_off
	initial
		reconfig_data_reg[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[4:4] == 1'b1)   reconfig_data_reg[4:4] <= reconfig_data[4:4];
	// synopsys translate_off
	initial
		reconfig_data_reg[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[5:5] == 1'b1)   reconfig_data_reg[5:5] <= reconfig_data[5:5];
	// synopsys translate_off
	initial
		reconfig_data_reg[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[6:6] == 1'b1)   reconfig_data_reg[6:6] <= reconfig_data[6:6];
	// synopsys translate_off
	initial
		reconfig_data_reg[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[7:7] == 1'b1)   reconfig_data_reg[7:7] <= reconfig_data[7:7];
	// synopsys translate_off
	initial
		reconfig_data_reg[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[8:8] == 1'b1)   reconfig_data_reg[8:8] <= reconfig_data[8:8];
	// synopsys translate_off
	initial
		reconfig_data_reg[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[9:9] == 1'b1)   reconfig_data_reg[9:9] <= reconfig_data[9:9];
	// synopsys translate_off
	initial
		reconfig_data_reg[10:10] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[10:10] == 1'b1)   reconfig_data_reg[10:10] <= reconfig_data[10:10];
	// synopsys translate_off
	initial
		reconfig_data_reg[11:11] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[11:11] == 1'b1)   reconfig_data_reg[11:11] <= reconfig_data[11:11];
	// synopsys translate_off
	initial
		reconfig_data_reg[12:12] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[12:12] == 1'b1)   reconfig_data_reg[12:12] <= reconfig_data[12:12];
	// synopsys translate_off
	initial
		reconfig_data_reg[13:13] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[13:13] == 1'b1)   reconfig_data_reg[13:13] <= reconfig_data[13:13];
	// synopsys translate_off
	initial
		reconfig_data_reg[14:14] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[14:14] == 1'b1)   reconfig_data_reg[14:14] <= reconfig_data[14:14];
	// synopsys translate_off
	initial
		reconfig_data_reg[15:15] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_data_reg_ena[15:15] == 1'b1)   reconfig_data_reg[15:15] <= reconfig_data[15:15];
	assign
		wire_reconfig_data_reg_ena = {16{(idle_state & write_all)}};
	// synopsys translate_off
	initial
		reconfig_done_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_reconfig_done_reg_ena == 1'b1)   reconfig_done_reg <= (((is_end_mif & wire_reconf_mode_dec_eq[1]) & (~ reconfig_done_reg)) | (reconfig_done_reg & is_mif_header));
	assign
		wire_reconfig_done_reg_ena = (((en_mif_addr_cntr | delay_mif_head_out) & is_tier_1) | ((~ idle_state) & (~ is_tier_1)));
	// synopsys translate_off
	initial
		tx_cmu_sel = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_tx_cmu_sel_ena == 1'b1)   tx_cmu_sel <= (((~ wire_reconf_mode_dec_eq[4]) & reconfig_data_reg[13]) | (wire_reconf_mode_dec_eq[4] & reconfig_data_reg[6]));
	assign
		wire_tx_cmu_sel_ena = ((is_cruclk_addr1 & (~ write_mif_word_done)) | (wire_reconf_mode_dec_eq[4] & is_mif_header));
	// synopsys translate_off
	initial
		wr_addr_inc_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		  wr_addr_inc_reg <= (wr_pulse | (((~ wr_pulse) & (~ rd_pulse)) & wr_addr_inc_reg));
	// synopsys translate_off
	initial
		wr_rd_pulse_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (wire_wr_rd_pulse_reg_ena == 1'b1)   wr_rd_pulse_reg <= (~ wr_rd_pulse_reg);
	assign
		wire_wr_rd_pulse_reg_ena = ((dprio_pulse & ((~ is_tier_1) | (is_tier_1 & (((is_end_mif & (~ write_done)) | is_mif_header) | is_pll_addr)))) & (~ read_state));
	// synopsys translate_off
	initial
		write_state_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		  write_state_reg <= (s0_to_1 | (((~ s0_to_1) & (~ s0_to_0)) & write_state_reg));
	lpm_add_sub   mif_addr_trans
	( 
	.add_sub(is_pma),
	.cout(),
	.dataa({{1{1'b0}}, (({5{is_tx_local_div_ctrl}} & tx_switch_rate_addr) | ({5{(~ is_tx_local_div_ctrl)}} & wire_mif_addr_cntr_q))}),
	.datab(mif_dec_datab),
	.overflow(),
	.result(wire_mif_addr_trans_result)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.cin(),
	.clken(1'b1),
	.clock(1'b0)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		mif_addr_trans.lpm_width = 6,
		mif_addr_trans.lpm_type = "lpm_add_sub";
	lpm_compare   addr_cmpr
	( 
	.aeb(wire_addr_cmpr_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_addr_cntr_q),
	.datab(4'b1111)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		addr_cmpr.lpm_width = 4,
		addr_cmpr.lpm_type = "lpm_compare";
	lpm_compare   cmpr_mif_sec
	( 
	.aeb(),
	.agb(wire_cmpr_mif_sec_agb),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa((({5{is_tx_local_div_ctrl}} & tx_switch_rate_addr) | ({5{(~ is_tx_local_div_ctrl)}} & wire_mif_addr_cntr_q))),
	.datab(5'b10000)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr_mif_sec.lpm_width = 5,
		cmpr_mif_sec.lpm_type = "lpm_compare";
	lpm_compare   is_cru_idx0
	( 
	.aeb(wire_is_cru_idx0_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_mif_addr_cntr_q),
	.datab(5'b10110)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		is_cru_idx0.lpm_width = 5,
		is_cru_idx0.lpm_type = "lpm_compare";
	lpm_compare   is_cru_idx1
	( 
	.aeb(wire_is_cru_idx1_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_mif_addr_cntr_q),
	.datab(5'b10100)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		is_cru_idx1.lpm_width = 5,
		is_cru_idx1.lpm_type = "lpm_compare";
	lpm_compare   is_end_mif_word
	( 
	.aeb(wire_is_end_mif_word_aeb),
	.agb(wire_is_end_mif_word_agb),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_mif_addr_cntr_q),
	.datab(5'b11011)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		is_end_mif_word.lpm_width = 5,
		is_end_mif_word.lpm_type = "lpm_compare";
	lpm_compare   is_special_address
	( 
	.aeb(wire_is_special_address_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_mif_addr_cntr_q),
	.datab(5'b00000)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		is_special_address.lpm_width = 5,
		is_special_address.lpm_type = "lpm_compare";
	lpm_counter   addr_cntr
	( 
	.clock(reconfig_clk),
	.cnt_en((chl_addr_inc & is_analog_control)),
	.cout(),
	.data(logical_channel_address),
	.eq(),
	.q(wire_addr_cntr_q),
	.sload(((idle_state & (write_all | read)) & ((reconfig_mode_sel[2] | reconfig_mode_sel[1]) | reconfig_mode_sel[0])))
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.aload(1'b0),
	.aset(1'b0),
	.cin(1'b1),
	.clk_en(1'b1),
	.sclr(1'b0),
	.sset(1'b0),
	.updown(1'b1)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		addr_cntr.lpm_modulus = 16,
		addr_cntr.lpm_port_updown = "PORT_UNUSED",
		addr_cntr.lpm_width = 4,
		addr_cntr.lpm_type = "lpm_counter";
	lpm_counter   mif_addr_cntr
	( 
	.clock(reconfig_clk),
	.cnt_en(((en_mif_addr_cntr | ((is_mif_header & write_state) & (~ dprio_pulse))) & is_tier_1)),
	.cout(),
	.data(pll_first_word_addr),
	.eq(),
	.q(wire_mif_addr_cntr_q),
	.sclr(((reset_reconf_addr | (is_ch_reconf_end & dprio_wr_done)) & (~ (load_pll_first_word & (~ write_done))))),
	.sload((load_pll_first_word & (~ write_done)))
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.aload(1'b0),
	.aset(1'b0),
	.cin(1'b1),
	.clk_en(1'b1),
	.sset(1'b0),
	.updown(1'b1)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		mif_addr_cntr.lpm_modulus = 28,
		mif_addr_cntr.lpm_port_updown = "PORT_UNUSED",
		mif_addr_cntr.lpm_width = 5,
		mif_addr_cntr.lpm_type = "lpm_counter";
	lpm_decode   chl_addr_decode
	( 
	.data(wire_addr_cntr_q),
	.eq(wire_chl_addr_decode_eq)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0),
	.enable(1'b1)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		chl_addr_decode.lpm_decodes = 16,
		chl_addr_decode.lpm_width = 4,
		chl_addr_decode.lpm_type = "lpm_decode";
	lpm_decode   reconf_mode_dec
	( 
	.data(reconf_mode_sel_reg),
	.enable(((~ idle_state) | mif_stage)),
	.eq(wire_reconf_mode_dec_eq)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		reconf_mode_dec.lpm_decodes = 8,
		reconf_mode_dec.lpm_width = 3,
		reconf_mode_dec.lpm_type = "lpm_decode";
	lpm_mux   dprioout_mux
	( 
	.data(reconfig_fromgxb),
	.result(wire_dprioout_mux_result),
	.sel(quad_address[1:0])
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifdef FORMAL_VERIFICATION
	`else
	// synopsys translate_on
	`endif
	);
	defparam
		dprioout_mux.lpm_size = 4,
		dprioout_mux.lpm_width = 1,
		dprioout_mux.lpm_widths = 2,
		dprioout_mux.lpm_type = "lpm_mux";
	assign
		a2gr_dprio_addr = ((((write_address & {8{is_analog_control}}) | ({8{(~ is_analog_control)}} & write_reconfig_addr)) & {8{write_state}}) | (((read_address & {8{is_analog_control}}) | ({8{(~ is_analog_control)}} & read_reconfig_addr)) & {8{read_state}})),
		a2gr_dprio_data = dprio_datain,
		a2gr_dprio_quad_addr = quad_address_out,
		a2gr_dprio_rden = rd_pulse,
		a2gr_dprio_wren = wr_pulse,
		busy = (busy_state | internal_write_pulse),
		busy_state = write_state,
		channel_address = wire_addr_cntr_q[1:0],
		channel_address_out = address_pres_reg[1:0],
		channel_reconfig_done = (reconf_done_reg_out & idle_state),
		chl_addr_inc = ((read_state & dprio_pulse) | ((write_state & dprio_pulse) & write_happened)),
		cruclk_addr1_msb_in = {reconfig_data_reg[15:14], tx_cmu_sel},
		cruclk_mux_data = {(((cru_num_reg & {3{(~ (cru_num_reg[1] & cru_num_reg[2]))}}) & {3{is_cruclk_addr0}}) | (cruclk_addr1_msb_in & {3{(~ is_cruclk_addr0)}})), reconfig_data_reg[12:2], (((~ (cru_num_reg[2] & cru_num_reg[1])) & is_cruclk_addr1) | ((~ is_cruclk_addr1) & reconfig_data_reg[1])), (((~ ((cru_num_reg[2] & cru_num_reg[1]) & (~ cru_num_reg[0]))) & is_cruclk_addr1) | ((~ is_cruclk_addr1) & reconfig_data_reg[0]))},
		delay_mif_head_out = delay_mif_head,
		dprio_datain = ((((((dprio_datain_60_63 & {16{write_word_60_63_data_valid}}) | (dprio_datain_64_67 & {16{write_word_64_67_data_valid}})) | (dprio_datain_68_6B & {16{write_word_68_6B_data_valid}})) | (dprio_datain_7c_7f & {16{write_word_7c_7f_data_valid}})) & {16{is_analog_control}}) | ({16{((is_tier_1 | is_tier_2) | is_tx_local_div_ctrl)}} & reconfig_datain)),
		dprio_datain_60_63 = 16'b0000000000000000,
		dprio_datain_64_67 = 16'b0000000000000000,
		dprio_datain_68_6B = 16'b0000000000000000,
		dprio_datain_7c_7f = 16'b0000000000000000,
		dprio_pulse = ((dprio_pulse_reg ^ wire_dprio_busy) & (~ wire_dprio_busy)),
		dprio_wr_done = wire_dprio_status_out[1],
		en_mif_addr_cntr = ((read_state & dprio_wr_done) | ((write_state & dprio_wr_done) & write_happened)),
		header_proc = ((delay_mif_head | is_mif_header) & is_tier_1),
		idle_state = (~ write_state_reg),
		internal_write_pulse = 1'b0,
		is_analog_control = wire_reconf_mode_dec_eq[0],
		is_ch_reconf_end = (is_end_mif & (wire_reconf_mode_dec_eq[1] | wire_reconf_mode_dec_eq[6])),
		is_cruclk_addr0 = (wire_is_cru_idx0_aeb & is_tier_1),
		is_cruclk_addr1 = (wire_is_cru_idx1_aeb & is_tier_1),
		is_end_mif = (wire_is_end_mif_word_aeb & is_tier_1),
		is_mif_header = wire_is_special_address_aeb,
		is_pll_addr = (wire_is_end_mif_word_agb & is_tier_1),
		is_pll_reset_stage = 1'b0,
		is_pma = wire_cmpr_mif_sec_agb,
		is_tier_1 = (((wire_reconf_mode_dec_eq[1] | wire_reconf_mode_dec_eq[6]) | wire_reconf_mode_dec_eq[4]) | wire_reconf_mode_dec_eq[5]),
		is_tier_2 = wire_reconf_mode_dec_eq[2],
		is_tx_local_div_ctrl = wire_reconf_mode_dec_eq[3],
		load_pll_first_word = 1'b0,
		merged_dprioin = {(({4{is_end_mif}} & dprio_dataout_reg[15:12]) | ({4{(~ is_end_mif)}} & reconfig_data_reg[15:12])), reconfig_data_reg[11:4], (({2{is_end_mif}} & dprio_dataout_reg[3:2]) | ({2{(~ is_end_mif)}} & reconfig_data_reg[3:2])), reconfig_data_reg[1:0]},
		mif_dec_datab = {1'b0, {2{is_pll_addr}}, is_pma, (is_pma & (~ is_pll_addr)), 1'b1},
		pll_first_word_addr = 5'b11100,
		pll_reset_addr = 8'b10010100,
		quad_address = {4'b0000, wire_addr_cntr_q[3:2]},
		quad_address_out = address_pres_reg[7:2],
		rd_pulse = ((((~ dprio_pulse) & (~ write_done)) & (~ wr_rd_pulse_reg)) & (write_state & ((~ header_proc) & (((~ is_tier_1) | is_end_mif) | is_pll_addr)))),
		read = 1'b0,
		read_address = 8'b00000000,
		read_reconfig_addr = 8'b00000000,
		read_state = 1'b0,
		reconf_done_reg_out = reconfig_done_reg,
		reconfig_address_en = (write_done | idle_state),
		reconfig_address_out = wire_mif_addr_cntr_q,
		reconfig_datain = ((({16{(is_cruclk_addr0 | is_cruclk_addr1)}} & cruclk_mux_data) | (({16{(~ is_tx_local_div_ctrl)}} & merged_dprioin) & {16{(~ ((is_cruclk_addr0 | is_cruclk_addr1) | is_pll_reset_stage))}})) | ({16{(is_tx_local_div_ctrl | is_pll_reset_stage)}} & dprio_dataout_reg)),
		reconfig_togxb = {wire_dprio_dprioload, wire_dprio_dpriodisable, wire_dprio_dprioin},
		reset_addr_done = 1'b0,
		reset_reconf_addr = 1'b0,
		s0_to_0 = write_done,
		s0_to_1 = (write_all_int & idle_state),
		tx_switch_rate_addr = 5'b10100,
		wr_pulse = (((write_state & (~ dprio_pulse)) & (~ write_done)) & ((wr_rd_pulse_reg & (((~ is_tier_1) | is_end_mif) | is_pll_addr)) | ((((is_tier_1 & (~ header_proc)) & (~ reset_reconf_addr)) & (~ is_end_mif)) & (~ is_pll_addr)))),
		write_addr_inc = (((wire_addr_cmpr_aeb & write_state) & dprio_pulse) & write_happened),
		write_address = {6'b000000, channel_address_out},
		write_all_int = write_all,
		write_done = (((((write_word_done & write_addr_inc) & write_happened) & is_analog_control) | ((delay_mif_head_out | write_mif_word_done) | (reset_addr_done & is_tier_1))) | ((dprio_pulse & write_happened) & (is_tier_2 | is_tx_local_div_ctrl))),
		write_happened = wr_addr_inc_reg,
		write_mif_word_done = ((dprio_pulse & write_happened) & is_tier_1),
		write_reconfig_addr = {(({6{((((is_tier_1 & (~ is_mif_header)) & (~ is_pll_reset_stage)) | is_tier_2) | is_tx_local_div_ctrl)}} & wire_mif_addr_trans_result[5:0]) | ({6{is_pll_reset_stage}} & pll_reset_addr[7:2])), ((({2{(~ is_pll_addr)}} & channel_address_out) | ({2{(is_pll_addr & (~ is_pll_reset_stage))}} & wire_mif_addr_cntr_q[1:0])) | ({2{is_pll_reset_stage}} & pll_reset_addr[1:0]))},
		write_state = write_state_reg,
		write_word_60_63_data_valid = 1'b0,
		write_word_64_67_data_valid = 1'b0,
		write_word_68_6B_data_valid = 1'b0,
		write_word_7c_7f_data_valid = 1'b0,
		write_word_done = 1'b0;
endmodule //sdi_4_ch_alt2gxb_reconfig_alt2gxb_reconfig_n3v
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module sdi_4_ch_alt2gxb_reconfig (
	logical_channel_address,
	reconfig_clk,
	reconfig_data,
	reconfig_fromgxb,
	write_all,
	busy,
	channel_reconfig_done,
	reconfig_address_en,
	reconfig_address_out,
	reconfig_togxb)/* synthesis synthesis_clearbox = 1 */;

	input	[3:0]  logical_channel_address;
	input	  reconfig_clk;
	input	[15:0]  reconfig_data;
	input	[3:0]  reconfig_fromgxb;
	input	  write_all;
	output	  busy;
	output	  channel_reconfig_done;
	output	  reconfig_address_en;
	output	[4:0]  reconfig_address_out;
	output	[2:0]  reconfig_togxb;

	wire  sub_wire0;
	wire  sub_wire1;
	wire [4:0] sub_wire2;
	wire [2:0] sub_wire3;
	wire  sub_wire4;
	wire [0:0] sub_wire5 = 1'h0;
	wire [0:0] sub_wire7 = 1'h1;
	wire  channel_reconfig_done = sub_wire0;
	wire  busy = sub_wire1;
	wire [4:0] reconfig_address_out = sub_wire2[4:0];
	wire [2:0] reconfig_togxb = sub_wire3[2:0];
	wire  reconfig_address_en = sub_wire4;
	wire [2:0] sub_wire6 = {sub_wire5, sub_wire5, sub_wire7};

	sdi_4_ch_alt2gxb_reconfig_alt2gxb_reconfig_n3v	sdi_4_ch_alt2gxb_reconfig_alt2gxb_reconfig_n3v_component (
				.write_all (write_all),
				.reconfig_mode_sel (sub_wire6),
				.logical_channel_address (logical_channel_address),
				.reconfig_clk (reconfig_clk),
				.reconfig_data (reconfig_data),
				.reconfig_fromgxb (reconfig_fromgxb),
				.channel_reconfig_done (sub_wire0),
				.busy (sub_wire1),
				.reconfig_address_out (sub_wire2),
				.reconfig_togxb (sub_wire3),
				.reconfig_address_en (sub_wire4));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: ADCE NUMERIC "0"
// Retrieval info: PRIVATE: CMU_PLL NUMERIC "0"
// Retrieval info: PRIVATE: DATA_RATE NUMERIC "0"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Stratix II GX"
// Retrieval info: PRIVATE: PMA NUMERIC "0"
// Retrieval info: PRIVATE: PROTO_SWITCH NUMERIC "1"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "0"
// Retrieval info: CONSTANT: CHANNEL_ADDRESS_WIDTH NUMERIC "4"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Stratix II GX"
// Retrieval info: CONSTANT: NUMBER_OF_CHANNELS NUMERIC "16"
// Retrieval info: CONSTANT: NUMBER_OF_RECONFIG_PORTS NUMERIC "4"
// Retrieval info: USED_PORT: @reconfig_mode_sel 0 0 3 0 INPUT NODEFVAL @reconfig_mode_sel[2..0]
// Retrieval info: USED_PORT: busy 0 0 0 0 OUTPUT NODEFVAL busy
// Retrieval info: USED_PORT: channel_reconfig_done 0 0 0 0 OUTPUT NODEFVAL channel_reconfig_done
// Retrieval info: USED_PORT: logical_channel_address 0 0 4 0 INPUT NODEFVAL logical_channel_address[3..0]
// Retrieval info: USED_PORT: reconfig_address_en 0 0 0 0 OUTPUT NODEFVAL reconfig_address_en
// Retrieval info: USED_PORT: reconfig_address_out 0 0 5 0 OUTPUT NODEFVAL reconfig_address_out[4..0]
// Retrieval info: USED_PORT: reconfig_clk 0 0 0 0 INPUT NODEFVAL reconfig_clk
// Retrieval info: USED_PORT: reconfig_data 0 0 16 0 INPUT NODEFVAL reconfig_data[15..0]
// Retrieval info: USED_PORT: reconfig_fromgxb 0 0 4 0 INPUT NODEFVAL reconfig_fromgxb[3..0]
// Retrieval info: USED_PORT: reconfig_togxb 0 0 3 0 OUTPUT NODEFVAL reconfig_togxb[2..0]
// Retrieval info: USED_PORT: write_all 0 0 0 0 INPUT NODEFVAL write_all
// Retrieval info: CONNECT: reconfig_togxb 0 0 3 0 @reconfig_togxb 0 0 3 0
// Retrieval info: CONNECT: @reconfig_clk 0 0 0 0 reconfig_clk 0 0 0 0
// Retrieval info: CONNECT: @reconfig_fromgxb 0 0 4 0 reconfig_fromgxb 0 0 4 0
// Retrieval info: CONNECT: @logical_channel_address 0 0 4 0 logical_channel_address 0 0 4 0
// Retrieval info: CONNECT: @reconfig_mode_sel 0 0 1 2 GND 0 0 1 2
// Retrieval info: CONNECT: @reconfig_mode_sel 0 0 1 1 GND 0 0 1 1
// Retrieval info: CONNECT: @reconfig_mode_sel 0 0 1 0 VCC 0 0 1 0
// Retrieval info: CONNECT: @write_all 0 0 0 0 write_all 0 0 0 0
// Retrieval info: CONNECT: busy 0 0 0 0 @busy 0 0 0 0
// Retrieval info: CONNECT: @reconfig_data 0 0 16 0 reconfig_data 0 0 16 0
// Retrieval info: CONNECT: channel_reconfig_done 0 0 0 0 @channel_reconfig_done 0 0 0 0
// Retrieval info: CONNECT: reconfig_address_out 0 0 5 0 @reconfig_address_out 0 0 5 0
// Retrieval info: CONNECT: reconfig_address_en 0 0 0 0 @reconfig_address_en 0 0 0 0
// Retrieval info: GEN_FILE: TYPE_NORMAL sdi_4_ch_alt2gxb_reconfig.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL sdi_4_ch_alt2gxb_reconfig.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL sdi_4_ch_alt2gxb_reconfig.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL sdi_4_ch_alt2gxb_reconfig.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL sdi_4_ch_alt2gxb_reconfig_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL sdi_4_ch_alt2gxb_reconfig_bb.v FALSE
// Retrieval info: LIB_FILE: lpm
