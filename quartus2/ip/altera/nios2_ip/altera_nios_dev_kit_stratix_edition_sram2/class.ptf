# Copyright(C) 2002-2003 Altera Corporation
CLASS altera_nios_dev_kit_stratix_edition_sram2
{
      ASSOCIATED_FILES 
      {
         Add_Program = "default";
         Edit_Program = "default";
         Generator_Program = "mk_sram.pl";
      }
      MODULE_DEFAULTS 
      {
         class = "altera_nios_dev_kit_stratix_edition_sram2";
         class_version = "7.080901";
         iss_model_name = "altera_memory";
         HDL_INFO 
         {
# An interface to this memory requires no additional files
# in the target project directory.
         }
         WIZARD_SCRIPT_ARGUMENTS 
         {
            sram_memory_size = "1024";
            sram_memory_units = "1024";
            sram_data_width = "32";
         }
         SLAVE s1
         {
            PORT_WIRING 
            {
               PORT data
               {
                  width = "32";
                  is_shared = "1";
                  direction = "inout";
                  type = "data";
               }
               PORT address
               {
                  width = "16";
                  is_shared = "1";
                  direction = "input";
                  type = "address";
               }
               PORT read_n
               {
                  width = "1";
                  is_shared = "0";
                  direction = "input";
                  type = "read_n";
               }
               PORT write_n
               {
                  width = "1";
                  is_shared = "0";
                  direction = "input";
                  type = "write_n";
               }
               PORT be_n
               {
                  width = "4";
                  is_shared = "0";
                  direction = "input";
                  type = "byteenable_n";
               }
               PORT select_n
               {
                  width = "1";
                  is_shared = "0";
                  direction = "input";
                  type = "chipselect_n";
               }
            }
            SYSTEM_BUILDER_INFO 
            {
               Bus_Type = "avalon_tristate";
               Is_Memory_Device = "1";
               Address_Alignment = "dynamic";
               Data_Width = "32";
               Address_Width = "16";
               Has_IRQ = "0";
               IRQ_Number = "N/A";
               Read_Wait_States = "0";
               Write_Wait_States = "0";
               Hold_Time = "half_clock";
               Base_Address = "--unknown--";
               Address_Span = "262144";
            }
         }
         SYSTEM_BUILDER_INFO 
         {
            Is_Enabled = "1";
            Instantiate_In_System_Module = "0";
            Make_Memory_Model = "1";
            Default_Module_Name = "sram";
            Top_Level_Ports_Are_Enumerated = "1";
         }
      }
      USER_INTERFACE 
      {
         USER_LABELS 
         {
            name = "IDT71V416 SRAM";
            technology = "Memory,EP1S10 Nios Development Board Stratix Edition,EP1S40 Nios Development Board Stratix Pro Edition,EP1C20 Nios Development Board Cyclone Edition,EP2S60 Nios Development Board Stratix II Edition,EP2S60 DSP Board Stratix II Edition";
            license = "full";
            alias = "sram256";
         }
         LINKS
         {
            LINK StratixII_2S60_Manual
            {
               title="Manual for Nios 2s60 Stratix II Board";
               url="http://www.altera.com/literature/manual/mnl_nios2_board_stratixII_2s60.pdf";
            }
            LINK StratixII_2S60_Schematics
            {
               title="Schematics for Nios 2s60 Stratix II Board";
               url="ftp://ftp.altera.com/outgoing/download/support/ip/processors/nios2/nios_stratixii_2s60/nios_2s60_schematic.pdf";
            }
            LINK Stratix_1S40_Manual
            {
               title="Manual for Nios 1s40 Stratix Board";
               url="http://www.altera.com/literature/manual/mnl_nios2_board_stratix_1s40.pdf";
            }
            LINK Stratix_1S40_Schematics
            {
               title="Schematics for Nios 1s40 Stratix Board";
               url="ftp://ftp.altera.com/outgoing/download/support/ip/processors/nios2/nios_stratix_1s40/nios_1s40_board_schematic.pdf";
            }
            LINK Stratix_1S10_Manual
            {
               title="Manual for Nios 1s10 Stratix Board";
               url="http://www.altera.com/literature/manual/mnl_nios2_board_stratix_1s10.pdf";
            }
            LINK Stratix_1S10_Schematics
            {
               title="Schematics for Nios 1s10 Stratix Board";
               url="ftp://ftp.altera.com/outgoing/download/support/ip/processors/nios2/nios_stratix_1s10/nios_1s10_board_schematic.pdf";
            }
            LINK Cyclone_Manual
            {
               title="Manual for Nios 1c20 Cyclone Board";
               url="http://www.altera.com/literature/manual/mnl_nios2_board_cyclone_1c20.pdf";
            }
            LINK Cyclone_Schematics
            {
               title="Schematics for Nios 1c20 Cyclone Board";
               url="ftp://ftp.altera.com/outgoing/download/support/ip/processors/nios2/nios_cyclone_1c20/nios_1c20_board_schematic.pdf";
            }
         }
         WIZARD_UI default
         {
            DEBUG{}
	    title = "SRAM (two IDT71V416 chips) - {{ $MOD }}";
            CONTEXT 
            {
               WSA = "WIZARD_SCRIPT_ARGUMENTS";
               CONTENTS = "WIZARD_SCRIPT_ARGUMENTS/CONTENTS srec";
               SBI = "SLAVE s1/SYSTEM_BUILDER_INFO";
               MODULE_SBI = "SYSTEM_BUILDER_INFO";
            }
# These assignments manage the continuous updating of values
# via the WSA, and some intermediate values.
            $$var_byte_count = "{{ $WSA/sram_memory_size * $WSA/sram_memory_units }}"; # aka address span
            $$var_word_count = "{{ $$var_byte_count * 8 / $WSA/sram_data_width }}";
            $$var_address_bits = "{{ ceil(log2($$var_word_count)) }}"; # 
# And now, poke in all those results to the right PTF spots
            $SBI/Address_Width = "{{ $$var_address_bits }}";
            $SBI/Address_Span = "{{ $$var_byte_count }}";
            $SBI/Data_Width = "{{ $WSA/sram_data_width }}";

            ACTION wizard_finish
            {
               $MOD/SLAVE s1/PORT_WIRING/PORT address/width = "{{ $SBI/Address_Width }}";
               $MOD/SLAVE s1/PORT_WIRING/PORT data/width = "{{ $SBI/Data_Width }}";
               $MOD/SLAVE s1/PORT_WIRING/PORT be_n/width = "{{ $SBI/Data_Width / 8 }}";
            }

        align = "left";
        PAGES main
        {
          select = 1;
#          align = "left";
          PAGE 1
          {
            title = "Attributes";
            GROUP 
            {
               align = "left";
               title = "Static RAM";
               spacing = 12;
               TEXT 
               {
                  title = 
                  "The Nios Development Boards (Stratix 1S10, Stratix 1S40, Stratix II 2S60, <br>
                   and Cyclone 1C20 editions) , have two IDT71V416 SRAM chips arranged as<br>
                   256k 32-bit words (1MByte total address span).<br>";
               }

               GROUP 
               {
                  TEXT 
                  {
                     title = "Memory Size: ";
                  }
                  layout = "horizontal";
                  EDIT 
                  {
                     justify = "right";
                     DATA 
                     {
                        $WSA/sram_memory_size = "$";
                     }
                  }
                  COMBO 
                  {
                     DATA 
                     {
                        $WSA/sram_memory_units = "$";
                     }
                     ITEM 
                     {
                        title = "Bytes";
                        value = "1";
                     }
                     ITEM 
                     {
                        title = "kB";
                        value = "1024";
                     }
                  }
               }
               TEXT 
               {
                  title = "{{ $$var_address_bits }} Word Aligned Address Bits";
               }
            }
            GROUP simulation_model
            {
               title = "Generic Memory Model (Simulation Only)";
               align = "left";
               spacing = "0";
               CHECK
               {
                  title = 
                     "Include a functional memory model in the system testbench.";
                  tooltip =
                     "The model will auto-size to the declared SRAM profile.<br>When not selected, you must acquire a vendor memory model<br>and manually wire it into the testbench.";
                  DATA
                  {
                     $MODULE_SBI/Make_Memory_Model = $;
                  }
               }
            }

          }

        }
      }
   }
}
