#:-:
#:-: file: class.ptf
#:-: date: 2003.01.13 16:19:57
#:-: generated by a perl script
#:-: ex:set tabstop=3:
#:-: ex:set shiftwidth=3:
#:-: ex:set expandtab:
#:-:
# This is a hardware interface to an exteral lan_91c111 10/100
# Ethernet PHY/MAC.
# 
# This adds an avalon_tristate-type slave to your system, representing
# the bus-interface to the external device.
# 
# In the past, this component "came with" the plugs networking
# library.  No more.  Now this component "comes with" a minimal API
# that makes it visible to plugs, but plugs is delivered separately
# as a software component.
# 
   CLASS altera_avalon_lan91c111
   {
      SDK_GENERATION
      {
         SDK_FILES all
         {
            sdk_files_dir = "sdk";
            sdk_files_list = "
                                    lib/lan91c111.c
                                    inc/lan91c111.h
                           ";
         }
      }
      USER_INTERFACE 
      {
         USER_LABELS 
         {
            name = "LAN91c111 Interface (Ethernet)";
            description = "Interface to external 10/100Mb MAC/PHY chip: SMSC LAN91C111";
            technology = "Ethernet,EP1S10 Nios Development Board Stratix Edition,EP1S40 Nios Development Board Stratix Pro Edition,EP1C20 Nios Development Board Cyclone Edition,EP2S60 Nios Development Board Stratix II Edition,EP2S60 DSP Board Stratix II Edition";
            license = "full";
         }
         LINKS 
         {
            LINK plugs
            {
               url="http://www.altera.com/literature/manual/mnl_plugs.pdf";
               title="Plugs Ethernet Library";
            }                            
            LINK StratixII_2S60_Manual
            {
               title="Manual for Nios 2s60 Stratix II Board";
               url="http://www.altera.com/literature/manual/mnl_nios2_board_stratixII_2s60.pdf";
            }
            LINK StratixII_2S60_Schematics
            {
               title="Schematics for Nios 2s60 Stratix II Board";
               url="nios_stratixII_2s60/nios_2s60_board_schematic.pdf";
            }
            LINK Stratix_1S40_Manual
            {
               title="Manual for Nios 1s40 Stratix Board";
               url="http://www.altera.com/literature/manual/mnl_nios2_board_stratix_1s40.pdf";
            }
            LINK Stratix_1S40_Schematics
            {
               title="Schematics for Nios 1s40 Stratix Board";
               url="nios_stratix_1s40/nios_1s40_board_schematic.pdf";
            }
            LINK Stratix_1S10_Manual
            {
               title="Manual for Nios 1s10 Stratix Board";
               url="http://www.altera.com/literature/manual/mnl_nios2_board_stratix_1s10.pdf";
            }
            LINK Stratix_1S10_Schematics
            {
               title="Schematics for Nios 1s10 Stratix Board";
               url="nios_stratix_1s10/nios_1s10_board_schematic.pdf";
            }
            LINK Cyclone_Manual
            {
               title="Manual for Nios 1c20 Cyclone Board";
               url="http://www.altera.com/literature/manual/mnl_nios2_board_cyclone_1c20.pdf";
            }
            LINK Cyclone_Schematics
            {
               title="Schematics for Nios 1c20 Cyclone Board";
               url="nios_cyclone_1c20/nios_1c20_board_schematic.pdf";
            }
         }
         WIZARD_UI default
         {
            title = "Ethernet Adapter - {{ $MOD }}";
            CONTEXT 
            {
               SPW = "SLAVE s1/PORT_WIRING";
               CONSTANTS = "WIZARD_SCRIPT_ARGUMENTS/CONSTANTS";
               SBI = "SLAVE s1/SYSTEM_BUILDER_INFO";
            }
            GROUP 
            {
               align = "left";
               title = "Presets";
               RADIO 
               {
                  id = "devboard";
                  title = "LAN91C111 MAC/PHY On Development Board";
                  font = "bold";
                  key = "b";
                  GROUP 
                  {
                     indent = "30";
                     TEXT 
                     {
                        title = "
Registers are aligned on half-word boundaries. <BR>
The full 14-bit address width of the chip is used. <BR>
The 8 registers can be accessed at locations <BR>
base+0x0300 through base+0x030f. <BR>
<BR>
<em>This is how the LAN91C111 Ethernet Peripheral is <BR>
wired on the Nios Development Board, Stratix Edition <BR>
and Nios Development Board, Cyclone Edition. </em> <br>";
                        font = "small";
                     }
                  }
                  DATA 
                  {
                     $SPW/PORT byteenablen/width = "4";
                     $SPW/PORT address/width = "14";
                     $SPW/PORT data/width = "32";
                     $SBI/Data_Width = "32";
                     $SBI/Address_Width = "14";
                     $CONSTANTS/CONSTANT LAN91C111_REGISTERS_OFFSET/value = "0x0300";
                     $CONSTANTS/CONSTANT LAN91C111_DATA_BUS_WIDTH/value = "32";
                  }
               }
               RADIO 
               {
                  id = "daughtercard";
                  title = "LAN91C111 MAC/PHY On Daughtercard";
                  font = "bold";
                  key = "d";
                  GROUP 
                  {
                     indent = "30";
                     TEXT 
                     {
                        title = "
Registers are aligned on full-word boundaries. <BR>
The upper 11 address bits are hardwired to <BR>
offset 0x0300 within the chip, so that the <BR>
lower 3 address bits are used to select among <BR>
the 8 registers. <BR>
<BR>
<em> This is how the LAN91C111 Ethernet Peripheral <BR>
is wired on the daughtercard for the Nios Development Board.</em><br>";
                        font = "small";
                     }
                  }
                  DATA 
                  {
                     $SPW/PORT byteenablen/width = "2";
                     $SPW/PORT address/width = "3";
                     $SPW/PORT data/width = "16";
                     $SBI/Data_Width = "16";
                     $SBI/Address_Width = "3";
                     $CONSTANTS/CONSTANT LAN91C111_REGISTERS_OFFSET/value = "0x0000";
                     $CONSTANTS/CONSTANT LAN91C111_DATA_BUS_WIDTH/value = "16";
                  }
               }
            }
         }
      }
      ASSOCIATED_FILES 
      {
         Add_Program = "default"; # No generator program, because this is a system-external component:
         Generator_Program = "--none--";
         Edit_Program = "default";
      }
      MODULE_DEFAULTS 
      {
         class = "altera_avalon_lan91c111";
         class_version = "7.080901";
         WIZARD_SCRIPT_ARGUMENTS 
         {
            Is_Ethernet_Mac = "1";
            CONSTANTS 
            {
               CONSTANT LAN91C111_REGISTERS_OFFSET
               {
                  value = "0x0300";
                  comment = "offset 0 or 0x300, depending on address bus wiring";
               }
               CONSTANT LAN91C111_DATA_BUS_WIDTH
               {
                  value = "32";
                  comment = "width 16 or 32, depending on data bus wiring";
               }
            }
         }
         SYSTEM_BUILDER_INFO 
         {
            Instantiate_In_System_Module = "0";
            Wire_Test_Bench_Values = "1";
            Is_Enabled = "1";
            Top_Level_Ports_Are_Enumerated = "1";
         }
         PORT_WIRING
         {
	 }
         SLAVE s1
         {
            SYSTEM_BUILDER_INFO 
            {
               Instantiate_In_System_Module = "0";
               Is_Enabled = "1";
               Is_Bus_Master = "0";
               Bus_Type = "avalon_tristate";
               Uses_Tri_State_Data_Bus = "1";
               Address_Alignment = "native";
               Address_Width = "14";
               Data_Width = "32";
               Has_IRQ = "1";
               Read_Wait_States = "175ns";
               Write_Wait_States = "175ns";
               Setup_Time = "10ns";
               Hold_Time = "5ns";
               Is_Memory_Device = "0";
               Date_Modified = "2002.03.19.10:51:51";
               IRQ_Number = "--unknown--";
               Base_Address = "--unknown--";
               Tri_State_Data_Bus = "--unknown--";
            }
            PORT_WIRING 
            {
               PORT reset
               {
                  direction = "input";
                  width = "1";
                  type = "reset";
               }
               PORT irq
               {
                  direction = "output";
                  width = "1";
                  type = "irq";
                  test_bench_value = "0";
               }
               PORT byteenablen
               {
                  is_shared = "1";
                  direction = "input";
                  width = "4";
                  type = "byteenable_n";
               }
               PORT address
               {
                  is_shared = "1";
                  direction = "input";
                  width = "14";
                  type = "address";
               }
               PORT data
               {
                  is_shared = "1";
                  direction = "inout";
                  width = "32";
                  type = "data";
               }
               PORT iow_n
               {
                  direction = "input";
                  width = "1";
                  type = "write_n";
               }
               PORT ior_n
               {
                  direction = "input";
                  width = "1";
                  type = "read_n";
               }
               PORT reset
               {
                  direction = "input";
                  width = "1";
                  type = "reset";
               }
	       # this disables previous example design ports having reset_n port
               PORT reset_n
               {
                  direction = "input";
                  width = "1";
                  type = "reset_n";
                  Is_Enabled = "0";
               }
	       PORT ardy
               {
                  direction = "output";
                  width     = "1";
                  type      = "inhibitrequest_n";
                  Is_Enabled = "0";
               }
            }
         }
      }
   }
