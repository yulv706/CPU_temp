#:-:
#:-: file: class.ptf
#:-: date: 2003.11.05 16:06:04
#:-: generated by a perl script
#:-: ex:set tabstop=3:
#:-: ex:set shiftwidth=3:
#:-: ex:set expandtab:
#:-:
# ###############################################################
# class.ptf for altera_avalon_timer
# 
# This PTF-file declares the Altera Timer as an SOPC-Builder library
# component.  This file should appear in a component-directory with several
# "companion" files and directories.  If this component-directory is
# anywhere on the SOPC-Builder's library search-path, then the UART
# will be "discovered" as a library comonent and available for your
# use in systems.
# 
# The Timer-in-particular has a wizard which is defined by a section of
# this PTF-file (below), and a generator-program which happens to be
# built on the "Europa" object-library.
# 
# ###############################################################
   CLASS altera_avalon_timer
   {
      SDK_GENERATION 
      {
         SDK_FILES 0
         {
# the c-types are the same for everyone
            cpu_architecture = "always";
            short_type = "timer";
            c_structure_type = "np_timer *";
            c_header_file = "sdk/timer_struct.h";
         }
         SDK_FILES 1
         {
# the gnu .s types are the same for any cpu
            cpu_architecture = "always";
            toolchain = "gnu";
            asm_header_file = "sdk/timer_struct.s";
         }
         SDK_FILES 2
         {
# the sdk/lib directory has just nios gnu .s files there
            cpu_architecture = "nios";
            toolchain = "gnu";
            sdk_files_dir = "sdk";
         }
         SDK_FILES 3
         {
            cpu_architecture = "else";
            sdk_files_dir = "sdk_c";
         }
      }
      ASSOCIATED_FILES 
      {
         Add_Program = "default";
         Edit_Program = "default";
         Generator_Program = "em_timer.pl";
      }
      MODULE_DEFAULTS 
      {
         class = "altera_avalon_timer";
         class_version = "7.080901";
         iss_model_name = "altera_avalon_timer";
         SLAVE s1
         {
            SYSTEM_BUILDER_INFO 
            {
               Bus_Type = "avalon";
               Is_Printable_Device = "0";
               Address_Alignment = "native";
               Address_Width = "3";
               Data_Width = "16";
               Has_IRQ = "1";
               Read_Wait_States = "1";
               Write_Wait_States = "0";
            }
         }
         SYSTEM_BUILDER_INFO 
         {
            Instantiate_In_System_Module = "1";
            Is_Enabled = "1";
            Top_Level_Ports_Are_Enumerated = "1";
         }
         WIZARD_SCRIPT_ARGUMENTS 
         {
            always_run = "0";
            fixed_period = "0";
            snapshot = "1";
            period = "1";
            period_units = "ms";
            reset_output = "0";
            timeout_pulse_output = "0";
            mult = "0.001";
         }
      }
      USER_INTERFACE 
      {
         USER_LABELS 
         {
            name = "Interval timer";
            technology = "Other";
         }
         LINKS 
         {
            LINK help
            {
               title = "Data Sheet";
               url = "http://www.altera.com/literature/hb/nios2/n2cpu_nii51008.pdf";
            }
         }
         WIZARD_UI default
         {
            DEBUG 
            {
            }
            title = "Avalon Timer - {{ $MOD }}";
            $$timer_clock_freq = "{{ sopc_get_clock_freq($MOD) }}";
            
            ACTION wizard_finish
            {
               $MOD/SYSTEM_BUILDER_INFO/View/Settings_Summary = "Timer with {{ $WSA/period }} {{ $WSA/period_units }} timeout period.";
            }
            PAGE 1
            {
               align = "left";
               GROUP 
               {
                  align = "center";
                  title = "Timeout Period";
                  spacing = "5";
                  GROUP horiz
                  {
                     layout = "horizontal";
                     spacing = "4";
                     EDIT 
                     {
                        id = "period";
                        title = "{{ if ($WSA/fixed_period==1) 'Fixed Period: '; else 'Initial Period: '; }}";
                        DATA 
                        {
                           period = "$";
                        }
                        glue = "0"; # will not fill space between sibling items
                        justify = "right";
                        width = "80";
                        height = "20";
                        load_value = "{{ $$timer_clock_freq * ($WSA/mult * $WSA/period) -1 }}";
                        type = "float";
                        $$period_log_2 = "{{ ceil(log2($load_value+1)) }}";
                        error = "{{ if ($$period_log_2 > 32)
                               'Period is too large for 32-bit counter.'; }}";
                        error = "{{ if ($load_value < 1)
                               'Period is too small for this clock frequency.'; }}";
                     }
                     COMBO 
                     {
                        id = "units";
                        width = "60";
                        height = "20";
                        glue = "0"; # will not fill space between sibling items
                        ITEM 
                        {
                           title = "usec";
                           DATA 
                           {
                              period_units = "us";
                              mult = "0.000001";
                           }
                        }
                        ITEM 
                        {
                           title = "msec";
                           DATA 
                           {
                              period_units = "ms";
                              mult = "0.001";
                           }
                        }
                        ITEM 
                        {
                           title = "sec";
                           DATA 
                           {
                              period_units = "s";
                              mult = "1";
                           }
                        }
                        ITEM 
                        {
                           title = "clocks";
                           DATA 
                           {
                              period_units = "clock";
                              mult = "{{ 1 / $$timer_clock_freq }}";
                           }
                        }
                     }
                  }
                  TEXT 
                  {
                     title = "Input Clock Frequency: {{ $$timer_clock_freq / 1E6 }} MHz";
                  }
               }
               GROUP 
               {
                  title = "Hardware Options";
                  COMBO 
                  {
                     align = "left";
                     width = "180";
                     height = "20";
                     tooltip="Select one of several common configurations. <br> Displays \"(Custom)\" when settings do not match any preset.";
                     title = "Preset Configurations: ";
                     key = "C";
                     ITEM { title = "(Custom)";  }
                     ITEM
                     {
                        title = "Simple periodic interrupt";
                        DATA
                        {
                           fixed_period         = "1";
                           snapshot             = "0";
                           always_run           = "1";
                           timeout_pulse_output = "0";
                           reset_output         = "0";
                        }
                     }
                     ITEM
                     {
                        title = "Full-featured";
                        DATA
                        {
                           fixed_period         = "0";
                           snapshot             = "1";
                           always_run           = "0";
                           timeout_pulse_output = "0";
                           reset_output         = "0";
                        }
                     }
                     ITEM
                     {
                        title = "Watchdog";
                        DATA
                        {
                           fixed_period         = "1";
                           snapshot             = "0";
                           always_run           = "1";
                           timeout_pulse_output = "0";
                           reset_output         = "1";
                        }
                     }
                  }
                  GROUP 
                  {
                     title = "Registers";
                     CHECK 
                     {
                        id = "fixed";
                        title = "Writable period";
                        key = "W";
                        DATA 
                        {
                           fixed_period = "!$";
                        }
                        warning = "{{
				    if ( $WSA/fixed_period==0 && $WSA/reset_output==1 ) 'Watchdog period can be re-written';
					}}";
                     }
                     CHECK 
                     {
                        id = "snapshot";
                        title = "Readable snapshot";
                        key = "e";
                        DATA 
                        {
                           snapshot = "$";
                        }
                     }
                     CHECK 
                     {
                        id = "control";
                        title = "Start/Stop control bits";
                        key = "S";
                        DATA 
                        {
                           always_run = "!$";
                        }
                        warning = "{{
				    if ( $WSA/always_run==0 && $WSA/reset_output==1 ) 'Watchdog counter can be stopped';
					}}";
                     }
                  }
                  GROUP 
                  {
                     title = "Output Signals";
                     CHECK 
                     {
                        id = "pulse";
                        title = "Timeout pulse (1 clock wide)";
                        key = "T";
                        DATA 
                        {
                           timeout_pulse_output = "$";
                        }
                     }
                     CHECK 
                     {
                        id = "watchdog";
                        title = "System reset on timeout (Watchdog)";
                        key = "r";
                        DATA 
                        {
                           reset_output = "$";
                        }
                     }
                  }
               }
            }
         }
      }
   }
