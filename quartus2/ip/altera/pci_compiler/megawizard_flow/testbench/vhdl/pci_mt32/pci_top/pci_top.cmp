-- Generated by PCI Compiler 7.1 [Altera, IP Toolbench v1.3.0 build70]
-- ************************************************************
-- THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
-- ************************************************************
-- Copyright (C) 1991-2007 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.

component pci_top
	PORT (
		clk	: IN STD_LOGIC;
		rstn	: IN STD_LOGIC;
		gntn	: IN STD_LOGIC;
		idsel	: IN STD_LOGIC;
		l_adi	: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
		l_cbeni	: IN STD_LOGIC_VECTOR (3 DOWNTO 0);
		lm_req32n	: IN STD_LOGIC;
		lm_lastn	: IN STD_LOGIC;
		lm_rdyn	: IN STD_LOGIC;
		lt_rdyn	: IN STD_LOGIC;
		lt_abortn	: IN STD_LOGIC;
		lt_discn	: IN STD_LOGIC;
		lirqn	: IN STD_LOGIC;
		framen	: INOUT STD_LOGIC;
		irdyn	: INOUT STD_LOGIC;
		devseln	: INOUT STD_LOGIC;
		trdyn	: INOUT STD_LOGIC;
		stopn	: INOUT STD_LOGIC;
		intan	: OUT STD_LOGIC;
		reqn	: OUT STD_LOGIC;
		serrn	: OUT STD_LOGIC;
		l_adro	: OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
		l_dato	: OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
		l_beno	: OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
		l_cmdo	: OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
		lm_adr_ackn	: OUT STD_LOGIC;
		lm_ackn	: OUT STD_LOGIC;
		lm_dxfrn	: OUT STD_LOGIC;
		lm_tsr	: OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
		lt_framen	: OUT STD_LOGIC;
		lt_ackn	: OUT STD_LOGIC;
		lt_dxfrn	: OUT STD_LOGIC;
		lt_tsr	: OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
		cmd_reg	: OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
		stat_reg	: OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
		cache	: OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
		ad	: INOUT STD_LOGIC_VECTOR (31 DOWNTO 0);
		cben	: INOUT STD_LOGIC_VECTOR (3 DOWNTO 0);
		par	: INOUT STD_LOGIC;
		perrn	: INOUT STD_LOGIC
	);
end component;
