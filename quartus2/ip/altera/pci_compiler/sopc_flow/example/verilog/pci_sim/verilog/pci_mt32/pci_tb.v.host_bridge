//------------------------------------------------------------------
//  Altera PCI testbench
//  MODULE NAME: altera_tb

//  FUNCTIONAL DESCRIPTION:
//  This is the top level file of Altera PCI testbench

//---------------------------------------------------------------------------------------

`timescale 1 ns / 1 ns

module pci_tb (
	
	clk,	
	rstn,
	
	ArbReq_n_i,
	ArbGnt_n_o,	
	
	intan,
	ad,
	idsel,
	cben,
	framen,
	irdyn,
	devseln,
	trdyn,
	stopn,
	perrn,
	par,
	serrn	
	
	); 

 
 	input		clk;
	output		rstn;
	
	output		ArbReq_n_i;
	input		ArbGnt_n_o;
	output		idsel;
		
	inout		intan;	
	inout	[31:0]	ad;	
	inout	[3:0]	cben;	
	inout		framen;	
	inout		irdyn;	
	inout		devseln;	
	inout		trdyn;	
	inout		stopn;	
	inout		perrn;	
	inout		par;	
	inout		serrn;
        reg   rstn;	
   	wire busfree; 
   	wire disengage_mstr; 
   	wire tranx_success; 
   	wire trgt_tranx_disca; 
   	wire trgt_tranx_discb; 
   	wire trgt_tranx_retry; 
   	wire reqn;
   	assign ArbReq_n_i =  reqn;
   	wire gntn = ArbGnt_n_o;
assign 	       idsel = ad[11];


initial 
    begin
      rstn <= 0;
      #200 rstn <= 1;
    end
   
   mstr_tranx u1 (.clk(clk),
                  .rstn(rstn),
                  .ad(ad),
                  .cben(cben),
                  .par(par),
                  .reqn(reqn),
                  .gntn(gntn),
                  .framen(framen),
                  .irdyn(irdyn),
                  .devseln(devseln),
                  .trdyn(trdyn),
                  .stopn(stopn),
                  .perrn(perrn),
                  .serrn(serrn),
                  .busfree(busfree),
                  .disengage_mstr(disengage_mstr),
                  .tranx_success(tranx_success),
                  .trgt_tranx_disca(trgt_tranx_disca),
                  .trgt_tranx_discb(trgt_tranx_discb),
                  .trgt_tranx_retry(trgt_tranx_retry)); 
   
   trgt_tranx u2 (.clk(clk),
                  .rstn(rstn),
                  .ad(ad),
                  .cben(cben),
                  .idsel(ad[12]),
                  .par(par),
                  .framen(framen),
                  .irdyn(irdyn),
                  .devseln(devseln),
                  .stopn(stopn),
                  .trdyn(trdyn),
                  .perrn(perrn),
                  .serrn(serrn),
                  .trgt_tranx_disca(trgt_tranx_disca),
                  .trgt_tranx_discb(trgt_tranx_discb),
                  .trgt_tranx_retry(trgt_tranx_retry));

          defparam        
                 u1.trgt_tranx_bar0_data    =  32'h30000000,
                 u1.trgt_tranx_bar1_data    =  32'hfffff2C0;
                  
   
   monitor u3 (.clk(clk),
               .rstn(rstn),
               .ad(ad),
               .cben(cben),
               .framen(framen),
               .irdyn(irdyn),
               .devseln(devseln),
               .trdyn(trdyn),
               .stopn(stopn),
               .busfree(busfree),
               .disengage_mstr(disengage_mstr),
               .tranx_success(tranx_success));

       defparam
		u2.address_lines = 1024,
		u2.mem_hit_range = 32'h000003FF,
		u2.io_hit_range = 32'h0000000F;
   
   pull_up u4 (.ad(ad),
               .cben(cben),
               .par(par),
               .framen(framen),
               .irdyn(irdyn),
               .devseln(devseln),
               .trdyn(trdyn),
               .stopn(stopn),
               .perrn(perrn),
               .serrn(serrn),
               .intan(intan)); 
endmodule
