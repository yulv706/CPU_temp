//IP Functional Simulation Model
//VERSION_BEGIN 6.0 cbx_mgl 2006:03:29:17:46:26:SJ cbx_simgen 2006:03:22:01:13:28:SJ  VERSION_END


// Legal Notice: ï¿½ 2003 Altera Corporation. All rights reserved.
// You may only use these  simulation  model  output files for simulation
// purposes and expressly not for synthesis or any other purposes (in which
// event  Altera disclaims all warranties of any kind). Your use of  Altera
// Corporation's design tools, logic functions and other software and tools,
// and its AMPP partner logic functions, and any output files any of the
// foregoing (including device programming or simulation files), and any
// associated documentation or information  are expressly subject to the
// terms and conditions of the  Altera Program License Subscription Agreement
// or other applicable license agreement, including, without limitation, that
// your use is for the sole purpose of programming logic devices manufactured
// by Altera and sold by Altera or its authorized distributors.  Please refer
// to the applicable agreement for further details.


//synopsys translate_off

//synthesis_resources = altsyncram 1 lut 356 mux21 131 oper_add 14 oper_less_than 4 oper_selector 10 
`timescale 1 ps / 1 ps
module  auk_pac_mrx_pl3_link
	( 
	a_rdat,
	a_renb,
	a_reop,
	a_rerr,
	a_rfclk,
	a_rmod,
	a_rprty,
	a_rreset_n,
	a_rsop,
	a_rval,
	b_clk,
	b_dat,
	b_dav,
	b_ena,
	b_eop,
	b_err,
	b_mty,
	b_par,
	b_reset_n,
	b_sop,
	b_val) /* synthesis synthesis_clearbox=1 */;
	input   [31:0]  a_rdat;
	output   a_renb;
	input   a_reop;
	input   a_rerr;
	input   a_rfclk;
	input   [1:0]  a_rmod;
	input   a_rprty;
	input   a_rreset_n;
	input   a_rsop;
	input   a_rval;
	input   b_clk;
	output   [31:0]  b_dat;
	output   b_dav;
	input   b_ena;
	output   b_eop;
	output   b_err;
	output   [1:0]  b_mty;
	output   b_par;
	input   b_reset_n;
	output   b_sop;
	output   b_val;

	wire  [37:0]   wire_n111O_q_b;
	reg	niOOli58;
	reg	niOOli59;
	reg	niOOli60;
	reg	niOOll55;
	reg	niOOll56;
	reg	niOOll57;
	reg	niOOOi52;
	reg	niOOOi53;
	reg	niOOOi54;
	reg	nl100l4;
	reg	nl100l5;
	reg	nl100l6;
	reg	nl101i10;
	reg	nl101i11;
	reg	nl101i12;
	reg	nl101l7;
	reg	nl101l8;
	reg	nl101l9;
	reg	nl10il1;
	reg	nl10il2;
	reg	nl10il3;
	reg	nl110l40;
	reg	nl110l41;
	reg	nl110l42;
	reg	nl111i49;
	reg	nl111i50;
	reg	nl111i51;
	reg	nl111l46;
	reg	nl111l47;
	reg	nl111l48;
	reg	nl111O43;
	reg	nl111O44;
	reg	nl111O45;
	reg	nl11ii37;
	reg	nl11ii38;
	reg	nl11ii39;
	reg	nl11il34;
	reg	nl11il35;
	reg	nl11il36;
	reg	nl11iO31;
	reg	nl11iO32;
	reg	nl11iO33;
	reg	nl11li28;
	reg	nl11li29;
	reg	nl11li30;
	reg	nl11ll25;
	reg	nl11ll26;
	reg	nl11ll27;
	reg	nl11lO22;
	reg	nl11lO23;
	reg	nl11lO24;
	reg	nl11Oi19;
	reg	nl11Oi20;
	reg	nl11Oi21;
	reg	nl11Ol16;
	reg	nl11Ol17;
	reg	nl11Ol18;
	reg	nl11OO13;
	reg	nl11OO14;
	reg	nl11OO15;
	reg	n000i;
	reg	n000l;
	reg	n001i;
	reg	n001l;
	reg	n001O;
	reg	n00ii;
	reg	n01OO;
	reg	n1O0i;
	reg	n1O0l;
	reg	n1O0O;
	reg	n1O1O;
	reg	n1Oii;
	reg	n1Oil;
	reg	n1OiO;
	reg	n00il;
	reg	n00iO;
	reg	n00li;
	reg	n00ll;
	reg	n00lO;
	reg	n00Oi;
	reg	n00OO;
	reg	n010i;
	reg	n010l;
	reg	n010O;
	reg	n01ii;
	reg	n01il;
	reg	n01iO;
	reg	n01ll;
	reg	n0i0i;
	reg	n0i0l;
	reg	n0i0O;
	reg	n0i1i;
	reg	n0i1l;
	reg	n0i1O;
	reg	n0iii;
	reg	n0iil;
	reg	n0iiO;
	reg	n0ili;
	reg	n0ill;
	reg	n0ilO;
	reg	n0iOl;
	reg	n0l1i;
	reg	n0l0l;
	reg	nliiii;
	reg	n0lii;
	reg	n011i;
	reg	n011l;
	reg	n011O;
	reg	n01lO;
	reg	n01Oi;
	reg	n01Ol;
	reg	n0l1O;
	reg	n1lOO;
	reg	n1O1i;
	reg	n1O1l;
	reg	n1Oli;
	reg	n1Oll;
	reg	n1OlO;
	reg	n1OOi;
	reg	n1OOl;
	reg	n1OOO;
	reg	nl000i;
	reg	nl000l;
	reg	nl000O;
	reg	nl001i;
	reg	nl001l;
	reg	nl001O;
	reg	nl00ii;
	reg	nl00il;
	reg	nl00iO;
	reg	nl00li;
	reg	nl00ll;
	reg	nl010i;
	reg	nl010l;
	reg	nl010O;
	reg	nl011i;
	reg	nl011l;
	reg	nl011O;
	reg	nl01ii;
	reg	nl01il;
	reg	nl01iO;
	reg	nl01li;
	reg	nl01ll;
	reg	nl01lO;
	reg	nl01Oi;
	reg	nl01Ol;
	reg	nl01OO;
	reg	nl1OiO;
	reg	nl1Oli;
	reg	nl1Oll;
	reg	nl1OlO;
	reg	nl1OOi;
	reg	nl1OOl;
	reg	nl1OOO;
	reg	nli00i;
	reg	nli01i;
	reg	nli0ii;
	reg	nli0li;
	reg	nli0Oi;
	reg	nli0Ol;
	reg	nlii0i;
	reg	nlii0l;
	reg	nlii0O;
	reg	nliiil;
	reg	nliiiO;
	reg	nliili;
	reg	nliill;
	reg	nliilO;
	reg	nll00i;
	reg	nll00l;
	reg	nll00O;
	reg	nll01i;
	reg	nll01l;
	reg	nll01O;
	reg	nll0ii;
	reg	nll0il;
	reg	nll0iO;
	reg	nll0li;
	reg	nll0ll;
	reg	nll0lO;
	reg	nll0Oi;
	reg	nll0Ol;
	reg	nll11l;
	reg	nll1OO;
	reg	nlli0i;
	reg	nlli0l;
	reg	nlli0O;
	reg	nlli1i;
	reg	nlli1l;
	reg	nlli1O;
	reg	nlliii;
	reg	nlliil;
	reg	nlliiO;
	reg	nllOii;
	reg	nlOiiO;
	reg	nlOili;
	reg	nlOill;
	reg	nlOiOi;
	reg	nlOiOl;
	reg	nlOiOO;
	reg	n0lll;
	reg	n0llO;
	reg	n0lOi;
	reg	n0lOl;
	reg	n0lOO;
	reg	n0O1i;
	reg	n0O1O;
	reg	n111l;
	reg	nllili;
	reg	nllill;
	reg	nllilO;
	reg	nlliOi;
	reg	nlliOl;
	reg	nlliOO;
	reg	nlll0i;
	reg	nlll0l;
	reg	nlll0O;
	reg	nlll1i;
	reg	nlll1l;
	reg	nlll1O;
	reg	nlllii;
	reg	nlllil;
	reg	nllliO;
	reg	nlllli;
	reg	nlOilO;
	reg	nlOl1i;
	reg	nlOl1l;
	reg	nlOl1O;
	reg	nlOlil;
	reg	nlOlOi;
	reg	nlOlOl;
	reg	nlOlOO;
	reg	nlOO0i;
	reg	nlOO0l;
	reg	nlOO1i;
	reg	nlOO1l;
	reg	nlOO1O;
	reg	nlOOOi;
	reg	nlOOOl;
	reg	nlOOOO;
	reg	n1lOl;
	reg	nll0OO;
	reg	ni00O;
	reg	ni0ii;
	reg	ni0li;
	reg	nii0l;
	reg	n0lil;
	reg	n0liO;
	reg	n0lli;
	reg	n0O0i;
	reg	n0O0l;
	reg	n0O0O;
	reg	n0Oii;
	reg	n0Oil;
	reg	n0OiO;
	reg	n0Oli;
	reg	n0Oll;
	reg	n0OlO;
	reg	ni00i;
	reg	ni0il;
	reg	ni0ll;
	reg	ni0lO;
	reg	ni0Oi;
	reg	ni0Ol;
	reg	ni0OO;
	reg	ni10l;
	reg	ni10O;
	reg	ni1ii;
	reg	ni1il;
	reg	ni1iO;
	reg	ni1li;
	reg	ni1ll;
	reg	ni1lO;
	reg	ni1Oi;
	reg	ni1Ol;
	reg	nii1i;
	reg	nii1O;
	reg	nl00Oi;
	wire	wire_nl00lO_ENA;
	reg	nl00OO;
	wire	wire_nl00Ol_ENA;
	reg	nl0i0O;
	wire	wire_nl0i0l_ENA;
	reg	nl0i1l;
	wire	wire_nl0i1i_ENA;
	reg	nl0i0i;
	wire	wire_nl0i1O_ENA;
	reg	nl0iil;
	wire	wire_nl0iii_ENA;
	reg	nl0ili;
	wire	wire_nl0iiO_ENA;
	reg	nl0ilO;
	wire	wire_nl0ill_ENA;
	reg	nl0iOl;
	wire	wire_nl0iOi_ENA;
	reg	nl0l1i;
	wire	wire_nl0iOO_ENA;
	reg	nl0l0l;
	wire	wire_nl0l0i_ENA;
	reg	nl0lii;
	wire	wire_nl0l0O_ENA;
	reg	nl0l1O;
	wire	wire_nl0l1l_ENA;
	reg	nl0liO;
	wire	wire_nl0lil_ENA;
	reg	nl0lll;
	wire	wire_nl0lli_ENA;
	reg	nl0lOi;
	wire	wire_nl0llO_ENA;
	reg	nl0lOO;
	wire	wire_nl0lOl_ENA;
	reg	nl0O0O;
	wire	wire_nl0O0l_ENA;
	reg	nl0O1l;
	wire	wire_nl0O1i_ENA;
	reg	nl0O0i;
	wire	wire_nl0O1O_ENA;
	reg	nl0Oil;
	wire	wire_nl0Oii_ENA;
	reg	nl0Oli;
	wire	wire_nl0OiO_ENA;
	reg	nl0OlO;
	wire	wire_nl0Oll_ENA;
	reg	nl0OOl;
	wire	wire_nl0OOi_ENA;
	reg	nli11i;
	wire	wire_nl0OOO_ENA;
	reg	nii0O;
	reg	niiii;
	reg	niiil;
	reg	niiiO;
	reg	niili;
	reg	niill;
	reg	niilO;
	reg	niliO;
	reg	niO0l;
	reg	niOii;
	reg	nl10O;
	reg	nl1ii;
	reg	nl1iO;
	reg	nl1ll;
	reg	nli00O;
	wire	wire_nli00l_ENA;
	reg	nli01O;
	wire	wire_nli01l_ENA;
	reg	nli0iO;
	wire	wire_nli0il_ENA;
	reg	nli0lO;
	wire	wire_nli0ll_ENA;
	reg	nlii1i;
	wire	wire_nli0OO_ENA;
	reg	nli10l;
	wire	wire_nli10i_ENA;
	reg	nli1ii;
	wire	wire_nli10O_ENA;
	reg	nli11O;
	wire	wire_nli11l_ENA;
	reg	nli1iO;
	wire	wire_nli1il_ENA;
	reg	nli1ll;
	wire	wire_nli1li_ENA;
	reg	nli1Oi;
	wire	wire_nli1lO_ENA;
	reg	nli1OO;
	wire	wire_nli1Ol_ENA;
	reg	nlii1O;
	wire	wire_nlii1l_ENA;
	reg	nl01i;
	reg	nl01l;
	reg	nl01O;
	reg	nl1lO;
	reg	nl1Oi;
	reg	nl1Ol;
	reg	nl1OO;
	reg	nliil;
	reg	nlili;
	reg	nlliO;
	reg	nllOi;
	reg	nllOl;
	reg	nlO1i;
	reg	n0OOi;
	reg	n0OOl;
	reg	n0OOO;
	reg	ni01i;
	reg	ni01l;
	reg	ni01O;
	reg	ni10i;
	reg	ni11i;
	reg	ni11l;
	reg	ni11O;
	reg	ni1OO;
	reg	nlO0l;
	reg	nlO1l;
	reg	nlO1O;
	wire	wire_n1lii_dataout;
	wire	wire_n1lil_dataout;
	wire	wire_niiOi_dataout;
	wire	wire_niiOl_dataout;
	wire	wire_nil0O_dataout;
	wire	wire_nilli_dataout;
	wire	wire_nilll_dataout;
	wire	wire_nillO_dataout;
	wire	wire_nilOi_dataout;
	wire	wire_nilOl_dataout;
	wire	wire_nilOO_dataout;
	wire	wire_niO1i_dataout;
	wire	wire_niO1l_dataout;
	wire	wire_niOli_dataout;
	wire	wire_niOll_dataout;
	wire	wire_niOlO_dataout;
	wire	wire_niOOi_dataout;
	wire	wire_niOOl_dataout;
	wire	wire_niOOO_dataout;
	wire	wire_nl00O_dataout;
	wire	wire_nl0ii_dataout;
	wire	wire_nl0lO_dataout;
	wire	wire_nl0Oi_dataout;
	wire	wire_nl0Ol_dataout;
	wire	wire_nl0OO_dataout;
	wire	wire_nl11i_dataout;
	wire	wire_nl11l_dataout;
	wire	wire_nl11O_dataout;
	wire	wire_nli1i_dataout;
	wire	wire_nli1l_dataout;
	wire	wire_nli1O_dataout;
	wire	wire_nliiOi_dataout;
	wire	wire_nliiOl_dataout;
	wire	wire_nliiOO_dataout;
	wire	wire_nlil0i_dataout;
	wire	wire_nlil0l_dataout;
	wire	wire_nlil0O_dataout;
	wire	wire_nlil1i_dataout;
	wire	wire_nlil1l_dataout;
	wire	wire_nlil1O_dataout;
	wire	wire_nlilii_dataout;
	wire	wire_nlilil_dataout;
	wire	wire_nliliO_dataout;
	wire	wire_nlilli_dataout;
	wire	wire_nlilll_dataout;
	wire	wire_nlillO_dataout;
	wire	wire_nlilOi_dataout;
	wire	wire_nlilOl_dataout;
	wire	wire_nliO0i_dataout;
	wire	wire_nliO0l_dataout;
	wire	wire_nliO0O_dataout;
	wire	wire_nliO1i_dataout;
	wire	wire_nliO1l_dataout;
	wire	wire_nliO1O_dataout;
	wire	wire_nliOi_dataout;
	wire	wire_nliOii_dataout;
	wire	wire_nliOil_dataout;
	wire	wire_nliOiO_dataout;
	wire	wire_nliOl_dataout;
	wire	wire_nliOli_dataout;
	wire	wire_nliOll_dataout;
	wire	wire_nliOlO_dataout;
	wire	wire_nliOO_dataout;
	wire	wire_nliOOi_dataout;
	wire	wire_nliOOl_dataout;
	wire	wire_nliOOO_dataout;
	wire	wire_nll0i_dataout;
	wire	wire_nll0l_dataout;
	wire	wire_nll0O_dataout;
	wire	wire_nll11i_dataout;
	wire	wire_nll1i_dataout;
	wire	wire_nll1il_dataout;
	wire	wire_nll1iO_dataout;
	wire	wire_nll1l_dataout;
	wire	wire_nll1O_dataout;
	wire	wire_nll1Oi_dataout;
	wire	wire_nllOil_dataout;
	wire	wire_nllOiO_dataout;
	wire	wire_nllOli_dataout;
	wire	wire_nllOll_dataout;
	wire	wire_nllOlO_dataout;
	wire	wire_nllOOi_dataout;
	wire	wire_nllOOl_dataout;
	wire	wire_nllOOO_dataout;
	wire	wire_nlO00i_dataout;
	wire	wire_nlO00l_dataout;
	wire	wire_nlO00O_dataout;
	wire	wire_nlO01i_dataout;
	wire	wire_nlO01l_dataout;
	wire	wire_nlO01O_dataout;
	wire	wire_nlO0ii_dataout;
	wire	wire_nlO0il_dataout;
	wire	wire_nlO0iO_dataout;
	wire	wire_nlO0li_dataout;
	wire	wire_nlO0ll_dataout;
	wire	wire_nlO0lO_dataout;
	wire	wire_nlO0Oi_dataout;
	wire	wire_nlO0Ol_dataout;
	wire	wire_nlO0OO_dataout;
	wire	wire_nlO10i_dataout;
	wire	wire_nlO10l_dataout;
	wire	wire_nlO10O_dataout;
	wire	wire_nlO11i_dataout;
	wire	wire_nlO11l_dataout;
	wire	wire_nlO11O_dataout;
	wire	wire_nlO1ii_dataout;
	wire	wire_nlO1il_dataout;
	wire	wire_nlO1iO_dataout;
	wire	wire_nlO1li_dataout;
	wire	wire_nlO1ll_dataout;
	wire	wire_nlO1lO_dataout;
	wire	wire_nlO1Oi_dataout;
	wire	wire_nlO1Ol_dataout;
	wire	wire_nlO1OO_dataout;
	wire	wire_nlOi0i_dataout;
	wire	wire_nlOi0l_dataout;
	wire	wire_nlOi0O_dataout;
	wire	wire_nlOi1i_dataout;
	wire	wire_nlOi1l_dataout;
	wire	wire_nlOi1O_dataout;
	wire	wire_nlOiii_dataout;
	wire	wire_nlOiil_dataout;
	wire	wire_nlOl0O_dataout;
	wire	wire_nlOlii_dataout;
	wire	wire_nlOliO_dataout;
	wire	wire_nlOlli_dataout;
	wire	wire_nlOlll_dataout;
	wire	wire_nlOllO_dataout;
	wire	wire_nlOO0O_dataout;
	wire	wire_nlOOiO_dataout;
	wire	wire_nlOOll_dataout;
	wire  [15:0]   wire_nil1O_o;
	wire  [6:0]   wire_nilii_o;
	wire  [7:0]   wire_niO0O_o;
	wire  [6:0]   wire_niO1O_o;
	wire  [7:0]   wire_niOil_o;
	wire  [6:0]   wire_nl00i_o;
	wire  [16:0]   wire_nl0iO_o;
	wire  [16:0]   wire_nl0ll_o;
	wire  [7:0]   wire_nli0i_o;
	wire  [7:0]   wire_nli0l_o;
	wire  [6:0]   wire_nlill_o;
	wire  [16:0]   wire_nlilOO_o;
	wire  [16:0]   wire_nll10i_o;
	wire  [14:0]   wire_nll11O_o;
	wire  wire_nil0l_o;
	wire  wire_nil1l_o;
	wire  wire_nl0il_o;
	wire  wire_nl0li_o;
	wire  wire_nlllll_o;
	wire  wire_nlllOi_o;
	wire  wire_nlllOl_o;
	wire  wire_nlllOO_o;
	wire  wire_nllO0i_o;
	wire  wire_nllO0l_o;
	wire  wire_nllO0O_o;
	wire  wire_nllO1i_o;
	wire  wire_nllO1l_o;
	wire  wire_nllO1O_o;
	wire  niOlOi;
	wire  niOlOl;
	wire  niOlOO;
	wire  niOO0i;
	wire  niOO0l;
	wire  niOO0O;
	wire  niOO1i;
	wire  niOO1l;
	wire  niOO1O;
	wire  niOOii;
	wire  niOOil;
	wire  niOOiO;
	wire  niOOlO;
	wire  niOOOO;
	wire  nl100i;
	wire  nl101O;
	wire  nl10ii;
	wire  nl10li;
	wire  nl10ll;
	wire  nl10Ol;
	wire  nl110i;

	altsyncram   n111O
	( 
	.address_a({n0i1i, n0i1l, n0i1O, n0i0i, n0i0l, n0i0O, n0iii}),
	.address_b({nl1iO, nl1ii, nl10O, niOii, niO0l, niliO, niilO}),
	.clock0(a_rfclk),
	.clock1(b_clk),
	.clocken0(1'b1),
	.clocken1(b_ena),
	.data_a({nlOill, nlOili, nlOilO, nlOiOi, nlOiOl, nlOiOO, nllili, nllill, nllilO, nlliOi, nlliOl, nlliOO, nlll1i, nlll1l, nlll1O, nlll0i, nlll0l, nlll0O, nlllii, nlllil, nllliO, nlllli, n111l, nlOOOO, nlOOOl, nlOOOi, nlOO0l, nlOO0i, nlOO1O, nlOO1l, nlOO1i, nlOlOO, nlOlOl, nlOlOi, nlOlil, nlOl1O, nlOl1l, nlOl1i}),
	.q_a(),
	.q_b(wire_n111O_q_b),
	.wren_a(nl10ii),
	.aclr0(),
	.aclr1(),
	.addressstall_a(),
	.addressstall_b(),
	.byteena_a(),
	.byteena_b(),
	.data_b(),
	.rden_b(),
	.wren_b()
	);
	defparam
		n111O.address_aclr_a = "NONE",
		n111O.address_aclr_b = "NONE",
		n111O.address_reg_b = "CLOCK1",
		n111O.byte_size = 8,
		n111O.byteena_aclr_a = "NONE",
		n111O.byteena_aclr_b = "NONE",
		n111O.byteena_reg_b = "CLOCK1",
		n111O.clock_enable_input_a = "NORMAL",
		n111O.clock_enable_input_b = "NORMAL",
		n111O.clock_enable_output_a = "NORMAL",
		n111O.clock_enable_output_b = "NORMAL",
		n111O.indata_aclr_a = "NONE",
		n111O.indata_aclr_b = "NONE",
		n111O.indata_reg_b = "CLOCK1",
		n111O.init_file_layout = "PORT_A",
		n111O.intended_device_family = "Stratix",
		n111O.numwords_a = 128,
		n111O.numwords_b = 128,
		n111O.operation_mode = "DUAL_PORT",
		n111O.outdata_aclr_a = "NONE",
		n111O.outdata_aclr_b = "NONE",
		n111O.outdata_reg_a = "UNREGISTERED",
		n111O.outdata_reg_b = "UNREGISTERED",
		n111O.ram_block_type = "AUTO",
		n111O.rdcontrol_aclr_b = "NONE",
		n111O.rdcontrol_reg_b = "CLOCK1",
		n111O.read_during_write_mode_mixed_ports = "DONT_CARE",
		n111O.width_a = 38,
		n111O.width_b = 38,
		n111O.width_byteena_a = 1,
		n111O.width_byteena_b = 1,
		n111O.widthad_a = 7,
		n111O.widthad_b = 7,
		n111O.wrcontrol_aclr_a = "NONE",
		n111O.wrcontrol_aclr_b = "NONE",
		n111O.wrcontrol_wraddress_reg_b = "CLOCK1";
	initial
		niOOli58 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  niOOli58 <= niOOli60;
	initial
		niOOli59 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  niOOli59 <= (niOOli60 ^ niOOli58);
	initial
		niOOli60 = 0;
	always @ ( posedge a_rfclk)
		  niOOli60 <= niOOli58;
	initial
		niOOll55 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  niOOll55 <= niOOll57;
	initial
		niOOll56 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  niOOll56 <= (niOOll57 ^ niOOll55);
	initial
		niOOll57 = 0;
	always @ ( posedge a_rfclk)
		  niOOll57 <= niOOll55;
	initial
		niOOOi52 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  niOOOi52 <= niOOOi54;
	initial
		niOOOi53 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  niOOOi53 <= (niOOOi54 ^ niOOOi52);
	initial
		niOOOi54 = 0;
	always @ ( posedge a_rfclk)
		  niOOOi54 <= niOOOi52;
	initial
		nl100l4 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl100l4 <= nl100l6;
	initial
		nl100l5 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl100l5 <= (nl100l6 ^ nl100l4);
	initial
		nl100l6 = 0;
	always @ ( posedge a_rfclk)
		  nl100l6 <= nl100l4;
	initial
		nl101i10 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl101i10 <= nl101i12;
	initial
		nl101i11 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl101i11 <= (nl101i12 ^ nl101i10);
	initial
		nl101i12 = 0;
	always @ ( posedge a_rfclk)
		  nl101i12 <= nl101i10;
	initial
		nl101l7 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl101l7 <= nl101l9;
	initial
		nl101l8 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl101l8 <= (nl101l9 ^ nl101l7);
	initial
		nl101l9 = 0;
	always @ ( posedge a_rfclk)
		  nl101l9 <= nl101l7;
	initial
		nl10il1 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl10il1 <= nl10il3;
	initial
		nl10il2 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl10il2 <= (nl10il3 ^ nl10il1);
	initial
		nl10il3 = 0;
	always @ ( posedge a_rfclk)
		  nl10il3 <= nl10il1;
	initial
		nl110l40 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl110l40 <= nl110l42;
	initial
		nl110l41 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl110l41 <= (nl110l42 ^ nl110l40);
	initial
		nl110l42 = 0;
	always @ ( posedge a_rfclk)
		  nl110l42 <= nl110l40;
	initial
		nl111i49 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl111i49 <= nl111i51;
	initial
		nl111i50 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl111i50 <= (nl111i51 ^ nl111i49);
	initial
		nl111i51 = 0;
	always @ ( posedge a_rfclk)
		  nl111i51 <= nl111i49;
	initial
		nl111l46 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl111l46 <= nl111l48;
	initial
		nl111l47 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl111l47 <= (nl111l48 ^ nl111l46);
	initial
		nl111l48 = 0;
	always @ ( posedge a_rfclk)
		  nl111l48 <= nl111l46;
	initial
		nl111O43 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl111O43 <= nl111O45;
	initial
		nl111O44 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl111O44 <= (nl111O45 ^ nl111O43);
	initial
		nl111O45 = 0;
	always @ ( posedge a_rfclk)
		  nl111O45 <= nl111O43;
	initial
		nl11ii37 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11ii37 <= nl11ii39;
	initial
		nl11ii38 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11ii38 <= (nl11ii39 ^ nl11ii37);
	initial
		nl11ii39 = 0;
	always @ ( posedge a_rfclk)
		  nl11ii39 <= nl11ii37;
	initial
		nl11il34 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11il34 <= nl11il36;
	initial
		nl11il35 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11il35 <= (nl11il36 ^ nl11il34);
	initial
		nl11il36 = 0;
	always @ ( posedge a_rfclk)
		  nl11il36 <= nl11il34;
	initial
		nl11iO31 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11iO31 <= nl11iO33;
	initial
		nl11iO32 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11iO32 <= (nl11iO33 ^ nl11iO31);
	initial
		nl11iO33 = 0;
	always @ ( posedge a_rfclk)
		  nl11iO33 <= nl11iO31;
	initial
		nl11li28 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11li28 <= nl11li30;
	initial
		nl11li29 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11li29 <= (nl11li30 ^ nl11li28);
	initial
		nl11li30 = 0;
	always @ ( posedge a_rfclk)
		  nl11li30 <= nl11li28;
	initial
		nl11ll25 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11ll25 <= nl11ll27;
	initial
		nl11ll26 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11ll26 <= (nl11ll27 ^ nl11ll25);
	initial
		nl11ll27 = 0;
	always @ ( posedge a_rfclk)
		  nl11ll27 <= nl11ll25;
	initial
		nl11lO22 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11lO22 <= nl11lO24;
	initial
		nl11lO23 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11lO23 <= (nl11lO24 ^ nl11lO22);
	initial
		nl11lO24 = 0;
	always @ ( posedge a_rfclk)
		  nl11lO24 <= nl11lO22;
	initial
		nl11Oi19 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11Oi19 <= nl11Oi21;
	initial
		nl11Oi20 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11Oi20 <= (nl11Oi21 ^ nl11Oi19);
	initial
		nl11Oi21 = 0;
	always @ ( posedge a_rfclk)
		  nl11Oi21 <= nl11Oi19;
	initial
		nl11Ol16 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11Ol16 <= nl11Ol18;
	initial
		nl11Ol17 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11Ol17 <= (nl11Ol18 ^ nl11Ol16);
	initial
		nl11Ol18 = 0;
	always @ ( posedge a_rfclk)
		  nl11Ol18 <= nl11Ol16;
	initial
		nl11OO13 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11OO13 <= nl11OO15;
	initial
		nl11OO14 = {1{1'b1}};
	always @ ( posedge a_rfclk)
		  nl11OO14 <= (nl11OO15 ^ nl11OO13);
	initial
		nl11OO15 = 0;
	always @ ( posedge a_rfclk)
		  nl11OO15 <= nl11OO13;
	initial
	begin
		n000i = 1;
		n000l = 1;
		n001i = 1;
		n001l = 1;
		n001O = 1;
		n00ii = 1;
		n01OO = 1;
		n1O0i = 1;
		n1O0l = 1;
		n1O0O = 1;
		n1O1O = 1;
		n1Oii = 1;
		n1Oil = 1;
		n1OiO = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			n000i <= 0;
			n000l <= 0;
			n001i <= 0;
			n001l <= 0;
			n001O <= 0;
			n00ii <= 0;
			n01OO <= 0;
			n1O0i <= 0;
			n1O0l <= 0;
			n1O0O <= 0;
			n1O1O <= 0;
			n1Oii <= 0;
			n1Oil <= 0;
			n1OiO <= 0;
		end
		else if  (nl100i == 1'b1) 
		begin
			n000i <= n00lO;
			n000l <= n00Oi;
			n001i <= n00iO;
			n001l <= n00li;
			n001O <= n00ll;
			n00ii <= n00OO;
			n01OO <= n00il;
			n1O0i <= n0i1l;
			n1O0l <= n0i1O;
			n1O0O <= n0i0i;
			n1O1O <= n0i1i;
			n1Oii <= n0i0l;
			n1Oil <= n0i0O;
			n1OiO <= n0iii;
		end
	end
	initial
	begin
		n00il = 1;
		n00iO = 1;
		n00li = 1;
		n00ll = 1;
		n00lO = 1;
		n00Oi = 1;
		n00OO = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			n00il <= 0;
			n00iO <= 0;
			n00li <= 0;
			n00ll <= 0;
			n00lO <= 0;
			n00Oi <= 0;
			n00OO <= 0;
		end
		else if  (nl110i == 1'b1) 
		begin
			n00il <= wire_nl00i_o[6];
			n00iO <= wire_nl00i_o[5];
			n00li <= wire_nl00i_o[4];
			n00ll <= wire_nl00i_o[3];
			n00lO <= wire_nl00i_o[2];
			n00Oi <= wire_nl00i_o[1];
			n00OO <= wire_nl00i_o[0];
		end
	end
	initial
	begin
		n010i = 1;
		n010l = 1;
		n010O = 1;
		n01ii = 1;
		n01il = 1;
		n01iO = 1;
		n01ll = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			n010i <= 0;
			n010l <= 0;
			n010O <= 0;
			n01ii <= 0;
			n01il <= 0;
			n01iO <= 0;
			n01ll <= 0;
		end
		else if  (nl101O == 1'b0) 
		begin
			n010i <= n1OlO;
			n010l <= n1OOi;
			n010O <= n1OOl;
			n01ii <= n1OOO;
			n01il <= n011i;
			n01iO <= n011l;
			n01ll <= n011O;
		end
	end
	initial
	begin
		n0i0i = 0;
		n0i0l = 0;
		n0i0O = 0;
		n0i1i = 0;
		n0i1l = 0;
		n0i1O = 0;
		n0iii = 0;
		n0iil = 0;
		n0iiO = 0;
		n0ili = 0;
		n0ill = 0;
		n0ilO = 0;
		n0iOl = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			n0i0i <= 0;
			n0i0l <= 0;
			n0i0O <= 0;
			n0i1i <= 0;
			n0i1l <= 0;
			n0i1O <= 0;
			n0iii <= 0;
			n0iil <= 0;
			n0iiO <= 0;
			n0ili <= 0;
			n0ill <= 0;
			n0ilO <= 0;
			n0iOl <= 0;
		end
		else if  (nl10ii == 1'b1) 
		begin
			n0i0i <= n0ill;
			n0i0l <= n0ilO;
			n0i0O <= n0iOl;
			n0i1i <= n0iil;
			n0i1l <= n0iiO;
			n0i1O <= n0ili;
			n0iii <= n0l1i;
			n0iil <= wire_nlill_o[6];
			n0iiO <= wire_nlill_o[5];
			n0ili <= wire_nlill_o[4];
			n0ill <= wire_nlill_o[3];
			n0ilO <= wire_nlill_o[2];
			n0iOl <= wire_nlill_o[1];
		end
	end
	initial
	begin
		n0l1i = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			n0l1i <= 1;
		end
		else if  (nl10ii == 1'b1) 
		begin
			n0l1i <= wire_nlill_o[0];
		end
	end
	initial
	begin
		n0l0l = 1;
		nliiii = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			n0l0l <= 1;
			nliiii <= 1;
		end
		else 
		begin
			n0l0l <= wire_nl00O_dataout;
			nliiii <= (~ wire_nll1iO_dataout);
		end
	end
	initial
	begin
		n0lii = 1;
	end
	always @ ( posedge b_clk or negedge b_reset_n)
	begin
		if (b_reset_n == 1'b0) 
		begin
			n0lii <= 1;
		end
		else 
		begin
			n0lii <= wire_niOlO_dataout;
		end
	end
	initial
	begin
		n011i = 0;
		n011l = 0;
		n011O = 0;
		n01lO = 0;
		n01Oi = 0;
		n01Ol = 0;
		n0l1O = 0;
		n1lOO = 0;
		n1O1i = 0;
		n1O1l = 0;
		n1Oli = 0;
		n1Oll = 0;
		n1OlO = 0;
		n1OOi = 0;
		n1OOl = 0;
		n1OOO = 0;
		nl000i = 0;
		nl000l = 0;
		nl000O = 0;
		nl001i = 0;
		nl001l = 0;
		nl001O = 0;
		nl00ii = 0;
		nl00il = 0;
		nl00iO = 0;
		nl00li = 0;
		nl00ll = 0;
		nl010i = 0;
		nl010l = 0;
		nl010O = 0;
		nl011i = 0;
		nl011l = 0;
		nl011O = 0;
		nl01ii = 0;
		nl01il = 0;
		nl01iO = 0;
		nl01li = 0;
		nl01ll = 0;
		nl01lO = 0;
		nl01Oi = 0;
		nl01Ol = 0;
		nl01OO = 0;
		nl1OiO = 0;
		nl1Oli = 0;
		nl1Oll = 0;
		nl1OlO = 0;
		nl1OOi = 0;
		nl1OOl = 0;
		nl1OOO = 0;
		nli00i = 0;
		nli01i = 0;
		nli0ii = 0;
		nli0li = 0;
		nli0Oi = 0;
		nli0Ol = 0;
		nlii0i = 0;
		nlii0l = 0;
		nlii0O = 0;
		nliiil = 0;
		nliiiO = 0;
		nliili = 0;
		nliill = 0;
		nliilO = 0;
		nll00i = 0;
		nll00l = 0;
		nll00O = 0;
		nll01i = 0;
		nll01l = 0;
		nll01O = 0;
		nll0ii = 0;
		nll0il = 0;
		nll0iO = 0;
		nll0li = 0;
		nll0ll = 0;
		nll0lO = 0;
		nll0Oi = 0;
		nll0Ol = 0;
		nll11l = 0;
		nll1OO = 0;
		nlli0i = 0;
		nlli0l = 0;
		nlli0O = 0;
		nlli1i = 0;
		nlli1l = 0;
		nlli1O = 0;
		nlliii = 0;
		nlliil = 0;
		nlliiO = 0;
		nllOii = 0;
		nlOiiO = 0;
		nlOili = 0;
		nlOill = 0;
		nlOiOi = 0;
		nlOiOl = 0;
		nlOiOO = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			n011i <= 0;
			n011l <= 0;
			n011O <= 0;
			n01lO <= 0;
			n01Oi <= 0;
			n01Ol <= 0;
			n0l1O <= 0;
			n1lOO <= 0;
			n1O1i <= 0;
			n1O1l <= 0;
			n1Oli <= 0;
			n1Oll <= 0;
			n1OlO <= 0;
			n1OOi <= 0;
			n1OOl <= 0;
			n1OOO <= 0;
			nl000i <= 0;
			nl000l <= 0;
			nl000O <= 0;
			nl001i <= 0;
			nl001l <= 0;
			nl001O <= 0;
			nl00ii <= 0;
			nl00il <= 0;
			nl00iO <= 0;
			nl00li <= 0;
			nl00ll <= 0;
			nl010i <= 0;
			nl010l <= 0;
			nl010O <= 0;
			nl011i <= 0;
			nl011l <= 0;
			nl011O <= 0;
			nl01ii <= 0;
			nl01il <= 0;
			nl01iO <= 0;
			nl01li <= 0;
			nl01ll <= 0;
			nl01lO <= 0;
			nl01Oi <= 0;
			nl01Ol <= 0;
			nl01OO <= 0;
			nl1OiO <= 0;
			nl1Oli <= 0;
			nl1Oll <= 0;
			nl1OlO <= 0;
			nl1OOi <= 0;
			nl1OOl <= 0;
			nl1OOO <= 0;
			nli00i <= 0;
			nli01i <= 0;
			nli0ii <= 0;
			nli0li <= 0;
			nli0Oi <= 0;
			nli0Ol <= 0;
			nlii0i <= 0;
			nlii0l <= 0;
			nlii0O <= 0;
			nliiil <= 0;
			nliiiO <= 0;
			nliili <= 0;
			nliill <= 0;
			nliilO <= 0;
			nll00i <= 0;
			nll00l <= 0;
			nll00O <= 0;
			nll01i <= 0;
			nll01l <= 0;
			nll01O <= 0;
			nll0ii <= 0;
			nll0il <= 0;
			nll0iO <= 0;
			nll0li <= 0;
			nll0ll <= 0;
			nll0lO <= 0;
			nll0Oi <= 0;
			nll0Ol <= 0;
			nll11l <= 0;
			nll1OO <= 0;
			nlli0i <= 0;
			nlli0l <= 0;
			nlli0O <= 0;
			nlli1i <= 0;
			nlli1l <= 0;
			nlli1O <= 0;
			nlliii <= 0;
			nlliil <= 0;
			nlliiO <= 0;
			nllOii <= 0;
			nlOiiO <= 0;
			nlOili <= 0;
			nlOill <= 0;
			nlOiOi <= 0;
			nlOiOl <= 0;
			nlOiOO <= 0;
		end
		else 
		begin
			n011i <= n0lOO;
			n011l <= n0O1i;
			n011O <= n0O1O;
			n01lO <= n0lli;
			n01Oi <= n01lO;
			n01Ol <= n01Oi;
			n0l1O <= ((nl10ii & niOO0l) | ((~ nl10ii) & niOO0i));
			n1lOO <= wire_nliOl_dataout;
			n1O1i <= wire_nliOi_dataout;
			n1O1l <= wire_n1lii_dataout;
			n1Oli <= ni1ii;
			n1Oll <= n1Oli;
			n1OlO <= n0lll;
			n1OOi <= n0llO;
			n1OOl <= n0lOi;
			n1OOO <= n0lOl;
			nl000i <= a_rdat[7];
			nl000l <= a_rdat[6];
			nl000O <= a_rdat[5];
			nl001i <= a_rdat[10];
			nl001l <= a_rdat[9];
			nl001O <= a_rdat[8];
			nl00ii <= a_rdat[4];
			nl00il <= a_rdat[3];
			nl00iO <= a_rdat[2];
			nl00li <= a_rdat[1];
			nl00ll <= a_rdat[0];
			nl010i <= a_rdat[22];
			nl010l <= a_rdat[21];
			nl010O <= a_rdat[20];
			nl011i <= a_rdat[25];
			nl011l <= a_rdat[24];
			nl011O <= a_rdat[23];
			nl01ii <= a_rdat[19];
			nl01il <= a_rdat[18];
			nl01iO <= a_rdat[17];
			nl01li <= a_rdat[16];
			nl01ll <= a_rdat[15];
			nl01lO <= a_rdat[14];
			nl01Oi <= a_rdat[13];
			nl01Ol <= a_rdat[12];
			nl01OO <= a_rdat[11];
			nl1OiO <= wire_nll1iO_dataout;
			nl1Oli <= a_rdat[31];
			nl1Oll <= a_rdat[30];
			nl1OlO <= a_rdat[29];
			nl1OOi <= a_rdat[28];
			nl1OOl <= a_rdat[27];
			nl1OOO <= a_rdat[26];
			nli00i <= a_reop;
			nli01i <= a_rsop;
			nli0ii <= a_rerr;
			nli0li <= a_rprty;
			nli0Oi <= a_rmod[1];
			nli0Ol <= a_rmod[0];
			nlii0i <= a_rval;
			nlii0l <= nlii0i;
			nlii0O <= wire_nll1il_dataout;
			nliiil <= wire_nll1iO_dataout;
			nliiiO <= nliiil;
			nliili <= nliiiO;
			nliill <= nliili;
			nliilO <= wire_nlilOl_dataout;
			nll00i <= wire_nlil1O_dataout;
			nll00l <= wire_nlil0i_dataout;
			nll00O <= wire_nlil0l_dataout;
			nll01i <= wire_nliiOO_dataout;
			nll01l <= wire_nlil1i_dataout;
			nll01O <= wire_nlil1l_dataout;
			nll0ii <= wire_nlil0O_dataout;
			nll0il <= wire_nlilii_dataout;
			nll0iO <= wire_nlilil_dataout;
			nll0li <= wire_nliliO_dataout;
			nll0ll <= wire_nlilli_dataout;
			nll0lO <= wire_nlilll_dataout;
			nll0Oi <= wire_nlillO_dataout;
			nll0Ol <= wire_nlilOi_dataout;
			nll11l <= wire_nliiOi_dataout;
			nll1OO <= wire_nliiOl_dataout;
			nlli0i <= wire_nllO1l_o;
			nlli0l <= wire_nllO1i_o;
			nlli0O <= wire_nlllOO_o;
			nlli1i <= wire_nllO0l_o;
			nlli1l <= wire_nllO0i_o;
			nlli1O <= wire_nllO1O_o;
			nlliii <= wire_nlllOl_o;
			nlliil <= wire_nlllOi_o;
			nlliiO <= wire_nlllll_o;
			nllOii <= (wire_nllO0l_o | (nlii0O & wire_nllO0i_o));
			nlOiiO <= n0l0l;
			nlOili <= wire_nlOl0O_dataout;
			nlOill <= wire_nlOlii_dataout;
			nlOiOi <= wire_nlOliO_dataout;
			nlOiOl <= wire_nlOlli_dataout;
			nlOiOO <= wire_nlOlll_dataout;
		end
	end
	initial
	begin
		n0lll = 0;
		n0llO = 0;
		n0lOi = 0;
		n0lOl = 0;
		n0lOO = 0;
		n0O1i = 0;
		n0O1O = 0;
	end
	always @ ( posedge b_clk or negedge b_reset_n)
	begin
		if (b_reset_n == 1'b0) 
		begin
			n0lll <= 0;
			n0llO <= 0;
			n0lOi <= 0;
			n0lOl <= 0;
			n0lOO <= 0;
			n0O1i <= 0;
			n0O1O <= 0;
		end
		else if  (niOOlO == 1'b1) 
		begin
			n0lll <= nl1iO;
			n0llO <= nl1ii;
			n0lOi <= nl10O;
			n0lOl <= niOii;
			n0lOO <= niO0l;
			n0O1i <= niliO;
			n0O1O <= niilO;
		end
	end
	initial
	begin
		n111l = 0;
		nllili = 0;
		nllill = 0;
		nllilO = 0;
		nlliOi = 0;
		nlliOl = 0;
		nlliOO = 0;
		nlll0i = 0;
		nlll0l = 0;
		nlll0O = 0;
		nlll1i = 0;
		nlll1l = 0;
		nlll1O = 0;
		nlllii = 0;
		nlllil = 0;
		nllliO = 0;
		nlllli = 0;
		nlOilO = 0;
		nlOl1i = 0;
		nlOl1l = 0;
		nlOl1O = 0;
		nlOlil = 0;
		nlOlOi = 0;
		nlOlOl = 0;
		nlOlOO = 0;
		nlOO0i = 0;
		nlOO0l = 0;
		nlOO1i = 0;
		nlOO1l = 0;
		nlOO1O = 0;
		nlOOOi = 0;
		nlOOOl = 0;
		nlOOOO = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			n111l <= 0;
			nllili <= 0;
			nllill <= 0;
			nllilO <= 0;
			nlliOi <= 0;
			nlliOl <= 0;
			nlliOO <= 0;
			nlll0i <= 0;
			nlll0l <= 0;
			nlll0O <= 0;
			nlll1i <= 0;
			nlll1l <= 0;
			nlll1O <= 0;
			nlllii <= 0;
			nlllil <= 0;
			nllliO <= 0;
			nlllli <= 0;
			nlOilO <= 0;
			nlOl1i <= 0;
			nlOl1l <= 0;
			nlOl1O <= 0;
			nlOlil <= 0;
			nlOlOi <= 0;
			nlOlOl <= 0;
			nlOlOO <= 0;
			nlOO0i <= 0;
			nlOO0l <= 0;
			nlOO1i <= 0;
			nlOO1l <= 0;
			nlOO1O <= 0;
			nlOOOi <= 0;
			nlOOOl <= 0;
			nlOOOO <= 0;
		end
		else if  (nlii0O == 1'b1) 
		begin
			n111l <= nl0lOO;
			nllili <= nl00Oi;
			nllill <= nl00OO;
			nllilO <= nl0i1l;
			nlliOi <= nl0i0i;
			nlliOl <= nl0i0O;
			nlliOO <= nl0iil;
			nlll0i <= nl0l1i;
			nlll0l <= nl0l1O;
			nlll0O <= nl0l0l;
			nlll1i <= nl0ili;
			nlll1l <= nl0ilO;
			nlll1O <= nl0iOl;
			nlllii <= nl0lii;
			nlllil <= nl0liO;
			nllliO <= nl0lll;
			nlllli <= nl0lOi;
			nlOilO <= nli0lO;
			nlOl1i <= nli1OO;
			nlOl1l <= nli1Oi;
			nlOl1O <= nli1ll;
			nlOlil <= nli1iO;
			nlOlOi <= nli1ii;
			nlOlOl <= nli10l;
			nlOlOO <= nli11O;
			nlOO0i <= nl0Oli;
			nlOO0l <= nl0Oil;
			nlOO1i <= nli11i;
			nlOO1l <= nl0OOl;
			nlOO1O <= nl0OlO;
			nlOOOi <= nl0O0O;
			nlOOOl <= nl0O0i;
			nlOOOO <= nl0O1l;
		end
	end
	initial
	begin
		n1lOl = 1;
		nll0OO = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			n1lOl <= 1;
			nll0OO <= 1;
		end
		else 
		begin
			n1lOl <= wire_nliOO_dataout;
			nll0OO <= wire_nllO0O_o;
		end
	end
	initial
	begin
		ni00O = 1;
	end
	always @ ( posedge b_clk or negedge b_reset_n)
	begin
		if (b_reset_n == 1'b0) 
		begin
			ni00O <= 0;
		end
		else if  (b_ena == 1'b1) 
		begin
			ni00O <= (~ ni0li);
		end
	end
	initial
	begin
		ni0ii = 0;
		ni0li = 0;
	end
	always @ ( posedge b_clk or negedge b_reset_n)
	begin
		if (b_reset_n == 1'b0) 
		begin
			ni0ii <= 1;
			ni0li <= 1;
		end
		else 
		begin
			ni0ii <= ni0li;
			ni0li <= wire_niO1l_dataout;
		end
	end
	initial
	begin
		nii0l = 1;
	end
	always @ ( posedge b_clk or negedge b_reset_n)
	begin
		if (b_reset_n == 1'b0) 
		begin
			nii0l <= 1;
		end
		else if  (niOOOO == 1'b1) 
		begin
			nii0l <= wire_niO1O_o[0];
		end
	end
	initial
	begin
		n0lil = 1;
		n0liO = 1;
		n0lli = 1;
		n0O0i = 1;
		n0O0l = 1;
		n0O0O = 1;
		n0Oii = 1;
		n0Oil = 1;
		n0OiO = 1;
		n0Oli = 1;
		n0Oll = 1;
		n0OlO = 1;
		ni00i = 1;
		ni0il = 1;
		ni0ll = 1;
		ni0lO = 1;
		ni0Oi = 1;
		ni0Ol = 1;
		ni0OO = 1;
		ni10l = 1;
		ni10O = 1;
		ni1ii = 1;
		ni1il = 1;
		ni1iO = 1;
		ni1li = 1;
		ni1ll = 1;
		ni1lO = 1;
		ni1Oi = 1;
		ni1Ol = 1;
		nii1i = 1;
		nii1O = 1;
	end
	always @ ( posedge b_clk or negedge b_reset_n)
	begin
		if (b_reset_n == 1'b0) 
		begin
			n0lil <= 0;
			n0liO <= 0;
			n0lli <= 0;
			n0O0i <= 0;
			n0O0l <= 0;
			n0O0O <= 0;
			n0Oii <= 0;
			n0Oil <= 0;
			n0OiO <= 0;
			n0Oli <= 0;
			n0Oll <= 0;
			n0OlO <= 0;
			ni00i <= 0;
			ni0il <= 0;
			ni0ll <= 0;
			ni0lO <= 0;
			ni0Oi <= 0;
			ni0Ol <= 0;
			ni0OO <= 0;
			ni10l <= 0;
			ni10O <= 0;
			ni1ii <= 0;
			ni1il <= 0;
			ni1iO <= 0;
			ni1li <= 0;
			ni1ll <= 0;
			ni1lO <= 0;
			ni1Oi <= 0;
			ni1Ol <= 0;
			nii1i <= 0;
			nii1O <= 0;
		end
		else 
		begin
			n0lil <= wire_niOll_dataout;
			n0liO <= wire_niOli_dataout;
			n0lli <= wire_n1lil_dataout;
			n0O0i <= n01Ol;
			n0O0l <= n0O0i;
			n0O0O <= n1O1O;
			n0Oii <= n1O0i;
			n0Oil <= n1O0l;
			n0OiO <= n1O0O;
			n0Oli <= n1Oii;
			n0Oll <= n1Oil;
			n0OlO <= n1OiO;
			ni00i <= wire_niiOi_dataout;
			ni0il <= b_ena;
			ni0ll <= wire_nilli_dataout;
			ni0lO <= wire_nilll_dataout;
			ni0Oi <= wire_nillO_dataout;
			ni0Ol <= wire_nilOi_dataout;
			ni0OO <= wire_nilOl_dataout;
			ni10l <= n1O1l;
			ni10O <= ni10l;
			ni1ii <= ni10O;
			ni1il <= n01OO;
			ni1iO <= n001i;
			ni1li <= n001l;
			ni1ll <= n001O;
			ni1lO <= n000i;
			ni1Oi <= n000l;
			ni1Ol <= n00ii;
			nii1i <= wire_nilOO_dataout;
			nii1O <= wire_niO1i_dataout;
		end
	end
	initial
	begin
		nl00Oi = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl00Oi <= 0;
		end
		else if  (wire_nl00lO_ENA == 1'b1) 
		begin
			nl00Oi <= nl1Oli;
		end
	end
	assign
		wire_nl00lO_ENA = (nlii0i & nliill);
	initial
	begin
		nl00OO = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl00OO <= 0;
		end
		else if  (wire_nl00Ol_ENA == 1'b1) 
		begin
			nl00OO <= nl1Oll;
		end
	end
	assign
		wire_nl00Ol_ENA = (nlii0i & nliill);
	initial
	begin
		nl0i0O = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0i0O <= 0;
		end
		else if  (wire_nl0i0l_ENA == 1'b1) 
		begin
			nl0i0O <= nl1OOl;
		end
	end
	assign
		wire_nl0i0l_ENA = (nlii0i & nliill);
	initial
	begin
		nl0i1l = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0i1l <= 0;
		end
		else if  (wire_nl0i1i_ENA == 1'b1) 
		begin
			nl0i1l <= nl1OlO;
		end
	end
	assign
		wire_nl0i1i_ENA = (nlii0i & nliill);
	initial
	begin
		nl0i0i = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0i0i <= 0;
		end
		else if  (wire_nl0i1O_ENA == 1'b1) 
		begin
			nl0i0i <= nl1OOi;
		end
	end
	assign
		wire_nl0i1O_ENA = (nlii0i & nliill);
	initial
	begin
		nl0iil = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0iil <= 0;
		end
		else if  (wire_nl0iii_ENA == 1'b1) 
		begin
			nl0iil <= nl1OOO;
		end
	end
	assign
		wire_nl0iii_ENA = (nlii0i & nliill);
	initial
	begin
		nl0ili = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0ili <= 0;
		end
		else if  (wire_nl0iiO_ENA == 1'b1) 
		begin
			nl0ili <= nl011i;
		end
	end
	assign
		wire_nl0iiO_ENA = (nlii0i & nliill);
	initial
	begin
		nl0ilO = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0ilO <= 0;
		end
		else if  (wire_nl0ill_ENA == 1'b1) 
		begin
			nl0ilO <= nl011l;
		end
	end
	assign
		wire_nl0ill_ENA = (nlii0i & nliill);
	initial
	begin
		nl0iOl = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0iOl <= 0;
		end
		else if  (wire_nl0iOi_ENA == 1'b1) 
		begin
			nl0iOl <= nl011O;
		end
	end
	assign
		wire_nl0iOi_ENA = (nlii0i & nliill);
	initial
	begin
		nl0l1i = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0l1i <= 0;
		end
		else if  (wire_nl0iOO_ENA == 1'b1) 
		begin
			nl0l1i <= nl010i;
		end
	end
	assign
		wire_nl0iOO_ENA = (nlii0i & nliill);
	initial
	begin
		nl0l0l = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0l0l <= 0;
		end
		else if  (wire_nl0l0i_ENA == 1'b1) 
		begin
			nl0l0l <= nl010O;
		end
	end
	assign
		wire_nl0l0i_ENA = (nlii0i & nliill);
	initial
	begin
		nl0lii = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0lii <= 0;
		end
		else if  (wire_nl0l0O_ENA == 1'b1) 
		begin
			nl0lii <= nl01ii;
		end
	end
	assign
		wire_nl0l0O_ENA = (nlii0i & nliill);
	initial
	begin
		nl0l1O = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0l1O <= 0;
		end
		else if  (wire_nl0l1l_ENA == 1'b1) 
		begin
			nl0l1O <= nl010l;
		end
	end
	assign
		wire_nl0l1l_ENA = (nlii0i & nliill);
	initial
	begin
		nl0liO = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0liO <= 0;
		end
		else if  (wire_nl0lil_ENA == 1'b1) 
		begin
			nl0liO <= nl01il;
		end
	end
	assign
		wire_nl0lil_ENA = (nlii0i & nliill);
	initial
	begin
		nl0lll = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0lll <= 0;
		end
		else if  (wire_nl0lli_ENA == 1'b1) 
		begin
			nl0lll <= nl01iO;
		end
	end
	assign
		wire_nl0lli_ENA = (nlii0i & nliill);
	initial
	begin
		nl0lOi = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0lOi <= 0;
		end
		else if  (wire_nl0llO_ENA == 1'b1) 
		begin
			nl0lOi <= nl01li;
		end
	end
	assign
		wire_nl0llO_ENA = (nlii0i & nliill);
	initial
	begin
		nl0lOO = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0lOO <= 0;
		end
		else if  (wire_nl0lOl_ENA == 1'b1) 
		begin
			nl0lOO <= nl01ll;
		end
	end
	assign
		wire_nl0lOl_ENA = (nlii0i & nliill);
	initial
	begin
		nl0O0O = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0O0O <= 0;
		end
		else if  (wire_nl0O0l_ENA == 1'b1) 
		begin
			nl0O0O <= nl01Ol;
		end
	end
	assign
		wire_nl0O0l_ENA = (nlii0i & nliill);
	initial
	begin
		nl0O1l = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0O1l <= 0;
		end
		else if  (wire_nl0O1i_ENA == 1'b1) 
		begin
			nl0O1l <= nl01lO;
		end
	end
	assign
		wire_nl0O1i_ENA = (nlii0i & nliill);
	initial
	begin
		nl0O0i = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0O0i <= 0;
		end
		else if  (wire_nl0O1O_ENA == 1'b1) 
		begin
			nl0O0i <= nl01Oi;
		end
	end
	assign
		wire_nl0O1O_ENA = (nlii0i & nliill);
	initial
	begin
		nl0Oil = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0Oil <= 0;
		end
		else if  (wire_nl0Oii_ENA == 1'b1) 
		begin
			nl0Oil <= nl01OO;
		end
	end
	assign
		wire_nl0Oii_ENA = (nlii0i & nliill);
	initial
	begin
		nl0Oli = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0Oli <= 0;
		end
		else if  (wire_nl0OiO_ENA == 1'b1) 
		begin
			nl0Oli <= nl001i;
		end
	end
	assign
		wire_nl0OiO_ENA = (nlii0i & nliill);
	initial
	begin
		nl0OlO = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0OlO <= 0;
		end
		else if  (wire_nl0Oll_ENA == 1'b1) 
		begin
			nl0OlO <= nl001l;
		end
	end
	assign
		wire_nl0Oll_ENA = (nlii0i & nliill);
	initial
	begin
		nl0OOl = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nl0OOl <= 0;
		end
		else if  (wire_nl0OOi_ENA == 1'b1) 
		begin
			nl0OOl <= nl001O;
		end
	end
	assign
		wire_nl0OOi_ENA = (nlii0i & nliill);
	initial
	begin
		nli11i = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nli11i <= 0;
		end
		else if  (wire_nl0OOO_ENA == 1'b1) 
		begin
			nli11i <= nl000i;
		end
	end
	assign
		wire_nl0OOO_ENA = (nlii0i & nliill);
	initial
	begin
		nii0O = 0;
		niiii = 0;
		niiil = 0;
		niiiO = 0;
		niili = 0;
		niill = 0;
		niilO = 0;
		niliO = 0;
		niO0l = 0;
		niOii = 0;
		nl10O = 0;
		nl1ii = 0;
		nl1iO = 0;
	end
	always @ ( posedge b_clk or negedge b_reset_n)
	begin
		if (b_reset_n == 1'b0) 
		begin
			nii0O <= 0;
			niiii <= 0;
			niiil <= 0;
			niiiO <= 0;
			niili <= 0;
			niill <= 0;
			niilO <= 0;
			niliO <= 0;
			niO0l <= 0;
			niOii <= 0;
			nl10O <= 0;
			nl1ii <= 0;
			nl1iO <= 0;
		end
		else if  (niOOOO == 1'b1) 
		begin
			nii0O <= wire_niO1O_o[1];
			niiii <= wire_niO1O_o[2];
			niiil <= wire_niO1O_o[3];
			niiiO <= wire_niO1O_o[4];
			niili <= wire_niO1O_o[5];
			niill <= wire_niO1O_o[6];
			niilO <= nii0l;
			niliO <= nii0O;
			niO0l <= niiii;
			niOii <= niiil;
			nl10O <= niiiO;
			nl1ii <= niili;
			nl1iO <= niill;
		end
	end
	initial
	begin
		nl1ll = 0;
	end
	always @ ( posedge b_clk or negedge b_reset_n)
	begin
		if (b_reset_n == 1'b0) 
		begin
			nl1ll <= 1;
		end
		else if  (nl10li == 1'b1) 
		begin
			nl1ll <= wire_nilii_o[0];
		end
	end
	initial
	begin
		nli00O = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nli00O <= 0;
		end
		else if  (wire_nli00l_ENA == 1'b1) 
		begin
			nli00O <= nli00i;
		end
	end
	assign
		wire_nli00l_ENA = (nlii0i & nliill);
	initial
	begin
		nli01O = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nli01O <= 0;
		end
		else if  (wire_nli01l_ENA == 1'b1) 
		begin
			nli01O <= nli01i;
		end
	end
	assign
		wire_nli01l_ENA = (nlii0i & nliill);
	initial
	begin
		nli0iO = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nli0iO <= 0;
		end
		else if  (wire_nli0il_ENA == 1'b1) 
		begin
			nli0iO <= nli0ii;
		end
	end
	assign
		wire_nli0il_ENA = (nlii0i & nliill);
	initial
	begin
		nli0lO = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nli0lO <= 0;
		end
		else if  (wire_nli0ll_ENA == 1'b1) 
		begin
			nli0lO <= nli0li;
		end
	end
	assign
		wire_nli0ll_ENA = (nlii0i & nliill);
	initial
	begin
		nlii1i = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nlii1i <= 0;
		end
		else if  (wire_nli0OO_ENA == 1'b1) 
		begin
			nlii1i <= nli0Oi;
		end
	end
	assign
		wire_nli0OO_ENA = (nlii0i & nliill);
	initial
	begin
		nli10l = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nli10l <= 0;
		end
		else if  (wire_nli10i_ENA == 1'b1) 
		begin
			nli10l <= nl000O;
		end
	end
	assign
		wire_nli10i_ENA = (nlii0i & nliill);
	initial
	begin
		nli1ii = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nli1ii <= 0;
		end
		else if  (wire_nli10O_ENA == 1'b1) 
		begin
			nli1ii <= nl00ii;
		end
	end
	assign
		wire_nli10O_ENA = (nlii0i & nliill);
	initial
	begin
		nli11O = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nli11O <= 0;
		end
		else if  (wire_nli11l_ENA == 1'b1) 
		begin
			nli11O <= nl000l;
		end
	end
	assign
		wire_nli11l_ENA = (nlii0i & nliill);
	initial
	begin
		nli1iO = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nli1iO <= 0;
		end
		else if  (wire_nli1il_ENA == 1'b1) 
		begin
			nli1iO <= nl00il;
		end
	end
	assign
		wire_nli1il_ENA = (nlii0i & nliill);
	initial
	begin
		nli1ll = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nli1ll <= 0;
		end
		else if  (wire_nli1li_ENA == 1'b1) 
		begin
			nli1ll <= nl00iO;
		end
	end
	assign
		wire_nli1li_ENA = (nlii0i & nliill);
	initial
	begin
		nli1Oi = 1;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nli1Oi <= 0;
		end
		else if  (wire_nli1lO_ENA == 1'b1) 
		begin
			nli1Oi <= nl00li;
		end
	end
	assign
		wire_nli1lO_ENA = (nlii0i & nliill);
	initial
	begin
		nli1OO = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nli1OO <= 0;
		end
		else if  (wire_nli1Ol_ENA == 1'b1) 
		begin
			nli1OO <= nl00ll;
		end
	end
	assign
		wire_nli1Ol_ENA = (nlii0i & nliill);
	initial
	begin
		nlii1O = 0;
	end
	always @ ( posedge a_rfclk or negedge a_rreset_n)
	begin
		if (a_rreset_n == 1'b0) 
		begin
			nlii1O <= 0;
		end
		else if  (wire_nlii1l_ENA == 1'b1) 
		begin
			nlii1O <= nli0Ol;
		end
	end
	assign
		wire_nlii1l_ENA = (nlii0i & nliill);
	initial
	begin
		nl01i = 0;
		nl01l = 0;
		nl01O = 0;
		nl1lO = 0;
		nl1Oi = 0;
		nl1Ol = 0;
		nl1OO = 0;
		nliil = 0;
		nlili = 0;
		nlliO = 0;
		nllOi = 0;
		nllOl = 0;
		nlO1i = 0;
	end
	always @ ( posedge b_clk or negedge b_reset_n)
	begin
		if (b_reset_n == 1'b0) 
		begin
			nl01i <= 0;
			nl01l <= 0;
			nl01O <= 0;
			nl1lO <= 0;
			nl1Oi <= 0;
			nl1Ol <= 0;
			nl1OO <= 0;
			nliil <= 0;
			nlili <= 0;
			nlliO <= 0;
			nllOi <= 0;
			nllOl <= 0;
			nlO1i <= 0;
		end
		else if  (nl10li == 1'b1) 
		begin
			nl01i <= wire_nilii_o[5];
			nl01l <= wire_nilii_o[6];
			nl01O <= nl1ll;
			nl1lO <= wire_nilii_o[1];
			nl1Oi <= wire_nilii_o[2];
			nl1Ol <= wire_nilii_o[3];
			nl1OO <= wire_nilii_o[4];
			nliil <= nl1lO;
			nlili <= nl1Oi;
			nlliO <= nl1Ol;
			nllOi <= nl1OO;
			nllOl <= nl01i;
			nlO1i <= nl01l;
		end
	end
	initial
	begin
		n0OOi = 1;
		n0OOl = 1;
		n0OOO = 1;
		ni01i = 1;
		ni01l = 1;
		ni01O = 1;
		ni10i = 1;
		ni11i = 1;
		ni11l = 1;
		ni11O = 1;
		ni1OO = 1;
		nlO0l = 1;
		nlO1l = 1;
		nlO1O = 1;
	end
	always @ ( posedge b_clk or negedge b_reset_n)
	begin
		if (b_reset_n == 1'b0) 
		begin
			n0OOi <= 0;
			n0OOl <= 0;
			n0OOO <= 0;
			ni01i <= 0;
			ni01l <= 0;
			ni01O <= 0;
			ni10i <= 0;
			ni11i <= 0;
			ni11l <= 0;
			ni11O <= 0;
			ni1OO <= 0;
			nlO0l <= 0;
			nlO1l <= 0;
			nlO1O <= 0;
		end
		else if  (nl10Ol == 1'b0) 
		begin
			n0OOi <= n0O0O;
			n0OOl <= n0Oii;
			n0OOO <= n0Oil;
			ni01i <= ni1iO;
			ni01l <= ni1li;
			ni01O <= ni1ll;
			ni10i <= n0OlO;
			ni11i <= n0OiO;
			ni11l <= n0Oli;
			ni11O <= n0Oll;
			ni1OO <= ni1il;
			nlO0l <= ni1lO;
			nlO1l <= ni1Ol;
			nlO1O <= ni1Oi;
		end
	end
	assign		wire_n1lii_dataout = ((n1O1i & ((~ nl100i) & (~ n1lOO))) === 1'b1) ? (~ n1O1l) : n1O1l;
	assign		wire_n1lil_dataout = ((n0liO & ((~ niOOlO) & (~ n0lil))) === 1'b1) ? (~ n0lli) : n0lli;
	or(wire_niiOi_dataout, wire_niiOl_dataout, ((~ wire_nil0O_dataout) | wire_nil0l_o));
	and(wire_niiOl_dataout, ni00i, ~{(b_ena & (wire_nil0O_dataout & wire_nil1l_o))});
	assign		wire_nil0O_dataout = (nl10li === 1'b1) ? niOO0O : niOOii;
	assign		wire_nilli_dataout = (niOOOO === 1'b1) ? wire_niOil_o[1] : wire_niO0O_o[1];
	assign		wire_nilll_dataout = (niOOOO === 1'b1) ? wire_niOil_o[2] : wire_niO0O_o[2];
	assign		wire_nillO_dataout = (niOOOO === 1'b1) ? wire_niOil_o[3] : wire_niO0O_o[3];
	assign		wire_nilOi_dataout = (niOOOO === 1'b1) ? wire_niOil_o[4] : wire_niO0O_o[4];
	assign		wire_nilOl_dataout = (niOOOO === 1'b1) ? wire_niOil_o[5] : wire_niO0O_o[5];
	assign		wire_nilOO_dataout = (niOOOO === 1'b1) ? wire_niOil_o[6] : wire_niO0O_o[6];
	assign		wire_niO1i_dataout = (niOOOO === 1'b1) ? wire_niOil_o[7] : wire_niO0O_o[7];
	assign		wire_niO1l_dataout = (niOOOO === 1'b1) ? niOOil : niOOiO;
	and(wire_niOli_dataout, wire_niOOi_dataout, ~{niOOlO});
	or(wire_niOll_dataout, wire_niOOl_dataout, niOOlO);
	and(wire_niOlO_dataout, wire_niOOO_dataout, ~{niOOlO});
	or(wire_niOOi_dataout, wire_nl11i_dataout, n0lil);
	and(wire_niOOl_dataout, wire_nl11l_dataout, ~{n0lil});
	and(wire_niOOO_dataout, wire_nl11O_dataout, ~{n0lil});
	and(wire_nl00O_dataout, wire_nl0ii_dataout, ~{wire_nl0li_o});
	or(wire_nl0ii_dataout, n0l0l, wire_nl0il_o);
	assign		wire_nl0lO_dataout = (nl10ii === 1'b1) ? wire_nli0l_o[1] : wire_nli0i_o[1];
	assign		wire_nl0Oi_dataout = (nl10ii === 1'b1) ? wire_nli0l_o[2] : wire_nli0i_o[2];
	assign		wire_nl0Ol_dataout = (nl10ii === 1'b1) ? wire_nli0l_o[3] : wire_nli0i_o[3];
	assign		wire_nl0OO_dataout = (nl10ii === 1'b1) ? wire_nli0l_o[4] : wire_nli0i_o[4];
	and(wire_nl11i_dataout, n0liO, ~{n0liO});
	and(wire_nl11l_dataout, n0lil, ~{n0liO});
	or(wire_nl11O_dataout, n0lii, n0liO);
	assign		wire_nli1i_dataout = (nl10ii === 1'b1) ? wire_nli0l_o[5] : wire_nli0i_o[5];
	assign		wire_nli1l_dataout = (nl10ii === 1'b1) ? wire_nli0l_o[6] : wire_nli0i_o[6];
	assign		wire_nli1O_dataout = (nl10ii === 1'b1) ? wire_nli0l_o[7] : wire_nli0i_o[7];
	and(wire_nliiOi_dataout, niOlOi, ~{niOlOO});
	assign		wire_nliiOl_dataout = (niOlOO === 1'b1) ? wire_nliO1i_dataout : wire_nlilOO_o[1];
	assign		wire_nliiOO_dataout = (niOlOO === 1'b1) ? wire_nliO1l_dataout : wire_nlilOO_o[2];
	assign		wire_nlil0i_dataout = (niOlOO === 1'b1) ? wire_nliO0O_dataout : wire_nlilOO_o[6];
	assign		wire_nlil0l_dataout = (niOlOO === 1'b1) ? wire_nliOii_dataout : wire_nlilOO_o[7];
	assign		wire_nlil0O_dataout = (niOlOO === 1'b1) ? wire_nliOil_dataout : wire_nlilOO_o[8];
	assign		wire_nlil1i_dataout = (niOlOO === 1'b1) ? wire_nliO1O_dataout : wire_nlilOO_o[3];
	assign		wire_nlil1l_dataout = (niOlOO === 1'b1) ? wire_nliO0i_dataout : wire_nlilOO_o[4];
	assign		wire_nlil1O_dataout = (niOlOO === 1'b1) ? wire_nliO0l_dataout : wire_nlilOO_o[5];
	assign		wire_nlilii_dataout = (niOlOO === 1'b1) ? wire_nliOiO_dataout : wire_nlilOO_o[9];
	assign		wire_nlilil_dataout = (niOlOO === 1'b1) ? wire_nliOli_dataout : wire_nlilOO_o[10];
	assign		wire_nliliO_dataout = (niOlOO === 1'b1) ? wire_nliOll_dataout : wire_nlilOO_o[11];
	assign		wire_nlilli_dataout = (niOlOO === 1'b1) ? wire_nliOlO_dataout : wire_nlilOO_o[12];
	assign		wire_nlilll_dataout = (niOlOO === 1'b1) ? wire_nliOOi_dataout : wire_nlilOO_o[13];
	assign		wire_nlillO_dataout = (niOlOO === 1'b1) ? wire_nliOOl_dataout : wire_nlilOO_o[14];
	assign		wire_nlilOi_dataout = (niOlOO === 1'b1) ? wire_nliOOO_dataout : wire_nlilOO_o[15];
	assign		wire_nlilOl_dataout = (niOlOO === 1'b1) ? wire_nll11i_dataout : wire_nlilOO_o[16];
	assign		wire_nliO0i_dataout = (niOlOl === 1'b1) ? wire_nll10i_o[4] : wire_nll11O_o[2];
	assign		wire_nliO0l_dataout = (niOlOl === 1'b1) ? wire_nll10i_o[5] : wire_nll11O_o[3];
	assign		wire_nliO0O_dataout = (niOlOl === 1'b1) ? wire_nll10i_o[6] : wire_nll11O_o[4];
	and(wire_nliO1i_dataout, wire_nll10i_o[1], niOlOl);
	and(wire_nliO1l_dataout, wire_nll10i_o[2], niOlOl);
	assign		wire_nliO1O_dataout = (niOlOl === 1'b1) ? wire_nll10i_o[3] : wire_nll11O_o[1];
	and(wire_nliOi_dataout, wire_nll1i_dataout, ~{nl100i});
	assign		wire_nliOii_dataout = (niOlOl === 1'b1) ? wire_nll10i_o[7] : wire_nll11O_o[5];
	assign		wire_nliOil_dataout = (niOlOl === 1'b1) ? wire_nll10i_o[8] : wire_nll11O_o[6];
	assign		wire_nliOiO_dataout = (niOlOl === 1'b1) ? wire_nll10i_o[9] : wire_nll11O_o[7];
	or(wire_nliOl_dataout, wire_nll1l_dataout, nl100i);
	assign		wire_nliOli_dataout = (niOlOl === 1'b1) ? wire_nll10i_o[10] : wire_nll11O_o[8];
	assign		wire_nliOll_dataout = (niOlOl === 1'b1) ? wire_nll10i_o[11] : wire_nll11O_o[9];
	assign		wire_nliOlO_dataout = (niOlOl === 1'b1) ? wire_nll10i_o[12] : wire_nll11O_o[10];
	and(wire_nliOO_dataout, wire_nll1O_dataout, ~{nl100i});
	assign		wire_nliOOi_dataout = (niOlOl === 1'b1) ? wire_nll10i_o[13] : wire_nll11O_o[11];
	assign		wire_nliOOl_dataout = (niOlOl === 1'b1) ? wire_nll10i_o[14] : wire_nll11O_o[12];
	assign		wire_nliOOO_dataout = (niOlOl === 1'b1) ? wire_nll10i_o[15] : wire_nll11O_o[13];
	and(wire_nll0i_dataout, n1O1i, ~{n1O1i});
	and(wire_nll0l_dataout, n1lOO, ~{n1O1i});
	or(wire_nll0O_dataout, n1lOl, n1O1i);
	assign		wire_nll11i_dataout = (niOlOl === 1'b1) ? wire_nll10i_o[16] : wire_nll11O_o[14];
	or(wire_nll1i_dataout, wire_nll0i_dataout, n1lOO);
	and(wire_nll1il_dataout, nliill, nlii0i);
	assign		wire_nll1iO_dataout = ((~ nl1OiO) === 1'b1) ? wire_nll1Oi_dataout : (~ ((~ nlOiiO) & (nli00i | (nll11l | (~ nlii0i)))));
	and(wire_nll1l_dataout, wire_nll0l_dataout, ~{n1lOO});
	and(wire_nll1O_dataout, wire_nll0O_dataout, ~{n1lOO});
	or(wire_nll1Oi_dataout, (nlOiiO & nlii0i), nlOiiO);
	or(wire_nllOil_dataout, wire_nlO01i_dataout, ~{nlii0O});
	or(wire_nllOiO_dataout, wire_nlO1OO_dataout, ~{nlii0O});
	or(wire_nllOli_dataout, wire_nlO1Ol_dataout, ~{nlii0O});
	or(wire_nllOll_dataout, wire_nlO1Oi_dataout, ~{nlii0O});
	or(wire_nllOlO_dataout, wire_nlO1lO_dataout, ~{nlii0O});
	and(wire_nllOOi_dataout, wire_nlO1li_dataout, nlii0O);
	or(wire_nllOOl_dataout, wire_nlO1ll_dataout, ~{nlii0O});
	or(wire_nllOOO_dataout, wire_nlO1li_dataout, ~{nlii0O});
	and(wire_nlO00i_dataout, wire_nlO0Ol_dataout, ~{wire_nlOOll_dataout});
	and(wire_nlO00l_dataout, nlliiO, ~{wire_nlOOiO_dataout});
	and(wire_nlO00O_dataout, nlliil, ~{wire_nlOOiO_dataout});
	and(wire_nlO01i_dataout, wire_nlO0ll_dataout, ~{wire_nlOOll_dataout});
	and(wire_nlO01l_dataout, wire_nlO0lO_dataout, ~{wire_nlOOll_dataout});
	or(wire_nlO01O_dataout, wire_nlO0Oi_dataout, wire_nlOOll_dataout);
	and(wire_nlO0ii_dataout, nlliii, ~{wire_nlOOiO_dataout});
	and(wire_nlO0il_dataout, nlli0O, ~{wire_nlOOiO_dataout});
	and(wire_nlO0iO_dataout, nlli0l, ~{wire_nlOOiO_dataout});
	and(wire_nlO0li_dataout, nlli0i, ~{wire_nlOOiO_dataout});
	and(wire_nlO0ll_dataout, nlli1O, ~{wire_nlOOiO_dataout});
	and(wire_nlO0lO_dataout, nlli1l, ~{wire_nlOOiO_dataout});
	or(wire_nlO0Oi_dataout, nlli1i, wire_nlOOiO_dataout);
	and(wire_nlO0Ol_dataout, nll0OO, ~{wire_nlOOiO_dataout});
	or(wire_nlO0OO_dataout, wire_nlOi1l_dataout, ~{nlii0O});
	and(wire_nlO10i_dataout, wire_nlO1Ol_dataout, nlii0O);
	and(wire_nlO10l_dataout, wire_nlO1OO_dataout, nlii0O);
	and(wire_nlO10O_dataout, wire_nlO01i_dataout, nlii0O);
	and(wire_nlO11i_dataout, wire_nlO1ll_dataout, nlii0O);
	and(wire_nlO11l_dataout, wire_nlO1lO_dataout, nlii0O);
	and(wire_nlO11O_dataout, wire_nlO1Oi_dataout, nlii0O);
	and(wire_nlO1ii_dataout, wire_nlO01l_dataout, nlii0O);
	and(wire_nlO1il_dataout, wire_nlO01O_dataout, nlii0O);
	and(wire_nlO1iO_dataout, wire_nlO00i_dataout, nlii0O);
	and(wire_nlO1li_dataout, wire_nlO00l_dataout, ~{wire_nlOOll_dataout});
	and(wire_nlO1ll_dataout, wire_nlO00O_dataout, ~{wire_nlOOll_dataout});
	and(wire_nlO1lO_dataout, wire_nlO0ii_dataout, ~{wire_nlOOll_dataout});
	and(wire_nlO1Oi_dataout, wire_nlO0il_dataout, ~{wire_nlOOll_dataout});
	and(wire_nlO1Ol_dataout, wire_nlO0iO_dataout, ~{wire_nlOOll_dataout});
	and(wire_nlO1OO_dataout, wire_nlO0li_dataout, ~{wire_nlOOll_dataout});
	and(wire_nlOi0i_dataout, wire_nlOiii_dataout, nlii0O);
	and(wire_nlOi0l_dataout, wire_nlOiil_dataout, nlii0O);
	or(wire_nlOi0O_dataout, (~ wire_nlOOll_dataout), ~{nlii0O});
	and(wire_nlOi1i_dataout, wire_nlOi1O_dataout, nlii0O);
	and(wire_nlOi1l_dataout, (~ wire_nlOOiO_dataout), ~{wire_nlOOll_dataout});
	or(wire_nlOi1O_dataout, wire_nlOOiO_dataout, wire_nlOOll_dataout);
	and(wire_nlOiii_dataout, (~ wire_nlOOiO_dataout), ~{(~ wire_nlOOll_dataout)});
	and(wire_nlOiil_dataout, wire_nlOOiO_dataout, ~{(~ wire_nlOOll_dataout)});
	and(wire_nlOl0O_dataout, nlii1O, wire_nllO0l_o);
	and(wire_nlOlii_dataout, nlii1i, wire_nllO0l_o);
	and(wire_nlOliO_dataout, wire_nlOO0O_dataout, wire_nllO0l_o);
	and(wire_nlOlli_dataout, wire_nlOOiO_dataout, wire_nllO0l_o);
	assign		wire_nlOlll_dataout = (niOO1O === 1'b1) ? wire_nlOOll_dataout : wire_nlOllO_dataout;
	and(wire_nlOllO_dataout, nlOiOO, ~{nlli1l});
	assign		wire_nlOO0O_dataout = (niOO1O === 1'b1) ? niOO1l : (nli01O | niOO1l);
	assign		wire_nlOOiO_dataout = (niOO1O === 1'b1) ? nli00O : (nli01O | nli00O);
	and(wire_nlOOll_dataout, nli01O, niOO1O);
	oper_add   nil1O
	( 
	.a({{12{1'b0}}, 1'b1, {3{1'b0}}}),
	.b({{15{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nil1O_o));
	defparam
		nil1O.sgate_representation = 0,
		nil1O.width_a = 16,
		nil1O.width_b = 16,
		nil1O.width_o = 16;
	oper_add   nilii
	( 
	.a({nl01l, nl01i, nl1OO, nl1Ol, nl1Oi, nl1lO, nl1ll}),
	.b({{6{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nilii_o));
	defparam
		nilii.sgate_representation = 0,
		nilii.width_a = 7,
		nilii.width_b = 7,
		nilii.width_o = 7;
	oper_add   niO0O
	( 
	.a({n0OOi, n0OOl, n0OOO, ni11i, ni11l, ni11O, ni10i, 1'b1}),
	.b({(~ nl1iO), (~ nl1ii), (~ nl10O), (~ niOii), (~ niO0l), (~ niliO), (~ niilO), 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_niO0O_o));
	defparam
		niO0O.sgate_representation = 0,
		niO0O.width_a = 8,
		niO0O.width_b = 8,
		niO0O.width_o = 8;
	oper_add   niO1O
	( 
	.a({niill, niili, niiiO, niiil, niiii, nii0O, nii0l}),
	.b({{6{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_niO1O_o));
	defparam
		niO1O.sgate_representation = 0,
		niO1O.width_a = 7,
		niO1O.width_b = 7,
		niO1O.width_o = 7;
	oper_add   niOil
	( 
	.a({n0OOi, n0OOl, n0OOO, ni11i, (niOOli59 & ni11l), (niOOll56 & ni11O), ni10i, 1'b1}),
	.b({(~ niill), (~ niili), (~ niiiO), (~ niiil), (~ niiii), (~ nii0O), (~ nii0l), 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_niOil_o));
	defparam
		niOil.sgate_representation = 0,
		niOil.width_a = 8,
		niOil.width_b = 8,
		niOil.width_o = 8;
	oper_add   nl00i
	( 
	.a({(nl111i50 & n00il), n00iO, (nl111l47 & n00li), n00ll, n00lO, (nl111O44 & n00Oi), n00OO}),
	.b({{6{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nl00i_o));
	defparam
		nl00i.sgate_representation = 0,
		nl00i.width_a = 7,
		nl00i.width_b = 7,
		nl00i.width_o = 7;
	oper_add   nl0iO
	( 
	.a({{11{1'b1}}, 1'b0, {5{1'b1}}}),
	.b({{8{1'b0}}, 1'b1, {7{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nl0iO_o));
	defparam
		nl0iO.sgate_representation = 0,
		nl0iO.width_a = 17,
		nl0iO.width_b = 17,
		nl0iO.width_o = 17;
	oper_add   nl0ll
	( 
	.a({{11{1'b1}}, 1'b0, {5{1'b1}}}),
	.b({{8{1'b0}}, 1'b1, {7{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nl0ll_o));
	defparam
		nl0ll.sgate_representation = 0,
		nl0ll.width_a = 17,
		nl0ll.width_b = 17,
		nl0ll.width_o = 17;
	oper_add   nli0i
	( 
	.a({n0i1i, n0i1l, n0i1O, n0i0i, n0i0l, n0i0O, n0iii, 1'b1}),
	.b({(~ n010i), (~ n010l), (~ n010O), (~ n01ii), (~ n01il), (nl11Oi20 & (~ n01iO)), (~ n01ll), 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nli0i_o));
	defparam
		nli0i.sgate_representation = 0,
		nli0i.width_a = 8,
		nli0i.width_b = 8,
		nli0i.width_o = 8;
	oper_add   nli0l
	( 
	.a({n0iil, n0iiO, n0ili, (nl11OO14 & n0ill), n0ilO, n0iOl, n0l1i, 1'b1}),
	.b({(nl11Ol17 & (~ n010i)), (~ n010l), (~ n010O), (~ n01ii), (~ n01il), (~ n01iO), (~ n01ll), 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nli0l_o));
	defparam
		nli0l.sgate_representation = 0,
		nli0l.width_a = 8,
		nli0l.width_b = 8,
		nli0l.width_o = 8;
	oper_add   nlill
	( 
	.a({(nl101i11 & n0iil), n0iiO, n0ili, n0ill, n0ilO, (nl101l8 & n0iOl), n0l1i}),
	.b({{6{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlill_o));
	defparam
		nlill.sgate_representation = 0,
		nlill.width_a = 7,
		nlill.width_b = 7,
		nlill.width_o = 7;
	oper_add   nlilOO
	( 
	.a({nliilO, nll0Ol, nll0Oi, nll0lO, nll0ll, nll0li, nll0iO, nll0il, nll0ii, nll00O, nll00l, nll00i, nll01O, nll01l, nll01i, nll1OO, 1'b1}),
	.b({{15{1'b1}}, 1'b0, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlilOO_o));
	defparam
		nlilOO.sgate_representation = 0,
		nlilOO.width_a = 17,
		nlilOO.width_b = 17,
		nlilOO.width_o = 17;
	oper_add   nll10i
	( 
	.a({{12{1'b0}}, 1'b1, {3{1'b0}}, 1'b1}),
	.b({{15{1'b1}}, 1'b0, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nll10i_o));
	defparam
		nll10i.sgate_representation = 0,
		nll10i.width_a = 17,
		nll10i.width_b = 17,
		nll10i.width_o = 17;
	oper_add   nll11O
	( 
	.a({{12{1'b0}}, 1'b1, 1'b0, 1'b1}),
	.b({{13{1'b1}}, 1'b0, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nll11O_o));
	defparam
		nll11O.sgate_representation = 0,
		nll11O.width_a = 15,
		nll11O.width_b = 15,
		nll11O.width_o = 15;
	oper_less_than   nil0l
	( 
	.a({{12{1'b0}}, {3{1'b1}}, 1'b0}),
	.b({{9{1'b0}}, nii1O, nii1i, ni0OO, ni0Ol, ni0Oi, ni0lO, ni0ll}),
	.cin(1'b0),
	.o(wire_nil0l_o));
	defparam
		nil0l.sgate_representation = 0,
		nil0l.width_a = 16,
		nil0l.width_b = 16;
	oper_less_than   nil1l
	( 
	.a({{9{1'b0}}, nii1O, nii1i, ni0OO, ni0Ol, ni0Oi, ni0lO, ni0ll}),
	.b({wire_nil1O_o[15:0]}),
	.cin(1'b0),
	.o(wire_nil1l_o));
	defparam
		nil1l.sgate_representation = 0,
		nil1l.width_a = 16,
		nil1l.width_b = 16;
	oper_less_than   nl0il
	( 
	.a({{9{1'b0}}, wire_nli1O_dataout, wire_nli1l_dataout, wire_nli1i_dataout, wire_nl0OO_dataout, wire_nl0Ol_dataout, wire_nl0Oi_dataout, wire_nl0lO_dataout}),
	.b({wire_nl0iO_o[16:9], (nl11ii38 & wire_nl0iO_o[8]), wire_nl0iO_o[7:1]}),
	.cin(1'b1),
	.o(wire_nl0il_o));
	defparam
		nl0il.sgate_representation = 0,
		nl0il.width_a = 16,
		nl0il.width_b = 16;
	oper_less_than   nl0li
	( 
	.a({wire_nl0ll_o[16], (nl11li29 & wire_nl0ll_o[15]), wire_nl0ll_o[14], (nl11ll26 & wire_nl0ll_o[13]), wire_nl0ll_o[12], (nl11lO23 & wire_nl0ll_o[11]), wire_nl0ll_o[10:1]}),
	.b({{9{1'b0}}, wire_nli1O_dataout, (nl11il35 & wire_nli1l_dataout), wire_nli1i_dataout, wire_nl0OO_dataout, wire_nl0Ol_dataout, (nl11iO32 & wire_nl0Oi_dataout), wire_nl0lO_dataout}),
	.cin(1'b0),
	.o(wire_nl0li_o));
	defparam
		nl0li.sgate_representation = 0,
		nl0li.width_a = 16,
		nl0li.width_b = 16;
	oper_selector   nlllll
	( 
	.data({1'b0, wire_nllOOO_dataout, {6{wire_nllOOi_dataout}}}),
	.o(wire_nlllll_o),
	.sel({niOO1i, nlliiO, nlliil, nlliii, nlli0O, nlli0l, nlli0i, nlli1O}));
	defparam
		nlllll.width_data = 8,
		nlllll.width_sel = 8;
	oper_selector   nlllOi
	( 
	.data({1'b0, wire_nlO11i_dataout, wire_nllOOl_dataout, {5{wire_nlO11i_dataout}}}),
	.o(wire_nlllOi_o),
	.sel({niOO1i, nlliiO, nlliil, nlliii, nlli0O, nlli0l, nlli0i, nlli1O}));
	defparam
		nlllOi.width_data = 8,
		nlllOi.width_sel = 8;
	oper_selector   nlllOl
	( 
	.data({1'b0, {2{wire_nlO11l_dataout}}, wire_nllOlO_dataout, {4{wire_nlO11l_dataout}}}),
	.o(wire_nlllOl_o),
	.sel({niOO1i, nlliiO, nlliil, nlliii, nlli0O, nlli0l, nlli0i, nlli1O}));
	defparam
		nlllOl.width_data = 8,
		nlllOl.width_sel = 8;
	oper_selector   nlllOO
	( 
	.data({1'b0, {3{wire_nlO11O_dataout}}, wire_nllOll_dataout, {3{wire_nlO11O_dataout}}}),
	.o(wire_nlllOO_o),
	.sel({niOO1i, nlliiO, nlliil, nlliii, nlli0O, nlli0l, nlli0i, nlli1O}));
	defparam
		nlllOO.width_data = 8,
		nlllOO.width_sel = 8;
	oper_selector   nllO0i
	( 
	.data({{2{wire_nlOi0i_dataout}}, wire_nlO0OO_dataout, {7{wire_nlO1ii_dataout}}}),
	.o(wire_nllO0i_o),
	.sel({nll0OO, nlli1i, nlli1l, nlliiO, nlliil, nlliii, nlli0O, nlli0l, nlli0i, nlli1O}));
	defparam
		nllO0i.width_data = 10,
		nllO0i.width_sel = 10;
	oper_selector   nllO0l
	( 
	.data({{2{wire_nlOi0l_dataout}}, wire_nlOi1i_dataout, {7{wire_nlO1il_dataout}}}),
	.o(wire_nllO0l_o),
	.sel({nll0OO, nlli1i, nlli1l, nlliiO, nlliil, nlliii, nlli0O, nlli0l, nlli0i, nlli1O}));
	defparam
		nllO0l.width_data = 10,
		nllO0l.width_sel = 10;
	oper_selector   nllO0O
	( 
	.data({{2{wire_nlOi0O_dataout}}, 1'b0, {7{wire_nlO1iO_dataout}}}),
	.o(wire_nllO0O_o),
	.sel({nll0OO, nlli1i, nlli1l, nlliiO, nlliil, nlliii, nlli0O, nlli0l, nlli0i, nlli1O}));
	defparam
		nllO0O.width_data = 10,
		nllO0O.width_sel = 10;
	oper_selector   nllO1i
	( 
	.data({1'b0, {4{wire_nlO10i_dataout}}, wire_nllOli_dataout, {2{wire_nlO10i_dataout}}}),
	.o(wire_nllO1i_o),
	.sel({niOO1i, nlliiO, nlliil, nlliii, nlli0O, nlli0l, nlli0i, nlli1O}));
	defparam
		nllO1i.width_data = 8,
		nllO1i.width_sel = 8;
	oper_selector   nllO1l
	( 
	.data({1'b0, {5{wire_nlO10l_dataout}}, wire_nllOiO_dataout, wire_nlO10l_dataout}),
	.o(wire_nllO1l_o),
	.sel({niOO1i, nlliiO, nlliil, nlliii, nlli0O, nlli0l, nlli0i, nlli1O}));
	defparam
		nllO1l.width_data = 8,
		nllO1l.width_sel = 8;
	oper_selector   nllO1O
	( 
	.data({1'b0, {6{wire_nlO10O_dataout}}, wire_nllOil_dataout}),
	.o(wire_nllO1O_o),
	.sel({niOO1i, nlliiO, nlliil, nlliii, nlli0O, nlli0l, nlli0i, nlli1O}));
	defparam
		nllO1O.width_data = 8,
		nllO1O.width_sel = 8;
	assign
		a_renb = nliiii,
		b_dat = {wire_n111O_q_b[31:0]},
		b_dav = ni00i,
		b_eop = wire_n111O_q_b[33],
		b_err = wire_n111O_q_b[34],
		b_mty = {wire_n111O_q_b[37:36]},
		b_par = wire_n111O_q_b[35],
		b_sop = wire_n111O_q_b[32],
		b_val = ni00O,
		niOlOi = ((((((((((((((((~ nll0Ol) & (~ nll0Oi)) & (~ nll0lO)) & (~ nll0ll)) & (~ nll0li)) & (~ nll0iO)) & (~ nll0il)) & (~ nll0ii)) & (~ nll00O)) & (~ nll00l)) & (~ nll00i)) & (~ nll01O)) & (~ nll01l)) & (~ nll01i)) & nll1OO) & (~ nliilO)),
		niOlOl = (nlii0i & nlii0l),
		niOlOO = ((~ nlii0i) | (nll11l | (~ nl1OiO))),
		niOO0i = (((((((~ (n0l1i ^ n01ll)) & (~ (n0iOl ^ n01iO))) & (~ (n0ilO ^ n01il))) & (~ (n0ill ^ n01ii))) & (~ (n0ili ^ n010O))) & (~ (n0iiO ^ n010l))) & (~ (n0iil ^ n010i))),
		niOO0l = (((((((~ (n01ll ^ wire_nlill_o[0])) & (~ (n01iO ^ wire_nlill_o[1]))) & (~ (n01il ^ wire_nlill_o[2]))) & (~ (n01ii ^ wire_nlill_o[3]))) & (~ (n010O ^ wire_nlill_o[4]))) & (~ (n010l ^ wire_nlill_o[5]))) & (~ (n010i ^ wire_nlill_o[6]))),
		niOO0O = (((((((~ (nlO1l ^ nl1ll)) & (~ (nlO1O ^ nl1lO))) & (~ (nlO0l ^ nl1Oi))) & (~ (ni01O ^ nl1Ol))) & (~ (ni01l ^ nl1OO))) & (~ (ni01i ^ nl01i))) & (~ (ni1OO ^ nl01l))),
		niOO1i = ((nlli1l | nlli1i) | nll0OO),
		niOO1l = (nli00O & nli0iO),
		niOO1O = (nlli1i | nll0OO),
		niOOii = (((((((~ (nlO1l ^ nl01O)) & (~ (nlO1O ^ nliil))) & (~ (nlO0l ^ nlili))) & (~ (nlliO ^ ni01O))) & (~ (nllOi ^ ni01l))) & (~ (nllOl ^ ni01i))) & (~ (nlO1i ^ ni1OO))),
		niOOil = (((((((~ (nii0l ^ ni10i)) & (~ (nii0O ^ ni11O))) & (~ (niiii ^ ni11l))) & (~ (niiil ^ ni11i))) & (~ (niiiO ^ n0OOO))) & (~ (niili ^ n0OOl))) & (~ (niill ^ n0OOi))),
		niOOiO = (((((((~ (niilO ^ ni10i)) & (~ (niliO ^ ni11O))) & (~ (niO0l ^ ni11l))) & (~ (niOii ^ ni11i))) & (~ (nl10O ^ n0OOO))) & (~ (nl1ii ^ n0OOl))) & (~ (nl1iO ^ n0OOi))),
		niOOlO = (n0lii & (~ ((n0O0l ^ n0lli) ^ (~ niOOOi53)))),
		niOOOO = (b_ena & (~ ni0li)),
		nl100i = (n1lOl & (~ ((n1Oll ^ n1O1l) ^ (~ nl100l5)))),
		nl101O = (n01Ol ^ (~ n01Oi)),
		nl10ii = (((~ n0l1O) & nllOii) & nl10il2),
		nl10li = ((~ ni0ii) & (wire_n111O_q_b[33] & ni0il)),
		nl10ll = 1'b1,
		nl10Ol = (ni1ii ^ (~ ni10O)),
		nl110i = (((~ n0l1O) & (nlOiOl & nl10ii)) & nl110l41);
endmodule //auk_pac_mrx_pl3_link
//synopsys translate_on
//VALID FILE
